AWSTemplateFormatVersion: "2010-09-09"
Description: "API Gateway - HTTP - Integrate with Existing Lambda Function - Authorizer Lambda - Version 2.0"

Parameters:

  LambdaFunctionName:
    Description: Lambda Function Name
    Type: String
    Default: "my-lambda"

  ResourceName:
    Description: Resource Name
    Type: String
    Default: "demo"

Resources:

## Authorizer

  LambdaAuthorizerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: "dst-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  LambdaAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "dst-lambda"
      Description: "Lambda with Destination"
      Runtime: nodejs12.x
      Role: !GetAtt LambdaAuthorizerExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Code:
        ZipFile: |
          exports.handler =  async function(event, context, callback) {
              console.log("ENVIRONMENT VARIABLES\n" + JSON.stringify(process.env, null, 2));
              console.info("EVENT\n" + JSON.stringify(event, null, 2));
              var token = event.identitySource[0]; console.log("Token:" + token);
              switch (token) {
                  case 'allow':
                      callback(null, generatePolicy('user', 'Allow', event.routeArn));
                      break;
                  case 'deny':
                      callback(null, generatePolicy('user', 'Deny', event.routeArn));
                      break;
                  case 'unauthorized':
                      callback("Unauthorized");   // Return a 401 Unauthorized response
                      break;
                  default:
                      callback("Error: Invalid token"); // Return a 500 Invalid token response
              }
          };
          var generatePolicy = function(principalId, effect, resource) {
              var authResponse = {};
              
              authResponse.principalId = principalId;
              if (effect && resource) {
                  var policyDocument = {};
                  policyDocument.Version = '2012-10-17'; 
                  policyDocument.Statement = [];
                  var statementOne = {};
                  statementOne.Action = 'execute-api:Invoke'; 
                  statementOne.Effect = effect;
                  statementOne.Resource = resource;
                  policyDocument.Statement[0] = statementOne;
                  authResponse.policyDocument = policyDocument;
              }

              authResponse.context = {
                  "stringKey": "stringval",
                  "numberKey": 123,
                  "booleanKey": true
              };
              return authResponse;
          };
      TracingConfig:
        Mode: "Active"

  LambdaAuthorizerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaAuthorizerFunction}"
      RetentionInDays: 1

## HttpAPI

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Version: 1
      Name: demo-lambda-proxy
      Description: Lambda Proxy / Uses resource-based permissions
      ProtocolType: HTTP # WEBSOCKET | HTTP
      #DisableExecuteApiEndpoint: false
      CorsConfiguration:
        #AllowCredentials: false #Specifies whether credentials are included in the CORS request. 
        #AllowHeaders:
        AllowMethods:
          - GET
          - HEAD
          - OPTIONS
          - POST
        AllowOrigins:
          - 'https://*'
        #ExposeHeaders
        MaxAge: 300 # The number of seconds that the browser should cache preflight request results. 
      Tags:
        Environment: test
        Application: api

  HttpApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: LambdaAuthorizer
      ApiId: !Ref HttpApi
      AuthorizerType: REQUEST
      #AuthorizerCredentialsArn: Arn
      AuthorizerPayloadFormatVersion: 2.0
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaAuthorizerFunction}/invocations
      AuthorizerResultTtlInSeconds: 500
      IdentitySource:
        - "$request.header.Authorization"

  ApiInvokeAuthorizerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaAuthorizerFunction}"
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/authorizers/${HttpApiAuthorizer}

  Integration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref HttpApi
      Description: Lambda Integration
      ConnectionType: INTERNET # INTERNET |  VPC_LINK 
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionName}/invocations
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      #TimeoutInMillis: 30000  # Custom timeout between 50 and 30,000 milliseconds

  RouteGetDemo:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: !Sub 'GET /${ResourceName}'
      AuthorizationType:  CUSTOM # NONE | JWT | AWS_IAM | CUSTOM 
      AuthorizerId: !Ref HttpApiAuthorizer
      #OperationName
      #Target: !Sub "integrations/${Integration}"
      Target: !Join
        - /
        - - integrations
          - !Ref Integration

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: true
      StageName: 'stg'
      Description: "Staging"
      StageVariables:
         VariableX: variable-x
      DefaultRouteSettings:
        #DetailedMetricsEnabled: true
        #LoggingLevel: INFO
        #DataTraceEnabled: false
        ThrottlingBurstLimit: 2 # Number of requests your API can handle concurrently.
        ThrottlingRateLimit: 2 # Number of allowed requests per second
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: $context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.protocol" $context.status $context.responseLength $context.requestId $context.integrationErrorMessage
      Tags:
        Environment: test
        Application: api

  ApiInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionName}"
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/${Stage}/GET/${ResourceName}

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${HttpApi}-access-logs"
      RetentionInDays: 1

Outputs:

  InvokeURL:
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/${ResourceName}

  HttpApiEndpoint:
    Value: !GetAtt HttpApi.ApiEndpoint
