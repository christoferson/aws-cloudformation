AWSTemplateFormatVersion: "2010-09-09"
Description: "API Gateway - WebSocket - Lambda"

Parameters:

  CodeBucketName:
    Type: String
    Default: xxx
    Description: Bucket containing lambda code

  CodeObjectKeyOnConnect:
    Type: String
    Default: api-gateway-websocket-lambda/onconnect.zip
    Description: Object Key of the zipped code for OnConnect

  CodeObjectKeyOnDisconnect:
    Type: String
    Default: api-gateway-websocket-lambda/ondisconnect.zip
    Description: Object Key of the zipped code for OnDisconnect

  CodeObjectKeyOnMessage:
    Type: String
    Default: api-gateway-websocket-lambda/onmessage.zip
    Description: Object Key of the zipped code for OnMessage

  CodeObjectKeyOnCustomList:
    Type: String
    Default: api-gateway-websocket-lambda/oncustomlist.zip
    Description: Object Key of the zipped code for OnCustomList

  WebSocketConnectionsTableName:
    Type: String
    Default: 'WebSocketConnections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

Resources:

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref WebSocketConnectionsTableName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: dynamodb
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource: "*" #  !GetAtt WebSocketConnectionsTable.Arn
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*'

# On Connect

  LambdaOnConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "xxx"
      Description: "WebSocket OnConnect Lambda"
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: app.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
          TABLE_NAME: !Ref WebSocketConnectionsTableName
      Timeout: 30 #The default is 3 seconds. The maximum allowed value is 900 seconds.
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeObjectKeyOnConnect
        #S3ObjectVersion: 1
      TracingConfig:
        Mode: "Active"

  LambdaOnConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaOnConnectFunction.Arn
      Action: lambda:InvokeFunction
      Principal: "apigateway.amazonaws.com"

  LambdaOnConnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaOnConnectFunction}"
      RetentionInDays: 1

# On Disconnect

  LambdaOnDisconnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "xxx"
      Description: "WebSocket OnDisconnect Lambda"
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: app.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
          TABLE_NAME: !Ref WebSocketConnectionsTableName
      Timeout: 30 #The default is 3 seconds. The maximum allowed value is 900 seconds.
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeObjectKeyOnDisconnect
        #S3ObjectVersion: 1
      TracingConfig:
        Mode: "Active"

  LambdaOnDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaOnDisconnectFunction.Arn
      Action: lambda:InvokeFunction
      Principal: "apigateway.amazonaws.com"

  LambdaOnDisconnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaOnDisconnectFunction}"
      RetentionInDays: 1

# On Message

  LambdaOnMessageFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "xxx"
      Description: "WebSocket OnMessage Lambda"
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: app.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
          TABLE_NAME: !Ref WebSocketConnectionsTableName
      Timeout: 30 #The default is 3 seconds. The maximum allowed value is 900 seconds.
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeObjectKeyOnMessage
        #S3ObjectVersion: 1
      TracingConfig:
        Mode: "Active"

  LambdaOnMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaOnMessageFunction.Arn
      Action: lambda:InvokeFunction
      Principal: "apigateway.amazonaws.com"

  LambdaOnMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaOnMessageFunction}"
      RetentionInDays: 1

# On List

  LambdaOnCustomListFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "xxx"
      Description: "WebSocket OnCustomList Lambda"
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: app.handler
      Environment:
        Variables:
          databaseName: lambdadb2
          databaseUser: admin
          TABLE_NAME: !Ref WebSocketConnectionsTableName
      Timeout: 30 #The default is 3 seconds. The maximum allowed value is 900 seconds.
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeObjectKeyOnCustomList
        #S3ObjectVersion: 1
      TracingConfig:
        Mode: "Active"

  LambdaOnCustomListPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaOnCustomListFunction.Arn
      Action: lambda:InvokeFunction
      Principal: "apigateway.amazonaws.com"

  LambdaOnCustomListLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaOnCustomListFunction}"
      RetentionInDays: 1

Outputs:

  LambdaOnConnectFunctionName:
    Value: !Ref LambdaOnConnectFunction