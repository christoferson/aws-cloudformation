# Lambda for GET /demo
# HTTP API Gateway
# Staging Stage
# Integration GET /demo with Lambda
# Resource based policy on Lamda to permit access from API Gateway

Resources:

 # Lambda

  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from the ' + event.routeKey + ' route!'),
              };
              return response;
          };

  # API Gateway

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: demo-lambda-proxy
      Description: Lambda Proxy / Uses  resource-based permissions
      ProtocolType: HTTP

  IntegrationGetDemo:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref HttpApi
      Description: Lambda Integration GET /demo
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt MyLambdaFunction.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'

  RouteGetDemo:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /demo'
      Target: !Sub "integrations/${IntegrationGetDemo}"

  StageStg:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: 'stg'
      Description: "Staging"
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt MyLogGroup.Arn
        Format: $context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.protocol" $context.status $context.responseLength $context.requestId $context.integrationErrorMessage

  APIInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/stg/GET/demo

   # Logs

  MyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${HttpApi}-access-logs"


Outputs:
  InvokeURL:
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com

