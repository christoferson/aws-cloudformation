AWSTemplateFormatVersion: "2010-09-09"
Description: "API Gateway - HTTP - Integrate with Lambda Function"
# Lambda for GET /demo
# HTTP API Gateway
# Staging Stage
# Integration GET /demo with Lambda
# Resource based policy on Lamda to permit access from API Gateway

Parameters:

  ApiGatewayName:
    Type: "String"
    Default: "http-lambda-proxy"
    Description: "HTTP Api Gateway Name"

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  LambdaFunctionGetDemo:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello!' + Date.now()),
              };
              return response;
          };
      TracingConfig:
        Mode: Active

  # API Gateway

  HttpApi:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Version: 1
      Name: !Ref ApiGatewayName
      Description: Lambda Proxy / Uses resource-based permissions
      ProtocolType: HTTP # WEBSOCKET | HTTP
      #DisableExecuteApiEndpoint: false
      CorsConfiguration:
        #AllowCredentials: false
        #AllowHeaders:
        AllowMethods:
          - GET
          - HEAD
          - OPTIONS
          - POST
        AllowOrigins:
          - 'https://*'
        #ExposeHeaders
        MaxAge: 300
      Tags:
        Environment: test
        Application: api
        Name: !Ref ApiGatewayName

  IntegrationGetDemo:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref HttpApi
      Description: Lambda Integration GET /demo
      ConnectionType: INTERNET # INTERNET |  VPC_LINK 
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LambdaFunctionGetDemo.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      #TimeoutInMillis: 30000  # Custom timeout between 50 and 30,000 milliseconds

  RouteGetDemo:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /demo'
      AuthorizationType:  NONE
      #AuthorizerId: 
      #OperationName
      Target: !Sub "integrations/${IntegrationGetDemo}"

  StageStg:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: true
      StageName: "stg"
      Description: "Staging"
      StageVariables:
         VariableX: variable-x
      DefaultRouteSettings:
        #DetailedMetricsEnabled: true
        #LoggingLevel: INFO
        #DataTraceEnabled: false
        ThrottlingBurstLimit: 2 # Number of requests your API can handle concurrently.
        ThrottlingRateLimit: 2 # Number of allowed requests per second
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: $context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.protocol" $context.status $context.responseLength $context.requestId $context.integrationErrorMessage
      Tags:
        Environment: test
        Application: demo

  ApiInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunctionGetDemo
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/stg/GET/demo

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${HttpApi}-access-logs"
      RetentionInDays: 1
      Tags:
        - Key: Environment
          Value: dev
        - Key: Application
          Value: app

Outputs:

  InvokeURL:
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${StageStg}/demo

  HttpApiEndpoint:
    Value: !GetAtt HttpApi.ApiEndpoint

  LambdaFunctionGetDemoName:
    Value: !Ref LambdaFunctionGetDemo

  LambdaExecutionRoleName:
    Value: !Ref LambdaExecutionRole


