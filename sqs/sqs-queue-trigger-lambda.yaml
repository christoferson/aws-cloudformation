AWSTemplateFormatVersion: "2010-09-09"
Description: SQS Standard Queue - Triggers Lambda

Resources:

  # Source Queue that will trigger Lambda
  StandardQueue: 
    Type: AWS::SQS::Queue
    Properties: 
       #FifoQueue: false
       #QueueName: sqs-queue-standard
       VisibilityTimeout: 20
       #MaximumMessageSize: 262144 # 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB)
       #DelaySeconds: 0
       MessageRetentionPeriod: 43200 #60 seconds (1 minute) to 1,209,600 seconds (14 days), default value is 345,600 seconds (4 days)
       ReceiveMessageWaitTimeSeconds: 20 # Long Polling
       KmsMasterKeyId: alias/aws/sqs # AWS managed CMK for Amazon SQS
       KmsDataKeyReusePeriodSeconds: 3600 # 60 (1 minute) and 86,400 (24 hours). The default is 300 (5 minutes)
       RedriveAllowPolicy:
         redrivePermission: denyAll # allowAll | denyAll | byQueue
         #sourceQueueArns:
       RedrivePolicy: 
         deadLetterTargetArn: !GetAtt StandardQueueDeadLetter.Arn
         maxReceiveCount: 2
       Tags:
         -
            Key: env
            Value: test

  # Message Goes Here if Lambda Trigger Fails
  StandardQueueDeadLetter: 
    Type: AWS::SQS::Queue
    Properties: 
       #QueueName: sqs-queue-deadletter-dlq
       VisibilityTimeout: 20
       #MaximumMessageSize: 262144 # 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB)
       #DelaySeconds: 0
       MessageRetentionPeriod: 43200 #60 seconds (1 minute) to 1,209,600 seconds (14 days), default value is 345,600 seconds (4 days)
       ReceiveMessageWaitTimeSeconds: 20 # Long Polling
       KmsMasterKeyId: alias/aws/sqs # AWS managed CMK for Amazon SQS
       KmsDataKeyReusePeriodSeconds: 3600 # 60 (1 minute) and 86,400 (24 hours). The default is 300 (5 minutes)
       Tags:
         -
            Key: name
            Value: standard-queue-dead-letter

  LambdaDeadLetterQueue: 
    Type: AWS::SQS::Queue
    Properties: 
       #QueueName: deadletter-lambda-dlq-queue
       Tags:
         -
            Key: name
            Value: lambda-deadletter-queue

  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: "lambda-trigger-sqs-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        #- arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: sqs-integration  # Allow receiving message from the source Queue
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Action:
                - "sqs:ReceiveMessage"
                - "sqs:DeleteMessage"
                - "sqs:GetQueueAttributes"
                #- "sqs:ChangeMessageVisibility"
              Effect: Allow
              Resource: 
                - !GetAtt StandardQueue.Arn
            - Action:
                - "kms:Decrypt"
                #- "kms:GenerateDataKey*"
              Effect: Allow
              Resource: "*" #alias/aws/sqs
        - PolicyName: lambda-integration # Allow sending message to the Destination and DeadLetter Queues
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Action:
                - "sqs:SendMessage"
              Effect: Allow
              Resource: 
                #- !GetAtt DestinationSuccessQueue.Arn
                - !GetAtt DestinationFailureQueue.Arn
                - !GetAtt LambdaDeadLetterQueue.Arn

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "lambda-trigger-sqs-lambda"
      Description: "Lambda Triggered by SQS"
      Runtime: nodejs12.x
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log(event);
              if (event.type == 'error') { throw new Error('Authentication Failed'); }
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hi from the ' + event.routeKey + ' route!'),
              };
              return response;
          };
      DeadLetterConfig:
        TargetArn: !GetAtt LambdaDeadLetterQueue.Arn
      TracingConfig:
        Mode: Active

  DestinationFailureQueue: 
    Type: AWS::SQS::Queue
    Properties: 
       #QueueName: dst-lambda-failure-queue
       Tags:
         -
            Key: env
            Value: test

  LambdaFunctionEventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref LambdaFunction
      MaximumEventAgeInSeconds: 300
      MaximumRetryAttempts: 1
      Qualifier: "$LATEST"
#      Qualifier: !GetAtt version.Version
      DestinationConfig:
          #OnSuccess:
          #  Destination: !GetAtt DestinationSuccessQueue.Arn
          OnFailure:
            Destination: !GetAtt DestinationFailureQueue.Arn

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 1

  # Lambda polls the queue and invokes your Lambda function synchronously. StandardQueue -> LambdaFunction
  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt StandardQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn
      Enabled: true
      BatchSize: 2
      #MaximumBatchingWindowInSeconds: 1
      #FilterCriteria: { "Filters": [ { "Pattern": "{ \"body\": { \"foo\": [ \"bar\" ] }}" } ] } #Match message {"foo":"bar"}

Outputs:

  StandardQueueArn: 
    Description: "ARN of queue"
    Value: !GetAtt StandardQueue.Arn

  StandardQueueUrl: 
    Description: "URL of queue"
    Value: !Ref StandardQueue
