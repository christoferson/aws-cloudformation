AWSTemplateFormatVersion: "2010-09-09"
Description: "Lambda triggered by Dynamo DB Streams"

Resources:

  DynamoTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      #TableName: "Character5"
      AttributeDefinitions: 
        - 
          AttributeName: "Region"
          AttributeType: "S"
        - 
          AttributeName: "CharacterName"
          AttributeType: "S"
        - 
          AttributeName: "Race"
          AttributeType: "S"
        - 
          AttributeName: "Profession"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "Region"
          KeyType: "HASH"
        - 
          AttributeName: "CharacterName"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      LocalSecondaryIndexes: 
        - 
          IndexName: "region-race"
          KeySchema: 
            - 
              AttributeName: "Region"
              KeyType: "HASH"
            - 
              AttributeName: "Race"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "CharacterName"
              - "Profession"
            ProjectionType: "INCLUDE"
        - 
          IndexName: "region-profession"
          KeySchema: 
            - 
              AttributeName: "Region"
              KeyType: "HASH"
            - 
              AttributeName: "Profession"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "CharacterName"
              - "Race"
            ProjectionType: "INCLUDE"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  LambdaTriggerSqsQueueDestinationOnFailure: 
    Type: AWS::SQS::Queue
    Properties: 
       #QueueName: sqs-queue-deadletter-dlq
       VisibilityTimeout: 30
       #MaximumMessageSize: 262144 # 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB)
       #DelaySeconds: 0
       MessageRetentionPeriod: 43200 #60 seconds (1 minute) to 1,209,600 seconds (14 days), default value is 345,600 seconds (4 days)
       ReceiveMessageWaitTimeSeconds: 20 # Long Polling
       KmsMasterKeyId: alias/aws/sqs # AWS managed CMK for Amazon SQS
       KmsDataKeyReusePeriodSeconds: 3600 # 60 (1 minute) and 86,400 (24 hours).
       Tags:
         -
            Key: name
            Value: lambda-trigger-dynamodb-deadLetter

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: "lambda-trigger-dynamodb-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !GetAtt LambdaTriggerSqsQueueDestinationOnFailure.Arn
                Effect: Allow
                Action:
                  - sqs:SendMessage

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "lambda-trigger-dynamodb-lambda"
      Description: "Lambda Triggered by DynamoDB"
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          DatabaseName: lambdadb
          DatabaseUser: admin
      Timeout: 3 #The default is 3 seconds. The maximum allowed value is 900 seconds.
      Code:
        ZipFile: |
          exports.handler = async (event, context, callback) => {
              console.log(event);
              if (!event.Records) { return callback(null, `Failed processing records. No records present.`); }
              let record = event.Records[0];
              let eventID = record.eventID; console.log(`EventID: ${eventID}`);
              if (record.dynamodb.NewImage.Profession) { console.log("Profession: " + JSON.stringify(record.dynamodb.NewImage.Profession.S)); }
              //let what = JSON.stringify(record.dynamodb.NewImage.CharacterName.S); console.log(what);
              if (event.type == 'error') { throw new Error('Authentication Failed'); }
              const response = {
                  statusCode: 200,
                  body: JSON.stringify(`EventID: ${eventID}`),
              };
              return response;
          };

      TracingConfig:
        Mode: "Active"
      Tags:
        - Key: "name"
          Value: "lambda-trigger-dynamodb"

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 1

  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt DynamoTable.StreamArn
      FunctionName: !GetAtt LambdaFunction.Arn
      Enabled: true
      BatchSize: 10
      BisectBatchOnFunctionError: true
      MaximumBatchingWindowInSeconds: 1
      MaximumRecordAgeInSeconds: 60
      MaximumRetryAttempts: 2
      TumblingWindowInSeconds: 1
      ParallelizationFactor: 1
      FunctionResponseTypes: 
        - ReportBatchItemFailures #Allow your function to return a partial successful response for a batch of records.
      #FilterCriteria: { "Filters": [ { "Pattern": "{ \"Metadata1\": [ rule1 ], \"data\": { \"Data1\": [ rule2 ] }}" } ] }
      #FilterCriteria: { "Filters": [ { "Pattern": "{ \"body\": { \"foo\": [ \"bar\" ] }}" } ] }
      StartingPosition: LATEST
      DestinationConfig:
        OnFailure:
          Destination: !GetAtt LambdaTriggerSqsQueueDestinationOnFailure.Arn

Outputs:

  DynamoTableArn:
    Description: Dynamo Database Arn
    Value: !GetAtt DynamoTable.Arn

  DynamoTableStreamArn:
    Value: !GetAtt DynamoTable.StreamArn

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn

