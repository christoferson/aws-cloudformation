AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda Basic with Inline Source (Python) - EC2

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: "basic-lambda-python-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  LambdaExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ec2:*
          Resource:
          - '*'
      Roles:
      - !Ref LambdaExecutionRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "basic-lambda-python"
      Description: "Lambda Python - EC2"
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Code:
        ZipFile: |
            import json
            import boto3

            ec2list = []

            def handler(event, context):

                # Get list of regions
                ec2 = boto3.client('ec2')
                regions = ec2.describe_regions().get('Regions',[] )

                # Iterate over regions
                for region in regions:
                
                    print ("Checking Region -- %s " % region['RegionName'])
                    reg=region['RegionName']
                
                    client = boto3.client('ec2', region_name=reg)
                    response = client.describe_instances()
                    print(response)
                    for reservation in response["Reservations"]:
                        for instance in reservation["Instances"]:
                            print ("  Instance %s in %s" % (instance['InstanceId'], region['RegionName']))
                            ec2list.append(instance['InstanceId'])

                return {
                    "statusCode": 200,
                    "body": ec2list
                }

      TracingConfig:
        Mode: "Active"

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 1

Outputs:

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn

  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn


