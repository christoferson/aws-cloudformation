AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda triggered by SQS. Retries until Message Retention Period expires or is sent to a dead-letter queue.

Resources:

  LambdaTriggerSqsQueue: 
    Type: AWS::SQS::Queue
    Properties: 
       #QueueName: lambda-trigger-sqs-queue
       VisibilityTimeout: 30 # Best Practice is to set VisibilityTimeout to 6x Lambda Timeout
       #MaximumMessageSize: 262144 # 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB)
       #DelaySeconds: 0
       MessageRetentionPeriod: 43200 #60 seconds (1 minute) to 1,209,600 seconds (14 days), default value is 345,600 seconds (4 days)
       ReceiveMessageWaitTimeSeconds: 20 # Long Polling
       KmsMasterKeyId: alias/aws/sqs # AWS managed CMK for Amazon SQS
       KmsDataKeyReusePeriodSeconds: 3600 # 60 (1 minute) and 86,400 (24 hours). The default is 300 (5 minutes)
       RedriveAllowPolicy:
         redrivePermission: allowAll # allowAll | denyAll | byQueue
         #sourceQueueArns:
       RedrivePolicy: 
         deadLetterTargetArn: !GetAtt LambdaTriggerSqsQueueDeadLetter.Arn
         maxReceiveCount: 2
       Tags:
         -
            Key: env
            Value: test

  LambdaTriggerSqsQueueDeadLetter: 
    Type: AWS::SQS::Queue
    Properties: 
       #QueueName: sqs-queue-deadletter-dlq
       VisibilityTimeout: 30
       #MaximumMessageSize: 262144 # 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB)
       #DelaySeconds: 0
       MessageRetentionPeriod: 43200 #60 seconds (1 minute) to 1,209,600 seconds (14 days), default value is 345,600 seconds (4 days)
       ReceiveMessageWaitTimeSeconds: 20 # Long Polling
       KmsMasterKeyId: alias/aws/sqs # AWS managed CMK for Amazon SQS
       KmsDataKeyReusePeriodSeconds: 3600 # 60 (1 minute) and 86,400 (24 hours).
       Tags:
         -
            Key: name
            Value: lambda-trigger-sqsqueue-deadLetter

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: "lambda-trigger-sqs-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "lambda-trigger-sqs-lambda"
      Description: "Lambda Triggered by SQS"
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          DatabaseName: lambdadb
          DatabaseUser: admin
      Timeout: 3 #The default is 3 seconds. The maximum allowed value is 900 seconds.
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log(event);
              let message = JSON.parse(event.Records[0].body);
              console.log("EventType: " + message["type"]);
              if (message["type"] == 'error') { throw new Error('Authentication Failed: ' + event.Records[0].messageId); }
              const response = {
                statusCode: 200,
                body: JSON.stringify('Processed ' + message["type"] + '.'),
              };
              return response;
          };
      TracingConfig:
        Mode: "Active"
      Tags:
        - Key: "name"
          Value: "lambda-trigger-sqs-lambda"

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 1

  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt LambdaTriggerSqsQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn
      Enabled: true
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 1
      FunctionResponseTypes: 
        - ReportBatchItemFailures #Allow your function to return a partial successful response for a batch of records.
      #FilterCriteria: { "Filters": [ { "Pattern": "{ \"Metadata1\": [ rule1 ], \"data\": { \"Data1\": [ rule2 ] }}" } ] }
      #FilterCriteria: { "Filters": [ { "Pattern": "{ \"body\": { \"foo\": [ \"bar\" ] }}" } ] }

Outputs:

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn

  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn

  LambdaTriggerSqsQueueArn:
    Value: !GetAtt LambdaTriggerSqsQueue.Arn