AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda + Application Load Balancer

#MultiValue Headers
# true - multiValueQueryStringParameters: { name: [ 'foo', 'bar', 'zig' ] },
# false - queryStringParameters: { name: 'bar' }

Parameters:

  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id

  VpcSubnetListLoadBalancer:
    Description: Public VpcSubnets for Load Balancer
    Type: List<AWS::EC2::Subnet::Id>

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: "basic-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "basic-lambda"
      Description: "Basic Lambda"
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Timeout: 10 #The default is 3 seconds. The maximum allowed value is 900 seconds.
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log(event);
              let now = new Date();
              const response = {
                  statusCode: 200,
                  statusDescription: "200 OK",
                  isBase64Encoded: false,
                  headers: {
                      "Content-Type": "text/html" 
                  },
                  body: `Greetings: ${now}`,
              };
              return response;
          };
      TracingConfig:
        Mode: "Active"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: "elasticloadbalancing.amazonaws.com"

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 1

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http on port 80
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Subnets: !Ref VpcSubnetListLoadBalancer      
      SecurityGroups: [!Ref LoadBalancerSecurityGroup]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaPermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt LambdaFunction.Arn
      TargetGroupAttributes: 
        - Key: lambda.multi_value_headers.enabled
          Value: true

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

Outputs:

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn

  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn

  LoadBalancerDomainName:
    Value: !GetAtt LoadBalancer.DNSName


