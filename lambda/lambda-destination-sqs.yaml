AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda with Destination

Resources:

  DestinationSuccessQueue: 
    Type: AWS::SQS::Queue
    Properties: 
       QueueName: dst-lambda-success-queue

  DestinationFailureQueue: 
    Type: AWS::SQS::Queue
    Properties: 
       QueueName: dst-lambda-failure-queue

  DeadLetterQueue: 
    Type: AWS::SQS::Queue
    Properties: 
       QueueName: dst-lambda-deadletter-queue

  # Lambda

  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "dst-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: sqs-integration
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Action: "sqs:SendMessage"
              Effect: Allow
              Resource: 
                - !GetAtt DestinationSuccessQueue.Arn
                - !GetAtt DestinationFailureQueue.Arn
                - !GetAtt DeadLetterQueue.Arn

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName : "dst-lambda"
      Description: "Lambda with Destination"
      Runtime: nodejs12.x
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              if (event.type == 'error') { throw new Error('Authentication Failed');
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hi from the ' + event.routeKey + ' route!'),
              };
              return response;
          };
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn

#  LambdaFunctionVersion:
#    Type: AWS::Lambda::Version
#    Properties:
#      FunctionName: !Ref LambdaFunction

  LambdaFunctionEventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref LambdaFunction
      MaximumEventAgeInSeconds: 300
      MaximumRetryAttempts: 1
      Qualifier: "$LATEST"
#      Qualifier: !GetAtt version.Version
      DestinationConfig:
          OnSuccess:
            Destination: !GetAtt DestinationSuccessQueue.Arn
          OnFailure:
            Destination: !GetAtt DestinationFailureQueue.Arn

Outputs:
  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn
  FunctionExecutionRoleArn:
    Value: !GetAtt FunctionExecutionRole.Arn
  DestinationSuccessQueueArn:
    Value: !GetAtt DestinationSuccessQueue.Arn
  DestinationFailureQueueArn:
    Value: !GetAtt DestinationFailureQueue.Arn
  DeadLetterQueueArn:
    Value: !GetAtt DeadLetterQueue.Arn



