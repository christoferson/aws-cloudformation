AWSTemplateFormatVersion: "2010-09-09"
Description: Bedrock Agent Action Group Lambda 

Parameters:

  BedrockAgentSourceArn:
    Description: "BedrockAgent SourceArn"
    Type: String
    Default: "arn:aws:bedrock:us-east-1:xxx:agent/zzz"


Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: ""
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  LambdaExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ec2:*
          Resource:
          - '*'
      Roles:
      - !Ref LambdaExecutionRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : ""
      Description: "Bedrock Agent Lambda Python - EC2"
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Timeout: 900
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Code:
        ZipFile: |
            import boto3
            import json

            def handler(event, context):
                
                ec2 = boto3.client('ec2')
                
                api_path = event["apiPath"]
                response_body = {"application/json": {"body": "api path not found"}}
                status_code = 404
                if api_path == '/create-ec2':
                    param = event['requestBody']['content']['application/json']['properties']
                    instance_type = next(item for item in param if item['name'] == 'instance_type')['value']
                    ami_id = next(item for item in param if item['name'] == 'ami_id')['value']

                    instances = ec2.run_instances(
                        ImageId=ami_id,
                        InstanceType=instance_type,
                        MinCount=1,
                        MaxCount=1
                    )
                    
                    response_body = {"application/json": {"body": json.dumps('Instance Created: ' + str(instances))}}
                    status_code = 200
                
                action_response = {
                    "actionGroup": event["actionGroup"],
                    "apiPath": event["apiPath"],
                    "httpMethod": event["httpMethod"],
                    "httpStatusCode": status_code,
                    "responseBody": response_body,
                }

                api_response = {"messageVersion": "1.0", "response": action_response}
                return api_response
      TracingConfig:
        Mode: "Active"

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 1

  LambdaBedrockAgentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Ref BedrockAgentSourceArn
    
Outputs:

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn

  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn


