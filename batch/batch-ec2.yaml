AWSTemplateFormatVersion: "2010-09-09"
Description: Batch (EC2)

Metadata:

  AWS::CloudFormation::Interface:

    ParameterGroups:
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
          - Service
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - VpcSubnetListCompute
      -
        Label:
          default: "Batch Configuration"
        Parameters:
          - BatchComputeMaxVCpu
      -
        Label:
          default: "Job Configuration"
        Parameters:
          - JobDefinitionImage
          - JobDefinitionCommand

Parameters:

  Application:
    Type: String
    Default: myapp
    Description: Application Name

  Environment:
    Type: String
    Default: dev
    Description: Environment

  Service:
    Type: String
    Default: demo
    Description: Service Name

  BatchComputeMaxVCpu:
    Description: Batch Compute Environment Max vCPU
    Type: Number
    Default: "8"

  VpcId:
    Description : "VPC ID"
    Type: AWS::EC2::VPC::Id

  VpcSubnetListCompute:
    Description: Private VpcSubnets for Web Servers
    Type: List<AWS::EC2::Subnet::Id>

  JobDefinitionImage:
    Description: Job Definition Image
    Type: String
    Default: "busybox"

  JobDefinitionCommand:
    Description: Job Definition Command
    Type: String
    Default: "echo ec2;"

Resources:

  BatchServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      #RoleName: !Sub "BatchServiceRole"
      Description: !Sub "Batch Service Role ${Application}-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: batch.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole" #- arn:aws:iam::aws:policy/aws-service-role/BatchServiceRolePolicy
        - !Ref BatchServiceRolePolicy
      Path: "/"
      Tags:
        - Key: "Application"
          Value: !Ref Application
        - Key: "Environment"
          Value: !Ref Environment

  BatchServiceRolePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Batch Service Role ManagedPolicy ${Application}-${Environment}"
      #ManagedPolicyName: "batch-service-role-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Effect: "Allow"
            Resource: "*"
          - Action:
              - "s3:*"  #TODO CHECK 
            Effect: "Allow"
            Resource: "*"

  BatchComputeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: "BatchComputeEnvironment (EC2) ${Application}-${Environment}-${Service}"
      Tags:
        - Key: Name
          Value: !Sub "batch-ec2-${Application}-${Environment}-${Service}-sg"

  BatchComputeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Path: "/"
      Tags:
        - Key: 'environment'
          Value: common

  BatchComputeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref BatchComputeInstanceRole

  BatchComputeEnvironment:
    Type: "AWS::Batch::ComputeEnvironment"
    Properties:
      #ComputeEnvironmentName: cfn-env # (Optional)
      Type: MANAGED
      State: ENABLED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        MaxvCpus: 8
        DesiredvCpus: 0
        SecurityGroupIds:
          - !Ref BatchComputeSecurityGroup
        Subnets: !Ref VpcSubnetListCompute
          #- !Ref ComputeSubnetId1
          #- !Ref ComputeSubnetId2
        InstanceRole: !GetAtt BatchComputeInstanceProfile.Arn
        InstanceTypes:
          - optimal
        Tags: {"Name": "Batch Compute Environment (EC2)"}

  BatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      #JobQueueName: cfn-queue # (Optional)
      Priority: 1 # Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchComputeEnvironment
      State: ENABLED # if the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
      Tags: {"Name": "Batch Job Queue EC2"}

  BatchJobLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/batch/logs/my-batch-ec2"
      RetentionInDays: 1
      Tags: 
        - Key: "env"
          Value: "prd"

  BatchJobRole:
    Type: 'AWS::IAM::Role'
    Properties:
      #RoleName: !Sub "code-build-demo-role"
      Description: !Sub "Batch Job Role"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - !Ref BatchJobRolePolicy
        #- 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        #- 'arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess'
      Path: /
      Tags:
        - Key: 'environment'
          Value: common

  BatchJobRolePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: "Batch Role ManagedPolicy"
      #ManagedPolicyName: "code-build-demo-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'eks:Describe*'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ecr:GetAuthorizationToken'
            Effect: Allow
            Resource: '*'
          - Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:GetObjectVersion'
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::code-build-demo-bucket/*"
          - Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:PutImage'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'
              - 'ecr:CompleteLayerUpload'
            Effect: Allow
            Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/code-image-repository-demo"
          - Action:
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Effect: Allow
            Resource: 
              - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/code-image-repository-cmn/*"
          - Action:
              - 'ssm:GetParameter'
              - 'ssm:GetParameters'
              - 'ssm:GetParametersByPath'
            Effect: Allow
            Resource: 
              - !Sub "arn:aws:ssm:*:${AWS::AccountId}:parameter/*"

  BatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container # container | multinode
      #JobDefinitionName: cfn-def
      #PlatformCapabilities: 
      #  - FARGATE
      Parameters: {"codec": "mp4"}
      ContainerProperties:
        Image: !Ref JobDefinitionImage
        Privileged: true
        ReadonlyRootFilesystem: false
        JobRoleArn: !GetAtt BatchJobRole.Arn  # AM role that the container can assume for AWS permissions. 
        ExecutionRoleArn: !GetAtt BatchJobRole.Arn #execution role that AWS Batch can assume.
        #Memory: 1024 # This parameter is deprecated, use resourceRequirements to specify the memory requirements for the job definition.
        #Vcpus: 2 #Deprecated. For jobs running on EC2 resources, it specifies the number of vCPUs reserved for the job.
        ResourceRequirements:
          - Type: VCPU
            Value: 2
          - Type: MEMORY
            Value: 1024
        Command:
          - sh 
          - -c 
          - !Ref JobDefinitionCommand
        #NetworkConfiguration:
        #  AssignPublicIp: ENABLED
        Environment:
          - Name: APP_ENV
            Value: "dev"
        Secrets:
          - Name: DB_URL
            ValueFrom: "/demo/database/endpoint"
        LogConfiguration:
          LogDriver: awslogs # Fargate resources are restricted to the awslogs and splunk log drivers.
          Options:
            awslogs-group: !Ref BatchJobLogGroup #/aws/batch/job
            awslogs-region: !Ref "AWS::Region"
            awslogs-stream-prefix: "my-batch"
          #SecretOptions:
          #  - Name: LOG_DB_URL
          #    ValueFrom: "/demo/database/endpoint" # ARN of Secret or SSM
      RetryStrategy:
        Attempts: 1
      Timeout:
        AttemptDurationSeconds: 60 #minimum value for the timeout is 60 seconds.

Outputs:

  BatchServiceRoleArn:
    Value: !Ref BatchServiceRole
