AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::SecretsManager-2020-07-23 #Creates a new Lambda rotation function based on one of the Secrets Manager rotation function templates.
Description: "RDS - MySQL- With Secrets Manager + automatic password rotation"

Metadata:

  AWS::CloudFormation::Interface:

    ParameterGroups:
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment

Parameters:

  Application:
    Type: String
    Default: lab
    Description: Application Name
    
  Environment:
    Type: String
    Default: dev
    Description: Environment
  
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description : "VPC ID"

  VpcSubnetList:
    Description: Private VpcSubnets for Database
    Type: List<AWS::EC2::Subnet::Id>

  DatabaseUserName:
    Type: String
    Default: admin
    Description: Database UserName

  DatabaseMajorVersion:
    Type: String
    Default: "8.0"
    AllowedValues:
      - "5.5"
      - "5.6"
      - "5.7"
      - "8.0"

  DatabaseMinorVersion:
    Type: String
    Default: "32"

Resources: 

  DatabaseSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      #Name: xxx
      Description: "AutoGenerated Secrets Manager secret for the Database Instance"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DatabaseUserName}"}'
        GenerateStringKey: "password"
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
      #KmsKeyId: "aws/secretsmanager" #"alias/aws/secretsmanager"
      Tags:
        -
          Key: "Name"
          Value: "rds-database-secret"

  DatabaseSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: "Database Security Group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"
          ToPort: "3306"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "database-sg"
      
  DatabaseSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupName: !Sub "${Application}-${Environment}-db-subnet"
      DBSubnetGroupDescription: "-"
      SubnetIds: !Ref VpcSubnetList
        #- !Sub "{{resolve:ssm:/${Application}/${Environment}/vpc/subnet/private-subnet-1/id:1}}"
        #- !Sub "{{resolve:ssm:/${Application}/${Environment}/vpc/subnet/private-subnet-2/id:1}}"

  DatabaseParameterGroup:
    Type: "AWS::RDS::DBParameterGroup"
    Properties:
      Family: !Sub "MySQL${DatabaseMajorVersion}"
      Description: !Sub "${Application}-${Environment}-db-pg"

  DatabaseOptionGroup:
    Type: "AWS::RDS::OptionGroup"
    Properties:
      EngineName: mysql
      MajorEngineVersion: !Ref DatabaseMajorVersion
      OptionGroupDescription: !Sub "${Application}-${Environment}-db-og"
      #OptionConfigurations:

  DatabaseInstance:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: "Delete"
    Properties:
      #DBInstanceIdentifier: "database-name"
      Engine: "MySQL"
      EngineVersion: !Sub "${DatabaseMajorVersion}.${DatabaseMinorVersion}"
      DBInstanceClass: "db.t2.micro"
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ]]
      MultiAZ: false
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBParameterGroupName: !Ref DatabaseParameterGroup
      OptionGroupName: !Ref DatabaseOptionGroup
      StorageType: "gp2"
      AllocatedStorage: "20"
      BackupRetentionPeriod: 0
      Tags:
        - Key: "Name"
          Value: "database"

  DatabaseSecretTargetAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref DatabaseSecret
      TargetId: !Ref DatabaseInstance
      TargetType: "AWS::RDS::DBInstance"

  DatabaseSecretRotationSchedule:
    Type: "AWS::SecretsManager::RotationSchedule"
    DependsOn: DatabaseSecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseSecret
      HostedRotationLambda:
        RotationLambdaName: SecretsManagerRotation
        RotationType: MySQLSingleUser
      RotationRules:
        AutomaticallyAfterDays: 30

Outputs:

  DatabaseInstanceName:
    Value: !Ref DatabaseInstance
    
  DatabaseInstanceEndpointAddress:
    Value: !GetAtt DatabaseInstance.Endpoint.Address
    
  DatabaseInstanceResourceId:
    Value: !GetAtt DatabaseInstance.DbiResourceId

  DatabaseInstanceMasterUserSecretArn:
    Value: !GetAtt DatabaseInstance.MasterUserSecret.SecretArn