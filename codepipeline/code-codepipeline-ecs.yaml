AWSTemplateFormatVersion: 2010-09-09
Description: CodePipeline For ECS Fargate

Metadata:

  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Source Repository Configuration"
        Parameters:
          - CodeCommitRepositoryName
      - Label:
          default: "Container Repository Configuration"
        Parameters:
          - ContainerRepositoryName
      - Label:
          default: "ECS Fargate Configuration"
        Parameters:
          - ContainerClusterName
          - ContainerServiceName
          - ContainerName
    ParameterLabels:
      CodeCommitRepositoryName:
        default: "CodeCommit Repository Name"
      ContainerRepositoryName:
        default: "ECR Container Repository Name"
      ContainerClusterName:
        default: "ECS Cluster Name"
      ContainerServiceName:
        default: "ECS TaskName"
      ContainerName:
        default: "ECS Task Container Name"

Parameters:

  ContainerClusterName:
    Type: String
    Default: "ecsdev-cluster"

  ContainerServiceName:
    Type: String
    Default: "ecsdev-service"

  ContainerName:
    Type: String
    Default: "ecsdev-container"

  ContainerRepositoryName:
    Type: String
    Default: "demo-server-blank-ecr"

  CodeCommitRepositoryName: #Todo Add Branch Name
    Description: CodeCommit Repository Name
    Type: String
    Default: "demo-server-blank"

Resources:

  CodePipelineBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      #BucketName: !Ref BucketName
      AccessControl: "Private"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        IgnorePublicAcls: True
        BlockPublicPolicy: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
         Status: Suspended
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      Tags:
        - Key: "application"
          Value: "app"
        - Key: "environment"
          Value: "dev"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Sub "code-build-demo-role"
      Description: !Sub "CodeBuild Role"
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      ManagedPolicyArns:
        - !Ref CodeBuildRolePolicy
        #- arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Tags:
        - Key: 'environment'
          Value: common

  CodeBuildRolePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: "CodeBuild Role ManagedPolicy"
      #ManagedPolicyName: "code-build-demo-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'eks:Describe*'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ecr:GetAuthorizationToken'
            Effect: Allow
            Resource: '*'
          - Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:GetObjectVersion'
            Effect: Allow
            Resource: 
              - !Sub arn:aws:s3:::${CodePipelineBucket}/*
          - Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:PutImage'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'
              - 'ecr:CompleteLayerUpload'
            Effect: Allow
            Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ContainerRepositoryName}"
          - Action:
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Effect: Allow
            Resource: 
              - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ContainerRepositoryName}/*"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub "CodePipeline Role"
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      #ManagedPolicyArns:
      #  - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${CodePipelineBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                  - codebuild:BatchGet*
                  - codebuild:Get*
                  - codebuild:List*
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:ListBranches
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                  - codecommit:CancelUploadArchive
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                  - s3:GetBucketLocation
                  - s3:ListAllMyBuckets
                  - ecs:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - iam:PassRole
              - Resource: "arn:aws:ssm:*:*:parameter/CodeBuild/*"
                Effect: Allow
                Action:
                  - ssm:PutParameter

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      #Name: myProjectName
      Description: Project Description
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        #Image: aws/codebuild/docker:18.09.0-1.7.0
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref ContainerRepositoryName
          - Name: IMAGE_TAG
            Value: "latest"
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerRepositoryName}
          - Name: CONTAINER_NAME
            Value: !Ref ContainerName
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}
                #- $(aws ecr get-login --no-include-email)
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=${COMMIT_HASH:=latest}
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker images...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                - echo Writing image definitions file...
                - echo "[{\"name\":\"${CONTAINER_NAME}\",\"imageUri\":\"${REPOSITORY_URI}:${IMAGE_TAG}\"}]" > imagedefinitions.json
          artifacts:
            files: imagedefinitions.json
      Tags:
        - Key: "application"
          Value: "app"
        - Key: "environment"
          Value: "dev"

  CodePipelinePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      #Name: !Ref PipelineName
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: !Ref CodeCommitRepositoryName
                PollForSourceChanges: false
                BranchName: master
              RunOrder: 1
              OutputArtifacts:
                - Name: App
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref ContainerClusterName
                ServiceName: !Ref ContainerServiceName
                FileName: imagedefinitions.json
              RunOrder: 1
              InputArtifacts:
                - Name: BuildOutput
      Tags:
        - Key: "application"
          Value: "app"
        - Key: "environment"
          Value: "dev"
        - Key: "source"
          Value: !Sub "${CodeCommitRepositoryName}"

  LogGroupCodeBuildProject:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${CodeBuildProject}"
      RetentionInDays: 1

## Trigger CodePipeline on Push

  EventBridgeCodePipelineTriggerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Trigger CodeBuild"
      #ManagedPolicyName:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - codepipeline:StartPipelineExecution
            Effect: Allow
            Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelinePipeline}" #TODO #Resource: !Sub "${CodePipelinePipeline.Arn}"

  EventBridgeCodePipelineTriggerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      #RoleName:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
      Description: "EventBridgeCodePipelineTriggerRole"
      ManagedPolicyArns:
        - !Ref EventBridgeCodePipelineTriggerPolicy
      Tags:
        - Key: 'environment'
          Value: common
        - Key: owner
          Value: xxx

  EventBridgeRuleCodeCommitOnPush: 
    Type: AWS::Events::Rule
    Properties: 
      #Name: eventbridge-rule-codecommit-on-push-sns
      Description: "CodeCommit OnPush Trigger"
      #EventBusName: default
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - "CodeCommit Repository State Change"
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - master
            - main
            - staging
        resources:
          - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepositoryName}" #TODO
          # - !Sub "${CodeCommitRepository.Arn}" 
      State: "ENABLED"
      Targets:
        -
          #Arn: !GetAtt CodePipelinePipeline.Arn
          Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelinePipeline}" #TODO
          Id: "TriggerCodePipeline"
          RoleArn: !GetAtt EventBridgeCodePipelineTriggerRole.Arn

Outputs:

  CodeBuildRoleArn:
    Value: !Ref CodeBuildRole

  CodePipelineBucketName:
    Value: !Ref CodePipelineBucket
