AWSTemplateFormatVersion: "2010-09-09"
Description: Route53 + Application Load Balancer - HTTPS Enabled + Lambda + OIDC
# https://login.microsoftonline.com/<tenant-id>/v2.0/.well-known/openid-configuration
# https://docs.aws.amazon.com/ja_jp/elasticloadbalancing/latest/application/listener-authenticate-users.html
# https://docs.microsoft.com/ja-jp/azure/active-directory/develop/active-directory-optional-claims
# X-AMZN-OIDC-*
# https://learn.microsoft.com/en-us/entra/architecture/auth-oidc

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
    
      - Label: 
          default: "Application Configuration"
        Parameters: 
          - Application
          
      - Label: 
          default: "Dns Configuration"
        Parameters: 
          - HostedZoneName
          - LoadBalancerSubDomainName
          - CertificateManagerCertificateArn

      - Label: 
          default: "Load Balancer Configuration"
        Parameters: 
          - VpcId
          - VpcSubnetListLoadBalancer
      - Label: 
          default: "OIDC Identity Provider IdP Configuration"
        Parameters: 
          - OidcIssuer
          - OidcAuthorizationEndpoint
          - OidcTokenEndpoint
          - OidcUserInfoEndpoint
          - OidcScope
      - Label: 
          default: "OIDC Client Configuration"
        Parameters: 
          - OidcClientId
          - OidcClientSecret
      - Label: 
          default: "OIDC Client Session Configuration"
        Parameters: 
          - OidcSessionTimeout
          - OidcSessionCookieName

                    
    ParameterLabels: 
      LoadBalancerSubDomainName:
        default: "SubDomain to point to the LoadBalancer"

Parameters:

  Application:
    Type: String
    Default: myapp
    Description: Application Name

  HostedZoneName:
    Description: "Domain Name. Must include trailing dot (e.g. example.com.)"
    Type: String
    Default: "example.com."

  LoadBalancerSubDomainName:
    Description: "Sub Domain Name of the Application Load Balancer"
    Type: String
    Default: "r53lb2"

  VpcId:
    Description: "VPC ID"
    Type: AWS::EC2::VPC::Id

  VpcSubnetListLoadBalancer:
    Description: "Public VpcSubnets for Load Balancer"
    Type: List<AWS::EC2::Subnet::Id>

  CertificateManagerCertificateArn:
    Description: "ARN of the certificate for HTTPS"
    Type: String
    Default: "arn:aws:acm:region:xxxx:certificate/bar"

  OidcIssuer:
    Description: "OidcIssuer"
    Type: String
    Default: "https://login.microsoftonline.com/${self:custom.oidc.tenantId}/v2.0"

  OidcAuthorizationEndpoint:
    Description: "OidcAuthorizationEndpoint"
    Type: String
    Default: "https://login.microsoftonline.com/${self:custom.oidc.tenantId}/oauth2/v2.0/authorize"

  OidcTokenEndpoint:
    Description: "OidcTokenEndpoint"
    Type: String
    Default: "https://login.microsoftonline.com/${self:custom.oidc.tenantId}/oauth2/v2.0/token"

  OidcUserInfoEndpoint:
    Description: "OidcUserInfoEndpoint"
    Type: String
    Default: "https://graph.microsoft.com/oidc/userinfo"

  OidcClientId: #!Sub '{{resolve:ssm:${OidcClientSecret}:1}}'
    Description: "OidcClientId"
    Type: AWS::SSM::Parameter::Name #Type: AWS::SSM::Parameter::Value<String> #Type: String
    Default: "/demo/database/user"
    
  OidcClientSecret: #!Sub '{{resolve:ssm-secure:${OidcClientSecret}:1}}'
    Description: "OidcClientSecret"
    Type: AWS::SSM::Parameter::Name #Type: AWS::SSM::Parameter::Value<String>  #Type: String
    Default: "/demo/database/name"
    
  OidcScope:
    Description: "OidcScope"
    Type: String
    Default: "openid"
    
  OidcSessionTimeout:
    Description: "OidcSessionTimeout"
    Type: String
    Default: "604800" #7 Days
    
  OidcSessionCookieName:
    Description: "OidcSessionCookieName"
    Type: String
    Default: "AWSELBAuthSessionCookie"
        
Resources:

  # Backing Lambda Function - Called via the Load Balancer (1) Resource server

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: "basic-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "basic-lambda"
      Description: "Lambda Default"
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Timeout: 10 #The default is 3 seconds. The maximum allowed value is 900 seconds.
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log(event);
              let now = new Date();
              const response = {
                  statusCode: 200,
                  statusDescription: "200 OK",
                  isBase64Encoded: false,
                  headers: {
                      "Content-Type": "text/html; charset=utf-8" 
                  },
                  "multiValueHeaders": {
                      "Content-Type": ["text/html; charset=utf-8"]
                  },
                  body: `<html><body><p>Greetings: ${now}</p></body></html>`,
              };
              return response;
          };
      TracingConfig:
        Mode: "Active"
      Tags:
        - Key: "Application"
          Value: !Ref Application
        - Key: "Name"
          Value: !Sub "${Application}-lambda-default"
          
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: "elasticloadbalancing.amazonaws.com"
      SourceArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:*"

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 1

  # Backing Lambda Function - Called via the Load Balancer (2)

  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "basic-lambda"
      Description: "Lambda - 1"
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Timeout: 10 #The default is 3 seconds. The maximum allowed value is 900 seconds.
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log(event);
              let now = new Date();
              const response = {
                  statusCode: 200,
                  statusDescription: "200 OK",
                  isBase64Encoded: false,
                  headers: {
                      "Content-Type": "text/html; charset=utf-8" 
                  },
                  "multiValueHeaders": {
                      "Content-Type": ["text/html; charset=utf-8"]
                  },
                  body: `<html><body><p>Lambda Function 1: ${now}</p></body></html>`,
              };
              return response;
          };
      TracingConfig:
        Mode: "Active"

  LambdaPermission1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction1.Arn
      Action: lambda:InvokeFunction
      Principal: "elasticloadbalancing.amazonaws.com"
      SourceArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:*"

  LambdaLogGroup1:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction1}"
      RetentionInDays: 1
      

  # Load Balancer definition

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http on port 80
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Subnets: !Ref VpcSubnetListLoadBalancer
      SecurityGroups: [!Ref LoadBalancerSecurityGroup]
      #LoadBalancerAttributes:
      #  - Key: "deletion_protection.enabled"
      #    Value: "false"
      Tags:
        - Key: Name
          Value: !Sub "route53-elb-https"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    #DependsOn: LambdaPermission
    Properties:
      HealthCheckIntervalSeconds: 45
      HealthCheckPath: "/"
      HealthCheckTimeoutSeconds: 30
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      HealthyThresholdCount: 5
      HealthCheckEnabled: true
      TargetType: lambda
      Targets:
        - Id: !GetAtt LambdaFunction.Arn
          AvailabilityZone: "all"
      TargetGroupAttributes: 
        - Key: lambda.multi_value_headers.enabled
          Value: true

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateManagerCertificateArn
      #DefaultActions:
      #  - Type: fixed-response
      #    FixedResponseConfig:
      #      StatusCode: 200
      #      MessageBody: <html>Top Page - RedBox</html>
      #      ContentType: text/html
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  HTTPlistenerHttp: #Redirect HTTP (80) -> HTTPS (443)
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

# DNS

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${HostedZoneName}"
      Comment: "Alias targeted to Application LoadBalancer"
      RecordSets:
      - Name: !Sub "${LoadBalancerSubDomainName}.${HostedZoneName}"
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt LoadBalancer.DNSName

# Backend Paths #1

  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaPermission
    Properties:
    Properties:
      HealthCheckIntervalSeconds: 45
      HealthCheckPath: "/"
      HealthCheckTimeoutSeconds: 30
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      HealthyThresholdCount: 5
      HealthCheckEnabled: true
      TargetType: lambda
      Targets:
        - Id: !GetAtt LambdaFunction1.Arn
          AvailabilityZone: "all"
      TargetGroupAttributes: 
        - Key: lambda.multi_value_headers.enabled
          Value: true

  ListenerRule1:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "1"
      ListenerArn: !Ref HttpListener
      Conditions:
        - Field: "path-pattern"
          Values:
            - "/v1/lambda1"
      Actions:
        #- Type: "authenticate-cognito"
        #  Order: 1
        #  AuthenticateCognitoConfig:
        #      OnUnauthenticatedRequest: "authenticate" # allow | authenticate | deny
        #      #Scope: "openid"
        #      #SessionCookieName: "AWSELBAuthSessionCookie"
        #      #SessionTimeout: 604800 #(7 days)
        #      UserPoolArn: !Ref CognitoUserPoolArn
        #      UserPoolClientId: !Ref CognitoUserPoolClientId
        #      UserPoolDomain: !Ref CognitoUserPoolDomainName
        - Type: "authenticate-oidc"
          Order: 1
          AuthenticateOidcConfig:
            Issuer: !Ref OidcIssuer
            AuthorizationEndpoint: !Ref OidcAuthorizationEndpoint
            TokenEndpoint: !Ref OidcTokenEndpoint
            UserInfoEndpoint: !Ref OidcUserInfoEndpoint
            ClientId: !Sub "{{resolve:ssm:${OidcClientId}}}"
            ClientSecret: !Sub "{{resolve:ssm:${OidcClientSecret}}}"
            OnUnauthenticatedRequest: "authenticate"
            Scope: !Ref OidcScope
            SessionCookieName: !Ref OidcSessionCookieName #"AWSELBAuthSessionCookie"
            SessionTimeout: !Ref OidcSessionTimeout #"604800" #7 Days
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup1
          Order: 2
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup1
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false


Outputs:

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn

  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn

  LoadBalancerDomainName:
    Value: !GetAtt LoadBalancer.DNSName

  LoadBalancerUrlHttp: # Will Redirect to HTTPS, HTTPS =  SNI or certificate check failed: SEC_E_WRONG_PRINCIPAL (0x80090322)
    Value: !Sub "http://${LoadBalancer.DNSName}"

  Route53UrlHttps:
    Value: !Sub "https://${LoadBalancerSubDomainName}.${HostedZoneName}"

  Route53UrlHttpsLambda1:
    Value: !Sub "https://${LoadBalancerSubDomainName}.${HostedZoneName}/v1/lambda1"

#  ClientId:
#    Value: !Sub '{{resolve:ssm:${OidcClientId}}}'



    