AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 - Basic HTTP Server

Metadata:

  StackVersion: 1

  AWS::CloudFormation::Interface:

    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - VpcEc2Subnet

      -
        Label:
          default: "Instance Configuration"
        Parameters:
          - Ec2ImageId
          - Ec2InstanceType

Parameters:

  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id

  VpcEc2Subnet:
    Description: EC2 subnet
    Type: AWS::EC2::Subnet::Id

  Ec2ImageId:
    Description: EC2 AMI ID
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  Ec2InstanceType:
    Description: EC2 InstanceType
    Type: String
    Default: t2.micro

  CloudWatchLogPath:
    Description: Cloudwatch Log Path
    Type: String
    Default: cwlogs

Resources:

  Ec2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: /
      Policies: !Ref 'AWS::NoValue'
      RoleName: !Ref 'AWS::NoValue'

  Ec2RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Ec2RolePolicies
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:List*
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Resource:
          - arn:aws:logs:*:*:*
      Roles:
      - !Ref 'Ec2IAMRole'

  Ec2IAMProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Ec2IAMRole
    Properties:
      Path: /
      Roles:
      - !Ref Ec2IAMRole


  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: allow ICMP via same VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"


  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref Ec2ImageId
      InstanceType: !Ref Ec2InstanceType
      #KeyName: !Ref Ec2InstanceKeyName
      IamInstanceProfile: !Ref Ec2IAMProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeType: "gp2"
            VolumeSize: "8"
      SecurityGroupIds:
        - !Ref Ec2SecurityGroup
      SubnetId: !Ref VpcEc2Subnet
      #Monitoring: true # Enable Detailed Monitoring
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y
            if [ ! -f /swapfile ]; then dd if=/dev/zero of=/swapfile bs=1M count=256; chmod 600 /swapfile; mkswap /swapfile; swapon /swapfile; fi
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello from $(hostname -f)</h1>" > /var/www/html/index.html
            rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CloudWatchAgentParameter} -s
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a start
            #yum update -y aws-cfn-bootstrap
            #/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2AutoScalingGroup --region ${AWS::Region}
      Tags:
        - Key: Environment
          Value: "dev"



  CloudWatchAgentParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub 'AmazonCloudWatch-agent-config'
      Type: String
      Value: !Sub |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "${LogGroupHttpdErrorLog}"
                  },
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "${LogGroupHttpdAccessLog}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "append_dimensions": {
              "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
              "ImageId": "${!aws:ImageId}",
              "InstanceId": "${!aws:InstanceId}",
              "InstanceType": "${!aws:InstanceType}"
            },
            "metrics_collected": {
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              },
              "cpu": {
                "measurement": [
                  {"name": "cpu_usage_idle", "unit": "Percent"},
                  {"name": "cpu_usage_nice", "unit": "Percent"}
                ],
                "metrics_collection_interval": 60
              },
              "processes": {
                "measurement": [
                  "total"
                ],
                "metrics_collection_interval": 60
              },
              "netstat": {
                "measurement": [
                  "tcp_established"
                ],
                "metrics_collection_interval": 60
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "resources": [
                  "/"
                ],
                "ignore_file_system_types": [
                  "xfs"
                ],
                "metrics_collection_interval": 300
              },
              "swap": {
                "measurement": [
                  "swap_used_percent"
                ],
                "metrics_collection_interval": 300
              }
            }
          }
        } 
      Description: !Sub 'CloudWatch agent config for /${CloudWatchLogPath}'

  LogGroupHttpdErrorLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/${CloudWatchLogPath}/cloudwatch-agent/httpd/error_log'
      RetentionInDays: 1

  LogGroupHttpdAccessLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/${CloudWatchLogPath}/cloudwatch-agent/httpd/access_log'
      RetentionInDays: 1

Outputs:

  EC2InstancePublicIp:
    Value: !GetAtt EC2Instance.PublicIp
