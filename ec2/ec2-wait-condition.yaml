AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 - Wait Condition

Parameters:

  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: VPC ID

  SubnetId:
    Type: "AWS::EC2::Subnet::Id"
    Description: SubnetId

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances

  FromIpAddress:
    Type: String
    Description: The IP address range that can be used to SSH and HTTP to the EC2 instances
    Default: 0.0.0.0/0

  InstanceMachineImageId:
    Description: AMI Id
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  WebPageText:
    Type: String
    Description: WebPage Display
    Default: "<p>Hello!</p>"

Resources:

  ServerInstanceMaster:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install a simple web app
      AWS::CloudFormation::Init:
        config:
          files:
            /var/log/cfn-init.log:
              content: !Sub |
                stack=${AWS::StackName}
                region=${AWS::Region}
              mode: '000766'
              owner: ec2-user
              group: ec2-user
    Properties:
      ImageId: !Ref InstanceMachineImageId
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      SubnetId : !Ref SubnetId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo 'sleeping...'
          sleep 30s
          # return status 0 with message cf-success-signal
          # WaitHandle is the http cloudformation callback url. callback url is secured by sigv4
          echo 'initiate signal complete'
          /opt/aws/bin/cfn-signal -e 0 -r 'cf-success-signal' '${MasterWaitHandle}'
          echo 'signal sent'

  MasterWaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  MasterWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: ServerInstanceMaster
    Properties:
      Handle: !Ref MasterWaitHandle	
      Timeout: "300"
      Count: 1

  # Server Instance will wait for the Master Instance WaitCondition to be flagged complete. DependsOn: MasterWaitCondition
  ServerInstance:
    Type: AWS::EC2::Instance
    DependsOn: MasterWaitCondition
    Metadata:
      Comment: Wait for Master Server Instance to complete
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Sub |
                ${WebPageText}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: !Ref InstanceMachineImageId
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      SubnetId : !Ref SubnetId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v \
          --stack ${AWS::StackName} \
          --resource ServerInstance \
          --region ${AWS::Region}
          
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref FromIpAddress
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref FromIpAddress
      VpcId: !Ref VpcId

Outputs:

  ServerInstanceMasterPublicIp:
    Value: !GetAtt ServerInstanceMaster.PublicIp

  ServerInstancePublicIp:
    Value: !GetAtt ServerInstance.PublicIp