AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Fargate with Application Load Balancer (Cluster Only)

Metadata:

  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - VpcSubnetListLoadBalancer

Parameters:

  Application:
    Type: String
    Default: ecsfargate
    Description: Application Name

  Environment:
    Type: String
    Default: dev
    Description: Environment

  VpcId:
    Description : "VPC ID"
    Type: AWS::EC2::VPC::Id

  VpcSubnetListLoadBalancer:
    Description: Public VpcSubnets for Load Balancer
    Type: List<AWS::EC2::Subnet::Id>

Resources:

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: !Sub "${Application} ${Environment} LoadBalancer SecurityGroup"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"

# ------------------------------------------------------------#
#  Internet ALB
# ------------------------------------------------------------#
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      #Name: !Sub "${ProjectName}-${InternetALBName}"
      Scheme: "internet-facing"
      LoadBalancerAttributes:
        - Key: "deletion_protection.enabled"
          Value: false
        - Key: "idle_timeout.timeout_seconds"
          Value: 60
        #- Key: "access_logs.s3.enabled"
        #  Value: true
        #- Key: "access_logs.s3.bucket"
        #  Value: !Sub "alb-log-${AWS::AccountId}"
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref VpcSubnetListLoadBalancer
      #  - !Ref ALBSubnetId1
      #  - !Ref ALBSubnetId2
      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-loadbalancer"

  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "Forbidden!"
            StatusCode: "503"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  Cluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      #ClusterName: !Sub "${Application}-${Environment}-cluster"
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Configuration:
        ExecuteCommandConfiguration:
            Logging: DEFAULT
      ClusterSettings:
        - Name: containerInsights
          Value: disabled #enabled
      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-cluster"

  ClusterLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub "/ecs/logs/${Application}/${Environment}/cluster"
      RetentionInDays: 1

Outputs:

  ClusterArn:
    Value: !GetAtt Cluster.Arn

  LoadBalancerDomainName:
    Value: !GetAtt LoadBalancer.DNSName

  LoadBalancerListenerArn:
    Value: !GetAtt LoadBalancerListener.ListenerArn