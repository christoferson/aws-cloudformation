AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Fargate Cluster Service and Task

Metadata:

  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Project Name Prefix"
        Parameters:
          - ProjectName
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - ECSSubnetId1
          - ECSSubnetId2
      - Label:
          default: "Cluster Configuration"
        Parameters:
          - ClusterArn
          - LoadBalancerArn
          - LoadBalancerSecurityGroupId
      - Label:
          default: "Service Configuration"
        Parameters:
          - ECSTaskName
          - ECSTaskCPUUnit
          - ECSTaskMemory
          - ECSContainerName
          - ECSContainerPort
          - ECSImageName
          - ECSServiceName
          - ECSTaskDesiredCount


    ParameterLabels:
      ECSTaskName:
        default: "ECSTaskName"
      ECSTaskCPUUnit:
        default: "ECSTaskCPUUnit"
      ECSTaskMemory:
        default: "ECSTaskMemory"
      ECSContainerName:
        default: "ECSContainerName"
      ECSContainerPort:
        default: "ECSContainerPort"
      ECSImageName:
        default: "ECSImageName"
      ECSServiceName:
        default: "ECSServiceName"
      ECSTaskDesiredCount:
        default: "ECSTaskDesiredCount"


Parameters:

  ProjectName:
    Default: ecsdev
    Type: String

  VpcId:
    Description : "VPC ID"
    Type: AWS::EC2::VPC::Id

  LoadBalancerArn:
    Description : "LoadBalancerArn"
    Type: String

  LoadBalancerSecurityGroupId:
    Description : "LoadBalancerSecurityGroupId"
    Type: AWS::EC2::SecurityGroup::Id


  ClusterArn:
    Description : "short name or full Amazon Resource Name (ARN) of the cluster that you run your service on"
    Type: String

  ECSSubnetId1:
    Description : "ECS Subnet 1st - Private Subnet"
    Type : AWS::EC2::Subnet::Id

  ECSSubnetId2:
    Description : "ECS Subnet 2nd - Private Subnet"
    Type : AWS::EC2::Subnet::Id

  ECSTaskName:
    Type: String
    Default: "task"

  ECSTaskCPUUnit:
    AllowedValues: [ 256, 512, 1024, 2048, 4096  ]
    Type: String
    Default: 256

  ECSTaskMemory:
    AllowedValues: [ 256, 512, 1024, 2048, 4096  ]
    Type: String
    Default: 512

  ECSContainerName:
    Type: String
    Default: "container"

  ECSContainerPort:
    Type: Number
    Default: 80

  ECSImageName:
    Type: String
    Default: "httpd:latest"

  ECSServiceName:
    Type: String
    Default: "service"

  ECSTaskDesiredCount:
    Type: Number
    Default: 1

Resources:

  EcsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: "ECS Security Group. Only allow inbound access from the Load Balancer"
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroupId
        IpProtocol: -1

# ------------------------------------------------------------#
#  Target Group
# ------------------------------------------------------------#
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !Ref VpcId
      #Name: !Sub "${ProjectName}-${TargetGroupName}"
      Protocol: HTTP
      Port: !Ref ECSContainerPort
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthyThresholdCount: 5

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 80
      Protocol: HTTP

# ------------------------------------------------------------#
#  ECS Task Execution Role
# ------------------------------------------------------------#
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Sub "${ProjectName}-ECSTaskExecutionRolePolicy"
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

# ------------------------------------------------------------#
#  ECS Task Role
# ------------------------------------------------------------#
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Sub "${ProjectName}-ECSTaskRole"
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: access-secrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - 'ssm:GetParameters'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'secretsmanager:GetSecretValue' 
                Effect: Allow
                Resource: '*' #arn:aws:secretsmanager:<region>:<aws_account_id>:secret:<secret_name>
              - Action:
                  - 'kms:Decrypt'
                Effect: Allow
                Resource: '*' #arn:aws:kms:<region>:<aws_account_id>:key/<key_id>
      Tags: 
        - Key: "Name"
          Value: "ecs-task-role"

  TaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/ecs/logs/${ProjectName}-ecs-task"
      RetentionInDays: 1

# ------------------------------------------------------------#
#  ECS TaskDefinition
# ------------------------------------------------------------#
  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Cpu: !Ref ECSTaskCPUUnit
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      Family: !Sub "${ProjectName}-${ECSTaskName}"
      Memory: !Ref ECSTaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Sub "${ProjectName}-${ECSContainerName}"
          Image: !Ref ECSImageName
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Ref ProjectName
          MemoryReservation: 128
          PortMappings:
            - Protocol: tcp
              #HostPort: !Ref ECSContainerPort
              ContainerPort: !Ref ECSContainerPort
          #HealthCheck
          #Secrets
      #PlacementConstraints
      Tags:
        - Key: "keyname1"
          Value: "value1"

# ------------------------------------------------------------#
#  ECS Service
# ------------------------------------------------------------#
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ClusterArn
      DesiredCount: !Ref ECSTaskDesiredCount
      LaunchType: FARGATE
      LoadBalancers:
        -
          TargetGroupArn: !Ref TargetGroup
          ContainerPort: !Ref ECSContainerPort
          ContainerName: !Sub "${ProjectName}-${ECSContainerName}"
      NetworkConfiguration:
       AwsvpcConfiguration:
           AssignPublicIp: ENABLED
           SecurityGroups:
             - !Ref EcsServiceSecurityGroup
           Subnets:
             - !Ref ECSSubnetId1
             - !Ref ECSSubnetId2
      ServiceName: !Sub "${ProjectName}-${ECSServiceName}"
      TaskDefinition: !Ref ECSTaskDefinition
      HealthCheckGracePeriodSeconds: 60
      #PropagateTags: SERVICE | TASK_DEFINITION
      #SchedulingStrategy: DAEMON | REPLICA
      DeploymentController:
         Type: ECS #CODE_DEPLOY | ECS | EXTERNAL
      Tags:
        - Key: "Name"
          Value: "ecs-service"

