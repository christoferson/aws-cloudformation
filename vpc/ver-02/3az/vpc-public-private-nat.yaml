#==============================================================================
# AWS CloudFormation Template: Multi-AZ VPC with Public and Private Subnets
#==============================================================================
# 
# Purpose: Creates a highly available VPC infrastructure spanning 3 Availability 
#          Zones with both public and private subnets, NAT Gateways for outbound 
#          internet access from private subnets, and proper routing configuration.
#
# Architecture:
#   - 1 VPC with configurable CIDR block
#   - 3 Public subnets (one per AZ) with Internet Gateway access
#   - 3 Private subnets (one per AZ) with NAT Gateway access
#   - 3 NAT Gateways (one per AZ) for high availability
#   - Route tables and associations for proper traffic routing
#   - SSM Parameters for cross-stack resource sharing
#
# Use Cases:
#   - Multi-tier applications requiring public and private network segments
#   - Kubernetes/EKS cluster infrastructure
#   - Applications requiring high availability across multiple AZs
#   - Workloads needing secure private subnets with controlled internet access
#
# Author: [Your Name]
# Version: 1.0
# Last Modified: [Date]
#==============================================================================

AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with Public and Private Subnets spanning 3 Availability Zones plus NAT Gateway'

#==============================================================================
# METADATA SECTION
# Defines the parameter grouping and organization in the CloudFormation console
#==============================================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PublicSubnet03Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
          - PrivateSubnet03Block

#==============================================================================
# PARAMETERS SECTION
# Input parameters for customizing the VPC deployment
#==============================================================================
Parameters:

  Application:
    Type: String
    Default: myapp
    Description: Application Name

  Environment:
    Type: String
    Default: dev
    Description: Environment

  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 10.0.128.0/24
    Description: CidrBlock for public subnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Default: 10.0.144.0/24
    Description: CidrBlock for public subnet 02 within the VPC

  PublicSubnet03Block:
    Type: String
    Default: 10.0.160.0/24
    Description: CidrBlock for public subnet 03 within the VPC

  PrivateSubnet01Block:
    Type: String
    Default: 10.0.0.0/20
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 10.0.32.0/20
    Description: CidrBlock for private subnet 02 within the VPC

  PrivateSubnet03Block:
    Type: String
    Default: 10.0.64.0/20
    Description: CidrBlock for private subnet 03 within the VPC

#==============================================================================
# RESOURCES SECTION
# AWS resources that comprise the VPC infrastructure
#==============================================================================
Resources:

  #============================================================================
  # VPC CORE COMPONENTS
  # Main VPC, Internet Gateway, and VPC Gateway Attachment
  #============================================================================

  # Main VPC - The foundational network container for all resources
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true      # Enable DNS resolution within the VPC
      EnableDnsHostnames: true    # Enable DNS hostnames for instances
      InstanceTenancy: "default"  # Use shared hardware tenancy
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc"

  # Internet Gateway - Provides internet access to public subnets
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-igw"

  # VPC Gateway Attachment - Connects the Internet Gateway to the VPC
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #============================================================================
  # ROUTE TABLES
  # Routing configuration for public and private subnets
  #============================================================================

  # Public Route Table - Shared by all public subnets for internet access
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Description
        Value: Public Subnet Route Table
      - Key: Network
        Value: Public
      - Key: Name
        Value: !Sub "${Application}-${Environment}-rt-public"

  # Public Route - Directs all traffic (0.0.0.0/0) to the Internet Gateway
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Private Route Table 01 - Routes traffic from private subnet 1 through NAT Gateway 1
  PrivateRouteTable01:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01

  # Private Route Table 02 - Routes traffic from private subnet 2 through NAT Gateway 2
  PrivateRouteTable02:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ2
      - Key: Network
        Value: Private02

  # Private Route Table 03 - Routes traffic from private subnet 3 through NAT Gateway 3
  PrivateRouteTable03:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ3
      - Key: Network
        Value: Private03

  # Private Route 01 - Directs internet traffic from private subnet 1 to NAT Gateway 1
  PrivateRoute01:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  # Private Route 02 - Directs internet traffic from private subnet 2 to NAT Gateway 2
  PrivateRoute02:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  # Private Route 03 - Directs internet traffic from private subnet 3 to NAT Gateway 3
  PrivateRoute03:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway03
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable03
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway03

  #============================================================================
  # NAT GATEWAYS
  # Provide outbound internet access for private subnets
  #============================================================================

  # NAT Gateway 01 - Enables internet access for private subnet 1 (AZ1)
  NatGateway01:
    DependsOn:
    - NatGatewayEIP1
    - PublicSubnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
      - Key: Name
        Value: !Sub '${Application}-${Environment}-vpc-nat-gateway-1'

  # NAT Gateway 02 - Enables internet access for private subnet 2 (AZ2)
  NatGateway02:
    DependsOn:
    - NatGatewayEIP2
    - PublicSubnet02
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
      - Key: Name
        Value: !Sub '${Application}-${Environment}-vpc-nat-gateway-2'

  # NAT Gateway 03 - Enables internet access for private subnet 3 (AZ3)
  NatGateway03:
    DependsOn:
    - NatGatewayEIP3
    - PublicSubnet03
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP3.AllocationId'
      SubnetId: !Ref PublicSubnet03
      Tags:
      - Key: Name
        Value: !Sub '${Application}-${Environment}-vpc-nat-gateway-3'

  #============================================================================
  # ELASTIC IP ADDRESSES
  # Static IP addresses for NAT Gateways
  #============================================================================

  # Elastic IP 1 - Static IP address for NAT Gateway 1
  NatGatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-nat-eip-1"

  # Elastic IP 2 - Static IP address for NAT Gateway 2
  NatGatewayEIP2:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-nat-eip-2"

  # Elastic IP 3 - Static IP address for NAT Gateway 3
  NatGatewayEIP3:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-nat-eip-3"

  #============================================================================
  # PUBLIC SUBNETS
  # Internet-accessible subnets for load balancers, bastion hosts, etc.
  #============================================================================

  # Public Subnet 01 - First availability zone public subnet
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 01
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true  # Auto-assign public IPs to instances
      AvailabilityZone:
        Fn::Select:
        - "0"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock:
        Ref: PublicSubnet01Block
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-subnet-public-1"
      - Key: kubernetes.io/role/elb  # Tag for Kubernetes ELB discovery
        Value: 1

  # Public Subnet 02 - Second availability zone public subnet
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 02
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true  # Auto-assign public IPs to instances
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock:
        Ref: PublicSubnet02Block
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-subnet-public-2"
      - Key: kubernetes.io/role/elb  # Tag for Kubernetes ELB discovery
        Value: 1

  # Public Subnet 03 - Third availability zone public subnet
  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 03
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true  # Auto-assign public IPs to instances
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet03Block
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-subnet-public-3"

  #============================================================================
  # PRIVATE SUBNETS
  # Isolated subnets for application servers, databases, etc.
  #============================================================================

  # Private Subnet 01 - First availability zone private subnet
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 01
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock:
        Ref: PrivateSubnet01Block
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-subnet-private-1"
      - Key: kubernetes.io/role/internal-elb  # Tag for Kubernetes internal ELB discovery
        Value: 1

  # Private Subnet 02 - Second availability zone private subnet
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
        - "1"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock:
        Ref: PrivateSubnet02Block
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-subnet-private-2"
      - Key: kubernetes.io/role/internal-elb  # Tag for Kubernetes internal ELB discovery
        Value: 1

  # Private Subnet 03 - Third availability zone private subnet
  PrivateSubnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 03
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
        - "2"
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock:
        Ref: PrivateSubnet03Block  # Note: Original template had PrivateSubnet02Block - assuming this should be PrivateSubnet03Block
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-subnet-private-3"
      - Key: kubernetes.io/role/internal-elb  # Tag for Kubernetes internal ELB discovery
        Value: 1

  #============================================================================
  # SUBNET ROUTE TABLE ASSOCIATIONS
  # Links subnets to their respective route tables
  #============================================================================

  # Associate Public Subnet 01 with Public Route Table
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet 02 with Public Route Table
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet 03 with Public Route Table
  PublicSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref PublicRouteTable

  # Associate Private Subnet 01 with Private Route Table 01
  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  # Associate Private Subnet 02 with Private Route Table 02
  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  # Associate Private Subnet 03 with Private Route Table 03
  PrivateSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet03
      RouteTableId: !Ref PrivateRouteTable03

  #============================================================================
  # SSM PARAMETERS
  # Store resource IDs in Parameter Store for cross-stack references
  #============================================================================

  # Store VPC ID in SSM Parameter Store for other stacks to reference
  VpcIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Application}/${Environment}/vpc/id"
      Type: String
      Value: !Ref VPC

  # Store Private Subnet 01 ID in SSM Parameter Store
  PrivateSubnet01IdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Application}/${Environment}/vpc/subnet/private-subnet-1/id"
      Type: String
      Value: !Ref PrivateSubnet01

  # Store Private Subnet 02 ID in SSM Parameter Store
  PrivateSubnet02IdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Application}/${Environment}/vpc/subnet/private-subnet-2/id"
      Type: String
      Value: !Ref PrivateSubnet02

  # Store Private Subnet 03 ID in SSM Parameter Store
  PrivateSubnet03IdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Application}/${Environment}/vpc/subnet/private-subnet-3/id"
      Type: String
      Value: !Ref PrivateSubnet03

#==============================================================================
# OUTPUTS SECTION
# Return values that can be imported by other stacks or used for reference
#==============================================================================
Outputs:

  VpcId:
    Description: VPC ID
    Value: !Ref "VPC"

  VpcDefaultNetworkAcl:
    Description: The ID of the default network ACL for the VPC.
    Value: !GetAtt VPC.DefaultNetworkAcl

  VpcDefaultSecurityGroup:
    Description: The ID of the default security group for the VPC. 
    Value: !GetAtt VPC.DefaultSecurityGroup

  PublicSubnet01Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet01

  PublicSubnet02Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet02

  PublicSubnet03Id:
    Description: Public Subnet 3 ID
    Value: !Ref PublicSubnet03

  PrivateSubnet01Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet01

  PrivateSubnet02Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet02

  PrivateSubnet03Id:
    Description: Private Subnet 3 ID
    Value: !Ref PrivateSubnet03