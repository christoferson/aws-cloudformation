AWSTemplateFormatVersion: '2010-09-09'
Description: 'Dual-Stack (IPv4 + IPv6) VPC with Public Subnets only and spans 3 Availability Zones'

# Metadata section defines how parameters are grouped and displayed in the AWS Console
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - # Group application-related parameters together
        Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
      - # Group network-related parameters together
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PublicSubnet03Block

# Parameters allow customization of the template without modifying the template itself
Parameters:
  Application:
    Type: String
    Default: myapp
    Description: Application Name

  Environment:
    Type: String
    Default: dev
    Description: Environment

  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 10.0.128.0/24
    Description: CIDR block for public subnet 01 within the VPC (AZ-1)

  PublicSubnet02Block:
    Type: String
    Default: 10.0.129.0/24
    Description: CIDR block for public subnet 02 within the VPC (AZ-2)

  PublicSubnet03Block:
    Type: String
    Default: 10.0.130.0/24
    Description: CIDR block for public subnet 03 within the VPC (AZ-3)

Resources:
  #############################################################
  # VPC CONFIGURATION
  #############################################################

  # Main VPC resource - creates the virtual private cloud
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcBlock  # IPv4 CIDR block for the VPC
      EnableDnsSupport: true    # Enable DNS resolution within the VPC
      EnableDnsHostnames: true  # Enable DNS hostnames for instances
      InstanceTenancy: "default" # Use shared hardware (not dedicated)
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc"  # Dynamic naming based on parameters
      - Key: Network
        Value: "Dual-Stack"  # Indicates this VPC supports both IPv4 and IPv6

  # Add IPv6 CIDR block to the VPC
  # This follows AWS best practices for adding IPv6 support to a VPC
  VpcIpv6CidrBlock:
    Type: "AWS::EC2::VPCCidrBlock"
    Properties:
      VpcId: !Ref VPC
      # Request an Amazon-provided IPv6 CIDR block with a /56 prefix length
      # You cannot specify the range of IPv6 addresses or the size of the CIDR block
      AmazonProvidedIpv6CidrBlock: true

  #############################################################
  # INTERNET CONNECTIVITY
  #############################################################

  # Internet Gateway provides internet access for public subnets
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-igw"

  # Attach the Internet Gateway to the VPC
  # This is required for internet connectivity
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #############################################################
  # ROUTING CONFIGURATION
  #############################################################

  # Route table for public subnets
  # All public subnets will share this route table
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Description
        Value: Public Subnets Route Table
      - Key: Network
        Value: Public
      - Key: Name
        Value: !Sub "${Application}-${Environment}-rt-public"

  # IPv4 default route - sends all IPv4 traffic (0.0.0.0/0) to the Internet Gateway
  # This enables outbound internet access for IPv4 traffic
  PublicRouteIPv4:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment  # Ensure IGW is attached before creating route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0  # All IPv4 traffic
      GatewayId: !Ref InternetGateway

  # IPv6 default route - sends all IPv6 traffic (::/0) to the Internet Gateway
  # This is what makes the subnet "public" for IPv6 traffic
  PublicRouteIPv6:
    Type: "AWS::EC2::Route"
    DependsOn: [VPCGatewayAttachment, VpcIpv6CidrBlock]  # Wait for both IGW and IPv6 CIDR
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: ::/0  # All IPv6 traffic
      GatewayId: !Ref InternetGateway

  #############################################################
  # PUBLIC SUBNETS CONFIGURATION
  #############################################################

  # Public Subnet 1 (AZ-1)
  # This subnet spans the first availability zone
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    DependsOn: VpcIpv6CidrBlock  # Wait for IPv6 CIDR to be assigned to VPC
    Metadata:
      Comment: Public Subnet 01 (Dual-Stack) - AZ-1
    Properties:
      VpcId: !Ref VPC
      # Auto-assign public IPv4 addresses to instances launched in this subnet
      MapPublicIpOnLaunch: true
      # Auto-assign IPv6 addresses to instances launched in this subnet
      AssignIpv6AddressOnCreation: true
      # Allocate a /64 IPv6 CIDR block from the VPC's /56 block
      # The "0" in Fn::Select means we're taking the first /64 subnet
      Ipv6CidrBlock: 
        Fn::Select:
          - 0  # First /64 subnet (index 0)
          - Fn::Cidr:
              - Fn::Select:
                  - 0  # First (and only) IPv6 CIDR block of the VPC
                  - Fn::GetAtt: VPC.Ipv6CidrBlocks
              - 256  # Number of subnets to create (we only use first 3)
              - 64   # Subnet size (/64 is standard for IPv6 subnets)
      # Select the first availability zone in the region
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Ref PublicSubnet01Block  # IPv4 CIDR from parameter
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-subnet-public-1"
      - Key: Network
        Value: "Public"
      - Key: Type
        Value: "Dual-Stack"

  # Public Subnet 2 (AZ-2)
  # This subnet spans the second availability zone
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    DependsOn: VpcIpv6CidrBlock
    Metadata:
      Comment: Public Subnet 02 (Dual-Stack) - AZ-2
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      # Using index 1 for the second /64 subnet
      Ipv6CidrBlock: 
        Fn::Select:
          - 1  # Second /64 subnet (index 1)
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt: VPC.Ipv6CidrBlocks
              - 256
              - 64
      # Select the second availability zone in the region
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Ref PublicSubnet02Block
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-subnet-public-2"
      - Key: Network
        Value: "Public"
      - Key: Type
        Value: "Dual-Stack"

  # Public Subnet 3 (AZ-3)
  # This subnet spans the third availability zone
  PublicSubnet03:
    Type: AWS::EC2::Subnet
    DependsOn: VpcIpv6CidrBlock
    Metadata:
      Comment: Public Subnet 03 (Dual-Stack) - AZ-3
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      # Using index 2 for the third /64 subnet
      Ipv6CidrBlock: 
        Fn::Select:
          - 2  # Third /64 subnet (index 2)
          - Fn::Cidr:
              - Fn::Select:
                  - 0
                  - Fn::GetAtt: VPC.Ipv6CidrBlocks
              - 256
              - 64
      # Select the third availability zone in the region
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Ref PublicSubnet03Block
      Tags:
      - Key: Name
        Value: !Sub "${Application}-${Environment}-vpc-subnet-public-3"
      - Key: Network
        Value: "Public"
      - Key: Type
        Value: "Dual-Stack"

  #############################################################
  # ROUTE TABLE ASSOCIATIONS
  #############################################################

  # Associate Public Subnet 1 with the public route table
  # This enables internet routing for this subnet
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet 2 with the public route table
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet 3 with the public route table
  PublicSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref PublicRouteTable

# Outputs provide information about created resources
# These can be referenced by other CloudFormation stacks or used for documentation
Outputs:
  # VPC Information
  VpcId:
    Description: VPC ID
    Value: !Ref "VPC"

  VpcIpv4Cidr:
    Description: IPv4 CIDR Block assigned to the VPC
    Value: !GetAtt VPC.CidrBlock

  VpcIpv6Cidr:
    Description: IPv6 CIDR Block assigned to the VPC
    Value: !Select [0, !GetAtt VPC.Ipv6CidrBlocks]  # Get the first (and only) IPv6 CIDR

  VpcDefaultNetworkAcl:
    Description: The ID of the default network ACL for the VPC
    Value: !GetAtt VPC.DefaultNetworkAcl

  VpcDefaultSecurityGroup:
    Description: The ID of the default security group for the VPC
    Value: !GetAtt VPC.DefaultSecurityGroup

  # Public Subnet IDs - useful for launching resources
  PublicSubnet01Id:
    Description: Public Subnet 1 ID (AZ-1)
    Value: !Ref PublicSubnet01

  PublicSubnet02Id:
    Description: Public Subnet 2 ID (AZ-2)
    Value: !Ref PublicSubnet02

  PublicSubnet03Id:
    Description: Public Subnet 3 ID (AZ-3)
    Value: !Ref PublicSubnet03

  # IPv4 CIDR Outputs - useful for security group rules
  PublicSubnet01Ipv4Cidr:
    Description: IPv4 CIDR of Public Subnet 1
    Value: !GetAtt PublicSubnet01.CidrBlock

  PublicSubnet02Ipv4Cidr:
    Description: IPv4 CIDR of Public Subnet 2
    Value: !GetAtt PublicSubnet02.CidrBlock

  PublicSubnet03Ipv4Cidr:
    Description: IPv4 CIDR of Public Subnet 3
    Value: !GetAtt PublicSubnet03.CidrBlock

  # IPv6 CIDR Outputs - useful for IPv6-specific configurations
  PublicSubnet01Ipv6Cidr:
    Description: IPv6 CIDR of Public Subnet 1
    Value: !GetAtt PublicSubnet01.Ipv6CidrBlock

  PublicSubnet02Ipv6Cidr:
    Description: IPv6 CIDR of Public Subnet 2
    Value: !GetAtt PublicSubnet02.Ipv6CidrBlock

  PublicSubnet03Ipv6Cidr:
    Description: IPv6 CIDR of Public Subnet 3
    Value: !GetAtt PublicSubnet03.Ipv6CidrBlock

  Ipv6CidrBlockAssociation:
    Description: The association ID for the IPv6 CIDR block
    Value: !Ref VpcIpv6CidrBlock

  # Convenience Outputs - comma-separated lists for easy consumption
  PublicSubnets:
    Description: List of Public Subnet IDs
    Value: !Join 
      - ","
      - - !Ref PublicSubnet01
        - !Ref PublicSubnet02
        - !Ref PublicSubnet03

  AvailabilityZones:
    Description: List of Availability Zones used
    Value: !Join 
      - ","
      - - !GetAtt PublicSubnet01.AvailabilityZone
        - !GetAtt PublicSubnet02.AvailabilityZone
        - !GetAtt PublicSubnet03.AvailabilityZone

  PublicSubnetCidrs:
    Description: List of Public Subnet IPv4 CIDRs
    Value: !Join 
      - ","
      - - !GetAtt PublicSubnet01.CidrBlock
        - !GetAtt PublicSubnet02.CidrBlock
        - !GetAtt PublicSubnet03.CidrBlock