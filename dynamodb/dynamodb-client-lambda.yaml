AWSTemplateFormatVersion: "2010-09-09"
Description: "Dynamo Database Lambda Client"

Resources:

  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "dynamodb-client-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: dynamodb
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Character'
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Character/index/*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName : "dynamodb-client-lambda-register"
      Description: "Basic Lambda"
      Runtime: nodejs12.x
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hi from the ' + event.routeKey + ' route!'),
              };
              return response;
          };


Outputs:

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn
  FunctionExecutionRoleArn:
    Value: !GetAtt FunctionExecutionRole.Arn
