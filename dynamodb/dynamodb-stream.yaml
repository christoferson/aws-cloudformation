AWSTemplateFormatVersion: "2010-09-09"
Description: "DynamoDB - Streams Enabled -> Lambda"

Resources:

  DynamoTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "Character5"
      AttributeDefinitions: 
        - 
          AttributeName: "Region"
          AttributeType: "S"
        - 
          AttributeName: "CharacterName"
          AttributeType: "S"
        - 
          AttributeName: "Race"
          AttributeType: "S"
        - 
          AttributeName: "Profession"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "Region"
          KeyType: "HASH"
        - 
          AttributeName: "CharacterName"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      LocalSecondaryIndexes: 
        - 
          IndexName: "region-race"
          KeySchema: 
            - 
              AttributeName: "Region"
              KeyType: "HASH"
            - 
              AttributeName: "Race"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "CharacterName"
              - "Profession"
            ProjectionType: "INCLUDE"
        - 
          IndexName: "region-profession"
          KeySchema: 
            - 
              AttributeName: "Region"
              KeyType: "HASH"
            - 
              AttributeName: "Profession"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "CharacterName"
              - "Race"
            ProjectionType: "INCLUDE"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: "lambda-trigger-dynamodb-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "lambda-trigger-dynamodb-lambda"
      Description: "Lambda Triggered by DynamoDB"
      Runtime: nodejs16.x
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Code:
        ZipFile: |
          exports.handler = async (event, context, callback) => {

              event.Records.forEach((record) => {
                console.log('Stream record: ', JSON.stringify(record, null, 2));
                //console.log('Type', record.eventName);
                //console.log('DynamoDB Record: %j', record.dynamodb);

                if (record.eventName == 'INSERT') {
                    const item = record.dynamodb.NewImage;
                    console.log('Inserted: %j', item);
                } else if(record.eventName == 'MODIFY') {
                    //const oldItem = record.dynamodb.OldImage;
                    const item = record.dynamodb.NewImage;
                    console.log('Updated: %j', item);
                } else if(record.eventName == 'REMOVE') {
                    const item = record.dynamodb.OldImage;
                    console.log('Deleted: %j', item);
                } else {
                    console.log('NotSupported Type', record.eventName);
                }

              });

              callback(null, `Successfully processed ${event.Records.length} records.`);
          };

  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt DynamoTable.StreamArn
      FunctionName: !GetAtt LambdaFunction.Arn
      Enabled: true
      BatchSize: 10
      #MaximumBatchingWindowInSeconds: 1
      #FilterCriteria: { "Filters": [ { "Pattern": "{ \"Metadata1\": [ rule1 ], \"data\": { \"Data1\": [ rule2 ] }}" } ] }
      #FilterCriteria: { "Filters": [ { "Pattern": "{ \"body\": { \"foo\": [ \"bar\" ] }}" } ] }
      StartingPosition: LATEST

Outputs:

  DynamoTableArn:
    Description: Dynamo Database Arn
    Value: !GetAtt DynamoTable.Arn

  DynamoTableStreamArn:
    Value: !GetAtt DynamoTable.StreamArn

