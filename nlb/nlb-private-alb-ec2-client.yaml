AWSTemplateFormatVersion: "2010-09-09"
Description: NLB - Private Subnet - ALB - EC2

Metadata:

  StackVersion: 1

  AWS::CloudFormation::Interface:

    ParameterGroups:
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - Prefix
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
      -
        Label:
          default: "Endpoint Service Configuration"
        Parameters:
          - VpcEndpointServiceName
      -
        Label:
          default: "Endpoint Client Configuration"
        Parameters:
          - VpcEndpointClientPrivateSubnetList
      -
        Label:
          default: "Instance Configuration"
        Parameters:
          - InstanceVpcPrivateSubnet
          - InstanceImageId
          - InstanceType
          
Parameters:

  Prefix:
    Type: String
    Default: "vpc-e-client"

  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
    
  VpcEndpointClientPrivateSubnetList:
    Description: Private VpcSubnets for Vpc Endpoint Client
    Type: List<AWS::EC2::Subnet::Id>

  VpcEndpointServiceName:
    Type: String
    Description: "Vpc Endpoint Service Name"
    Default: "com.amazonaws.vpce.eu-west-1.vpce-svc-0aa7b65fa5c4ff03f"

  InstanceVpcPrivateSubnet:
    Description: EC2 subnet
    Type: AWS::EC2::Subnet::Id

  InstanceImageId:
    Description: EC2 AMI ID
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  InstanceType:
    Description: EC2 InstanceType
    Type: String
    Default: t2.micro

Resources:


#### Instance in Private Subnet (To Test The Endpoint)

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Ref "AWS::NoValue"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies: !Ref "AWS::NoValue"

  InstanceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${Prefix}-instance-role-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Resource:
          - arn:aws:logs:*:*:*
      Roles:
      - !Ref "InstanceRole"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: InstanceRole
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VpcId"
      GroupDescription: "Allow SSH from Anywhere"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: "0.0.0.0/0"

  InstanceServer:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref InstanceImageId
      InstanceType: !Ref InstanceType
      #KeyName: !Ref InstanceInstanceKeyName
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeType: "gp2"
            VolumeSize: "8"
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref InstanceVpcPrivateSubnet
      Tags:
        - Key: Name
          Value: "nlb-private-alb-ec2-client"
        - Key: Environment
          Value: "dev"

  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VpcId"
      GroupDescription: "Allow HTTP from Anywhere"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"
      #- IpProtocol: tcp
      #  FromPort: 80
      #  ToPort: 80
      #  SourceSecurityGroupId: !ImportValue EC2SecurityGroup-VpcA
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-nlb-vpc-endpoint-sg
          
  VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: false
      ServiceName: !Ref VpcEndpointServiceName
      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcEndpointClientPrivateSubnetList
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup

Outputs:

  VpcEndpointCreationTimestamp:
    Value: !GetAtt VpcEndpoint.CreationTimestamp

  VpcEndpointDnsEntries:
    Value: !Select ['1', !Split [':', !Select ['0', !GetAtt VpcEndpoint.DnsEntries]]]

  VpcEndpointId:
    Value: !GetAtt VpcEndpoint.Id
