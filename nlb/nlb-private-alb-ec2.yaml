AWSTemplateFormatVersion: "2010-09-09"
Description: NLB - Private Subnet - ALB - EC2

Metadata:

  StackVersion: 1

  AWS::CloudFormation::Interface:

    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - VpcPrivateSubnetListLoadBalancer

      -
        Label:
          default: "Instance Configuration"
        Parameters:
          - InstanceImageId
          - InstanceType

Parameters:

  Prefix:
    Type: String
    Default: "vpc-b"

  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id

  VpcPrivateSubnetListLoadBalancer:
    Description: Private VpcSubnets for Load Balancer
    Type: List<AWS::EC2::Subnet::Id>

  InstanceImageId:
    Description: EC2 AMI ID
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  InstanceType:
    Description: EC2 InstanceType
    Type: String
    Default: t2.micro

Resources:


  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VpcId"
      GroupDescription: "Allow HTTP from Anywhere"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"

#### Instance in Private Subnet

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /
      Policies: !Ref "AWS::NoValue"
      RoleName: !Ref "AWS::NoValue"

  InstanceRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstanceRolePolicies
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - s3:List*
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Resource:
          - arn:aws:logs:*:*:*
      Roles:
      - !Ref "InstanceRole"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: InstanceRole
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole


  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref "VpcId"
      GroupDescription: "Allow HTTP from Anywhere"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"


  LoadBalancerTargetGroup: 
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties: 
      VpcId: !Ref VpcId
      #Name: !Sub "${PJPrefix}-${InternetALBName}-tg"
      Protocol: HTTP # GENEVE | HTTP | HTTPS | TCP | TCP_UDP | TLS | UDP
      #ProtocolVersion: HTTP2 # GRPC, HTTP1, and HTTP2
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      Matcher: 
        HttpCode: 200

  InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref "InstanceImageId"
        InstanceType: !Ref "InstanceType"
        IamInstanceProfile:
          Arn: !GetAtt "InstanceProfile.Arn"
        #KeyName: !Ref "Ec2InstanceKeyName"
        SecurityGroupIds:
        - !Ref "InstanceSecurityGroup"
        #- !Ref "Ec2SecurityGroupSSH"
        InstanceInitiatedShutdownBehavior: terminate
        CreditSpecification: 
          CpuCredits: Unlimited
        #InstanceMarketOptions:
        #  SpotOptions:
        #    SpotInstanceType: one-time # one-time | persistent If you are using Spot Instances with an Auto Scaling group, use one-time requests
        #    InstanceInterruptionBehavior: terminate #hibernate | stop | terminate
        #  MarketType: spot
        Monitoring: #Detailed CloudWatch monitoring
          Enabled: false
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
            DeleteOnTermination: true
        UserData:
          Fn::Base64: |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hi from $(hostname -f)</h1>" > /var/www/html/index.html
        TagSpecifications: #The specified tags are applied to all instances or volumes that are created during launch.
        - ResourceType: instance
          Tags:
          - Key: Env
            Value: "dev"
        - ResourceType: volume
          Tags:
          - Key: Env
            Value: "dev"
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: !Ref "AWS::StackName"

  InstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      #AutoScalingGroupName: ApplicationAsg
      VPCZoneIdentifier: !Ref VpcPrivateSubnetListLoadBalancer
      LaunchTemplate:
        LaunchTemplateId: !Ref "InstanceLaunchTemplate"
        Version: !GetAtt "InstanceLaunchTemplate.LatestVersionNumber"
      MinSize: "1"
      MaxSize: "1"
      DesiredCapacity: "1"
      HealthCheckType: ELB #EC2 (default) and ELB
      HealthCheckGracePeriod: 60 #  amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      Tags:
        - Key: Environment
          Value: Production
          PropagateAtLaunch: "false"
        - Key: Purpose
          Value: WebServerGroup
          PropagateAtLaunch: "true"

####

        
  LoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      #Name: !Sub "${Prefix}-alb"
      Type: application
      Scheme: "internal"
      #IpAddressType: ipv4
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref VpcPrivateSubnetListLoadBalancer
      Tags: 
        - Key: Name
          Value: !Sub "${Prefix}-alb"

  LoadBalancerListener: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref LoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP


Outputs:

  LoadBalancerDomainName:
    Value: !GetAtt LoadBalancer.DNSName
