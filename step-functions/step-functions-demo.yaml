AWSTemplateFormatVersion: "2010-09-09"
Description: Example template for a Step Functions state machine.

Resources:

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
              callback(null, "Hello World!");
          };
      Runtime: "nodejs12.x"
      Timeout: "25"

  StateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  StateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      #StateMachineName: StateMachine
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "An example of the Amazon States Language using a choice state.",
              "StartAt": "FirstState",
              "States": {
                "FirstState": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:us-east-1:123456789012:function:FUNCTION_NAME",
                  "Next": "ChoiceState"
                },
                "ChoiceState": {
                  "Type" : "Choice",
                  "Choices": [
                    {
                      "Variable": "$.foo",
                      "NumericEquals": 1,
                      "Next": "FirstMatchState"
                    },
                    {
                      "Variable": "$.foo",
                      "NumericEquals": 2,
                      "Next": "SecondMatchState"
                    }
                  ],
                  "Default": "DefaultState"
                },
                "FirstMatchState": {
                  "Type" : "Task",
                  "Resource": "arn:aws:lambda:us-east-1:123456789012:function:OnFirstMatch",
                  "Next": "NextState"
                },
                "SecondMatchState": {
                  "Type" : "Task",
                  "Resource": "arn:aws:lambda:us-east-1:123456789012:function:OnSecondMatch",
                  "Next": "NextState"
                },
                "DefaultState": {
                  "Type": "Fail",
                  "Error": "DefaultStateError",
                  "Cause": "No Matches!"
                },
                "NextState": {
                  "Type": "Task",
                  "Resource": "${lambdaArn}",
                  "End": true
                }
              }
            }
          - {lambdaArn: !GetAtt [ LambdaFunction, Arn ]}
      
      Tags:
        -
          Key: "Environment"
          Value: "dev"
        -
          Key: "Application"
          Value: "app"

