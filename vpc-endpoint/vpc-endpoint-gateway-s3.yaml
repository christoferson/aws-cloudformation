AWSTemplateFormatVersion: "2010-09-09"
Description: |
  VPC Endpoint (Gateway Endpoint) for Amazon S3 - Educational Template

  This template demonstrates how to create a VPC Gateway Endpoint for Amazon S3.

  WHAT IS AN S3 VPC ENDPOINT?
  An S3 VPC endpoint enables you to privately connect your VPC to Amazon S3
  without routing traffic over the internet. This provides several benefits:
  - Enhanced security (traffic stays within AWS network)
  - Improved performance (lower latency, higher throughput)
  - Cost savings (no NAT Gateway charges for S3 traffic)
  - Compliance (meets private connectivity requirements)

  S3 ENDPOINT TYPES COMPARISON:

  Gateway Endpoint (This Template):
  ✅ Free of charge
  ✅ High performance
  ✅ Automatic route table integration
  ✅ Supports all S3 operations
  ❌ VPC-only access (no on-premises)
  ❌ Same-region only

  Interface Endpoint (Alternative):
  ✅ Works with on-premises via VPN/Direct Connect
  ✅ Cross-region support
  ✅ DNS-based access
  ❌ Hourly charges apply
  ❌ More complex setup

  ARCHITECTURE FLOW:
  [EC2 Instance] → [Route Table] → [S3 Gateway Endpoint] → [S3 Service]
                                      ↓
                              [AWS Private Network]
                              (No Internet Gateway)

  SECURITY MODEL:
  1. VPC Endpoint Policy (this template) - Controls what can be done through endpoint
  2. S3 Bucket Policy - Controls access to specific buckets/objects
  3. IAM Policies - Controls what users/roles can do
  4. S3 Access Control Lists (ACLs) - Object-level permissions

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - RouteTableIdList
    ParameterLabels:
      Application:
        default: "Application Name"
      Environment:
        default: "Environment (dev/staging/prod)"
      VpcId:
        default: "Target VPC for S3 Endpoint"
      RouteTableIdList:
        default: "Route Tables to Associate with Endpoint"

Parameters:
  Application:
    Type: String
    Default: lab
    Description: |
      Application name for resource identification and cost tracking.

      NAMING CONVENTION:
      - Use lowercase letters, numbers, and hyphens only
      - Start with a letter
      - Keep it short but descriptive

      EXAMPLES: web-app, data-pipeline, ml-training
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: Must start with a letter and contain only alphanumeric characters and hyphens
    MinLength: 2
    MaxLength: 32

  Environment:
    Type: String
    Default: dev
    Description: |
      Environment designation for resource organization and policy application.

      ENVIRONMENT STRATEGY:
      - dev: Development and testing
      - staging: Pre-production validation  
      - prod: Production workloads
      - test: Automated testing environments

      This affects resource naming and can be used for conditional policies.
    AllowedValues:
      - dev
      - staging
      - prod
      - test
    ConstraintDescription: Must be one of dev, staging, prod, or test

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: |
      The VPC where the S3 Gateway Endpoint will be created.

      IMPORTANT CONSIDERATIONS:
      - Endpoint only accessible from within this VPC
      - Cannot be shared across VPCs (use Interface Endpoint for that)
      - Must be in the same region as your S3 buckets for optimal performance

      SELECTION CRITERIA:
      - Choose the VPC where your EC2 instances need S3 access
      - Ensure the VPC has proper DNS resolution enabled
      - Consider network topology and routing requirements

      HOW TO FIND VPC ID:
      1. Go to VPC Console → Your VPCs
      2. Look for the VPC name/tag you want to use
      3. Copy the VPC ID (format: vpc-xxxxxxxxxxxxxxxxx)

  RouteTableIdList:
    Type: CommaDelimitedList
    Description: |
      Comma-separated list of Route Table IDs to associate with the S3 endpoint.

      ROUTE TABLE SELECTION STRATEGY:

      ✅ INCLUDE:
      - Private subnet route tables (most common)
      - Route tables for subnets with EC2 instances accessing S3
      - Database subnet route tables (for backups to S3)

      ❌ AVOID (unless specifically needed):
      - Public subnet route tables (instances already have internet access)
      - Route tables for subnets that don't need S3 access

      WHAT HAPPENS WHEN ASSOCIATED:
      AWS automatically adds routes for S3 IP prefixes (prefix lists) to these
      route tables, directing S3 traffic through the VPC endpoint.

      EXAMPLE FORMAT: rtb-1234567890abcdef0,rtb-0987654321fedcba0

      HOW TO FIND ROUTE TABLE IDs:
      1. VPC Console → Route Tables
      2. Filter by your VPC ID
      3. Look at "Subnet Associations" to identify private subnet route tables
      4. Copy Route Table IDs (format: rtb-xxxxxxxxxxxxxxxxx)

      VERIFICATION:
      After deployment, check these route tables for new routes with:
      - Destination: pl-xxxxxxxx (S3 prefix list)
      - Target: vpce-xxxxxxxx (your endpoint ID)
    Default: "rtb-xxxxx,rtb-yyyyy"

Resources:
  #############################################################
  # S3 VPC GATEWAY ENDPOINT
  #############################################################

  VpcEndpointS3:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      # ENDPOINT TYPE DEEP DIVE:
      # Gateway: Uses route table entries, free, high performance
      # Interface: Uses ENI with private IP, charges apply, more flexible
      # GatewayLoadBalancer: For network appliances (not applicable to S3)
      VpcEndpointType: Gateway

      # S3 SERVICE NAME:
      # Format: com.amazonaws.{region}.s3
      # This automatically resolves to S3 service in your current region
      # Note: S3 is a global service but endpoints are regional
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"

      # Target VPC for the endpoint
      VpcId: !Ref VpcId

      # VPC ENDPOINT POLICY EXPLANATION:
      # This policy acts as a "firewall" for the endpoint, controlling:
      # - Which AWS principals can use the endpoint
      # - What S3 actions are allowed through the endpoint  
      # - Which S3 resources can be accessed
      #
      # POLICY LAYERS (all must allow for access):
      # 1. VPC Endpoint Policy (this policy) ← Controls endpoint usage
      # 2. IAM User/Role Policy ← Controls what the user can do
      # 3. S3 Bucket Policy ← Controls bucket access
      # 4. S3 Object ACLs ← Controls object access
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowS3Access
            Effect: Allow
            # PRINCIPAL EXPLANATION:
            # "*" = Any authenticated AWS principal (user, role, service)
            # This doesn't grant permissions - it just allows the endpoint to be used
            # Actual permissions still controlled by IAM and S3 policies
            Principal: "*"

            # ACTIONS - PRODUCTION CONSIDERATIONS:
            # Current: "*" (all actions) - good for development/testing
            # Production: Consider restricting to specific actions like:
            Action:
              - "*"
            # PRODUCTION EXAMPLE - Uncomment and modify as needed:
            # Action:
            #   - "s3:GetObject"           # Download objects
            #   - "s3:PutObject"           # Upload objects  
            #   - "s3:DeleteObject"        # Delete objects
            #   - "s3:ListBucket"          # List bucket contents
            #   - "s3:GetBucketLocation"   # Get bucket region
            #   - "s3:ListAllMyBuckets"    # List all buckets (for AWS CLI)

            # RESOURCES - S3 ARN PATTERNS:
            Resource:
              # Bucket-level operations (ListBucket, GetBucketLocation, etc.)
              - "arn:aws:s3:::*"
              # Object-level operations (GetObject, PutObject, DeleteObject, etc.)  
              - "arn:aws:s3:::*/*"

            # PRODUCTION EXAMPLE - Restrict to specific buckets:
            # Resource:
            #   - "arn:aws:s3:::my-app-data-bucket"
            #   - "arn:aws:s3:::my-app-data-bucket/*"
            #   - "arn:aws:s3:::my-app-logs-bucket"  
            #   - "arn:aws:s3:::my-app-logs-bucket/*"

            # OPTIONAL CONDITIONS for additional security:
            # Condition:
            #   # Restrict to specific source IPs
            #   IpAddress:
            #     "aws:SourceIp": ["10.0.0.0/16"]
            #   # Require SSL/TLS
            #   Bool:
            #     "aws:SecureTransport": "true"
            #   # Restrict by time of day
            #   DateGreaterThan:
            #     "aws:CurrentTime": "2024-01-01T00:00:00Z"
            #   # Restrict by user tags
            #   StringEquals:
            #     "aws:PrincipalTag/Department": "Engineering"

      # ROUTE TABLE ASSOCIATIONS:
      # These route tables will automatically get S3 prefix list routes added
      RouteTableIds: !Ref RouteTableIdList

      # NOTE: SecurityGroupIds is NOT applicable for Gateway Endpoints
      # Security Groups only apply to Interface Endpoints (ENI-based)
      # Gateway Endpoints use route table routing instead

      # Resource tagging for organization and cost tracking
      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-s3-gateway-endpoint"
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: S3
        - Key: EndpointType
          Value: Gateway
        - Key: CostCenter
          Value: !Sub "${Application}-${Environment}"
        - Key: Purpose
          Value: "Private S3 connectivity without internet routing"
        - Key: CreatedBy
          Value: CloudFormation

Outputs:
  #############################################################
  # COMPREHENSIVE OUTPUTS FOR INTEGRATION AND MONITORING
  #############################################################

  VpcEndpointId:
    Description: |
      The VPC Endpoint ID for the S3 Gateway Endpoint.

      USAGE:
      - Reference in other CloudFormation templates
      - Monitoring and alerting configurations
      - Troubleshooting network connectivity
      - AWS CLI/SDK endpoint configuration

      FORMAT: vpce-xxxxxxxxxxxxxxxxx
    Value: !Ref VpcEndpointS3
    Export:
      Name: !Sub "${Application}-${Environment}-s3-endpoint-id"

  VpcEndpointServiceName:
    Description: |
      The AWS service name for this endpoint.
      Shows which service this endpoint provides access to.
    Value: !Sub "com.amazonaws.${AWS::Region}.s3"
    Export:
      Name: !Sub "${Application}-${Environment}-s3-endpoint-service"

  VpcEndpointType:
    Description: |
      The type of VPC endpoint created.
      Gateway endpoints are free and provide high-performance S3 access.
    Value: Gateway

  VpcEndpointRegion:
    Description: |
      The AWS region where this endpoint was created.
      S3 requests through this endpoint will be routed to S3 in this region.
    Value: !Ref "AWS::Region"

  AssociatedVpcId:
    Description: |
      The VPC ID where this endpoint is deployed.
      Only resources in this VPC can use this endpoint.
    Value: !Ref VpcId

  RouteTableAssociations:
    Description: |
      Information about route table associations.
      These route tables now have automatic S3 routes via the endpoint.
    Value: !Sub |
      Associated Route Tables: ${RouteTableIdList}

      VERIFICATION STEPS:
      1. Go to VPC Console → Route Tables
      2. Select each route table ID listed above
      3. Look for routes with destination starting with 'pl-' (prefix list)
      4. Target should be ${VpcEndpointS3}

  PolicySummary:
    Description: |
      Summary of the endpoint policy configuration.
      This policy allows all S3 actions for all buckets through the endpoint.
    Value: |
      Current Policy: Allows all S3 actions (*) for all buckets and objects

      SECURITY RECOMMENDATION:
      For production environments, consider restricting the policy to:
      - Specific S3 actions your application needs
      - Specific S3 buckets your application accesses
      - Additional conditions like SSL-only access

  UsageInstructions:
    Description: |
      Step-by-step instructions for using this S3 VPC endpoint.
    Value: !Sub |
      S3 VPC ENDPOINT USAGE GUIDE:

      1. VERIFY ENDPOINT DEPLOYMENT:
         - Endpoint ID: ${VpcEndpointS3}
         - Check route tables for S3 prefix list routes
         - Destination: pl-xxxxxxxx → Target: ${VpcEndpointS3}

      2. TEST S3 ACCESS (from EC2 in associated subnets):
         # List buckets
         aws s3 ls --region ${AWS::Region}

         # Test bucket access
         aws s3 ls s3://your-bucket-name --region ${AWS::Region}

         # Upload test file
         echo "test" | aws s3 cp - s3://your-bucket-name/test.txt --region ${AWS::Region}

      3. VERIFY TRAFFIC ROUTING:
         - Enable VPC Flow Logs on your subnets
         - Look for S3 traffic in flow logs
         - Confirm traffic doesn't go through NAT Gateway/Internet Gateway

      4. MONITORING AND TROUBLESHOOTING:
         - CloudWatch: Monitor VPC endpoint metrics
         - VPC Flow Logs: Track S3 traffic patterns
         - CloudTrail: Monitor S3 API calls through endpoint
         - Route Tables: Verify S3 prefix list routes exist

      5. COMMON ISSUES:
         - DNS Resolution: Ensure VPC has DNS resolution enabled
         - IAM Permissions: Verify EC2 instance role has S3 permissions
         - Endpoint Policy: Check if policy restricts required actions
         - Route Tables: Confirm correct route tables are associated

  SecurityConsiderations:
    Description: |
      Important security considerations for this S3 endpoint.
    Value: |
      SECURITY CHECKLIST:

      ✅ CURRENT CONFIGURATION:
      - Gateway endpoint (no additional attack surface)
      - Private routing (traffic stays in AWS network)
      - Policy allows all S3 actions (consider restricting for production)

      🔒 PRODUCTION HARDENING RECOMMENDATIONS:

      1. ENDPOINT POLICY:
         - Restrict to specific S3 actions needed
         - Limit to specific S3 buckets/prefixes
         - Add condition for SSL-only access
         - Consider IP address restrictions

      2. S3 BUCKET POLICIES:
         - Add condition: "aws:SourceVpce": "${VpcEndpointS3}"
         - This ensures bucket access only through this endpoint
         - Prevents accidental internet access

      3. IAM POLICIES:
         - Follow principle of least privilege
         - Grant only necessary S3 permissions to EC2 roles
         - Use resource-specific ARNs when possible

      4. MONITORING:
         - Enable CloudTrail for S3 API logging
         - Set up CloudWatch alarms for unusual access patterns
         - Monitor VPC Flow Logs for traffic analysis

      5. NETWORK SECURITY:
         - Ensure security groups allow HTTPS (port 443) outbound
         - Consider NACLs for additional network-level control
         - Regular security group audits

  CostOptimization:
    Description: |
      Cost optimization information for this S3 endpoint.
    Value: |
      COST ANALYSIS:

      💰 SAVINGS WITH GATEWAY ENDPOINT:
      - Gateway Endpoint: $0.00/hour (FREE!)
      - Eliminates NAT Gateway data processing charges for S3 traffic
      - Reduces cross-AZ data transfer costs
      - No per-GB charges for S3 access through endpoint

      📊 COST COMPARISON (example for 1TB/month S3 traffic):
      - With NAT Gateway: ~$45/month (NAT Gateway + data processing)
      - With Gateway Endpoint: $0/month for endpoint usage
      - Potential monthly savings: $45+ per TB of S3 traffic

      🎯 OPTIMIZATION TIPS:
      - Use this endpoint for all S3 access from private subnets
      - Consider S3 Transfer Acceleration for cross-region transfers
      - Implement S3 Intelligent Tiering for storage cost optimization
      - Monitor S3 request patterns and optimize application logic

  TroubleshootingGuide:
    Description: |
      Common troubleshooting steps for S3 endpoint issues.
    Value: !Sub |
      TROUBLESHOOTING GUIDE:

      🔍 CONNECTIVITY ISSUES:

      Problem: "Unable to connect to S3"
      Solutions:
      1. Check route tables have S3 prefix list routes
      2. Verify VPC DNS resolution is enabled
      3. Confirm security groups allow HTTPS (443) outbound
      4. Test from correct subnet (associated with endpoint route tables)

      Problem: "Access Denied" errors
      Solutions:
      1. Check IAM permissions on EC2 instance role
      2. Review S3 bucket policy restrictions
      3. Verify endpoint policy allows required actions
      4. Confirm bucket exists in same region (${AWS::Region})

      Problem: "Traffic still going through NAT Gateway"
      Solutions:
      1. Verify route table associations are correct
      2. Check route precedence (more specific routes win)
      3. Confirm S3 requests use correct region
      4. Review VPC Flow Logs for traffic patterns

      🛠️ DIAGNOSTIC COMMANDS:

      # Check route tables
      aws ec2 describe-route-tables --route-table-ids ${RouteTableIdList}

      # Verify endpoint status  
      aws ec2 describe-vpc-endpoints --vpc-endpoint-ids ${VpcEndpointS3}

      # Test S3 connectivity
      aws s3 ls --region ${AWS::Region} --debug

      # Check instance metadata (from EC2)
      curl http://169.254.169.254/latest/meta-data/iam/security-credentials/

      📞 SUPPORT RESOURCES:
      - AWS Support Center
      - VPC Endpoint documentation
      - S3 connectivity troubleshooting guide
      - AWS re:Post community forums

# ADDITIONAL LEARNING RESOURCES AND REFERENCES:
#
# 📚 RELATED AWS DOCUMENTATION:
# - VPC Endpoints: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html
# - S3 VPC Endpoints: https://docs.aws.amazon.com/s3/latest/userguide/privatelink-interface-endpoints.html
# - Endpoint Policies: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html
#
# 🔗 INTEGRATION PATTERNS:
# - Use with Lambda functions in VPC for S3 access
# - Database backup solutions (RDS snapshots to S3)
# - Application logging and monitoring data to S3
# - Data lake architectures with private S3 access
#
# 📊 MONITORING QUERIES:
# 
# CloudWatch Logs Insights - VPC Flow Logs:
# fields @timestamp, srcaddr, dstaddr, srcport, dstport, protocol, action
# | filter dstport = 443 and action = "ACCEPT"
# | stats count() by dstaddr
# | sort count desc
#
# CloudTrail - S3 API calls through endpoint:
# {
#   "eventSource": "s3.amazonaws.com",
#   "vpcEndpointId": "vpce-*"
# }
#
# 🏗️ ARCHITECTURE PATTERNS:
#
# 1. Multi-Tier Application:
#    [ALB] → [Public Subnet] → [App Tier] → [Private Subnet] → [S3 via Endpoint]
#
# 2. Data Processing Pipeline:
#    [Lambda] → [VPC] → [S3 Endpoint] → [Data Lake]
#
# 3. Backup Solution:
#    [RDS] → [Private Subnet] → [S3 Endpoint] → [Backup Bucket]
#
# 🔐 SECURITY BEST PRACTICES:
#
# 1. Defense in Depth:
#    - VPC Endpoint Policy (network level)
#    - IAM Policies (identity level)  
#    - S3 Bucket Policies (resource level)
#    - S3 Object ACLs (object level)
#
# 2. Principle of Least Privilege:
#    - Grant minimum required S3 permissions
#    - Use specific bucket/object ARNs
#    - Implement time-based access controls
#
# 3. Monitoring and Auditing:
#    - Enable CloudTrail for all S3 API calls
#    - Set up CloudWatch alarms for unusual patterns
#    - Regular access reviews and policy audits