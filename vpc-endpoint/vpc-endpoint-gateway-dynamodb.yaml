AWSTemplateFormatVersion: '2010-09-09'
Description: |
  VPC Endpoint (Gateway Endpoint) for DynamoDB - Educational Template

  This template demonstrates how to create a VPC Gateway Endpoint for Amazon DynamoDB.

  WHAT IS A VPC ENDPOINT?
  A VPC endpoint enables you to privately connect your VPC to supported AWS services
  without requiring an internet gateway, NAT device, VPN connection, or AWS Direct Connect.

  GATEWAY ENDPOINT vs INTERFACE ENDPOINT:
  - Gateway Endpoint: Routes traffic through AWS's private network using route tables
    * Supported services: S3 and DynamoDB only
    * No additional charges
    * Uses prefix lists in route tables

  - Interface Endpoint: Creates an ENI (Elastic Network Interface) in your subnet
    * Supports many AWS services
    * Charges apply per endpoint per hour
    * Uses DNS resolution

  WHY USE A GATEWAY ENDPOINT FOR DYNAMODB?
  1. Security: Traffic never leaves AWS network
  2. Performance: Lower latency and higher throughput
  3. Cost: No NAT Gateway charges for DynamoDB traffic
  4. Compliance: Meets requirements for private connectivity

  ARCHITECTURE:
  [EC2 in Private Subnet] → [Route Table] → [Gateway Endpoint] → [DynamoDB]

  The endpoint automatically adds routes to your specified route tables that direct
  DynamoDB traffic through the VPC endpoint instead of the internet.

Metadata:
  # This section organizes parameters in the CloudFormation console for better UX
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - RouteTableIdList
    ParameterLabels:
      Application:
        default: "Application Name"
      Environment:
        default: "Environment (dev/staging/prod)"
      VpcId:
        default: "Target VPC"
      RouteTableIdList:
        default: "Route Tables to Associate"

Parameters:
  Application:
    Type: String
    Default: lab
    Description: |
      Application name used for resource naming and tagging.
      This helps identify resources and track costs by application.
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: Must start with a letter and contain only alphanumeric characters and hyphens

  Environment:
    Type: String
    Default: dev
    Description: |
      Environment designation (dev, staging, prod, etc.).
      Used for resource naming and applying environment-specific configurations.
    AllowedValues:
      - dev
      - staging
      - prod
      - test
    ConstraintDescription: Must be one of dev, staging, prod, or test

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: |
      The VPC where the Gateway Endpoint will be created.

      IMPORTANT: The VPC endpoint will only be accessible from resources
      within this VPC. Cross-VPC access is not supported for Gateway Endpoints.

      The endpoint will appear as a managed prefix list in the route tables
      you specify, directing DynamoDB traffic through AWS's private network.

  RouteTableIdList:
    Type: CommaDelimitedList
    Description: |
      Comma-separated list of Route Table IDs to associate with this endpoint.

      BEST PRACTICES:
      - Typically use private subnet route tables
      - Include all route tables where DynamoDB access is needed
      - Don't include public subnet route tables unless specifically required

      WHAT HAPPENS:
      When you associate route tables, AWS automatically adds routes for
      DynamoDB's IP ranges (prefix lists) pointing to the VPC endpoint.

      EXAMPLE: rtb-1234567890abcdef0,rtb-0987654321fedcba0

      HOW TO FIND ROUTE TABLE IDs:
      1. Go to VPC Console → Route Tables
      2. Look for route tables associated with your private subnets
      3. Copy the Route Table ID (starts with 'rtb-')
    Default: "rtb-xxxxx,rtb-yyyyy"

Resources:
  #############################################################
  # VPC GATEWAY ENDPOINT FOR DYNAMODB
  #############################################################

  VpcEndpointDynamoDB:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      # ENDPOINT TYPE EXPLANATION:
      # Gateway: For S3 and DynamoDB only, uses route table entries
      # Interface: For other services, creates ENI in subnet
      # GatewayLoadBalancer: For third-party appliances
      VpcEndpointType: Gateway

      # SERVICE NAME FORMAT:
      # com.amazonaws.{region}.{service}
      # This automatically resolves to the correct DynamoDB service in your region
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'

      # The VPC where this endpoint will be created
      VpcId: !Ref VpcId

      # POLICY DOCUMENT EXPLANATION:
      # This IAM policy controls what actions can be performed through the endpoint
      # It's separate from DynamoDB table policies and IAM user/role policies
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowDynamoDBAccess
            Effect: Allow
            # Principal '*' means any authenticated AWS principal
            # The actual permissions are still controlled by IAM policies
            Principal: '*'
            Action:
              # Grant all DynamoDB actions through the endpoint
              # In production, consider restricting to specific actions like:
              # - "dynamodb:GetItem"
              # - "dynamodb:PutItem" 
              # - "dynamodb:Query"
              # - "dynamodb:Scan"
              - "dynamodb:*"
            Resource:
              # Allow access to all DynamoDB tables in this account/region
              # In production, consider restricting to specific tables:
              # - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MySpecificTable"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
            # Optional: Add conditions for additional security
            # Condition:
            #   StringEquals:
            #     'aws:PrincipalTag/Department': 'Engineering'

      # ROUTE TABLE ASSOCIATION:
      # These route tables will get automatic routes added for DynamoDB traffic
      RouteTableIds: !Ref RouteTableIdList

      # NOTE: SecurityGroupIds is NOT used for Gateway Endpoints
      # Security Groups only apply to Interface Endpoints (ENI-based)
      # Gateway Endpoints use route table entries instead

      # Resource Tags
      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-dynamodb-endpoint"
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: DynamoDB
        - Key: EndpointType
          Value: Gateway
        - Key: Purpose
          Value: "Private connectivity to DynamoDB without internet routing"

Outputs:
  #############################################################
  # OUTPUTS FOR REFERENCE AND INTEGRATION
  #############################################################

  VpcEndpointId:
    Description: |
      The VPC Endpoint ID for DynamoDB Gateway Endpoint.

      USE CASES:
      - Reference in other CloudFormation templates
      - Monitoring and logging configurations
      - Troubleshooting connectivity issues

      FORMAT: vpce-xxxxxxxxxxxxxxxxx
    Value: !Ref VpcEndpointDynamoDB
    Export:
      Name: !Sub "${Application}-${Environment}-dynamodb-endpoint-id"

  VpcEndpointServiceName:
    Description: |
      The service name for the DynamoDB endpoint.
      This shows which AWS service this endpoint connects to.
    Value: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
    Export:
      Name: !Sub "${Application}-${Environment}-dynamodb-endpoint-service"

  VpcEndpointType:
    Description: |
      The type of VPC endpoint (Gateway for DynamoDB).
      Gateway endpoints are free and use route table entries.
    Value: Gateway

  AssociatedRouteTableCount:
    Description: |
      Number of route tables associated with this endpoint.
      Each route table will have DynamoDB routes automatically added.
    Value: !Join
      - ''
      - - !Select [0, !Ref RouteTableIdList]
        - !If 
          - HasMultipleRouteTables
          - !Sub ' and ${RouteTableCount} others'
          - ''

  PolicySummary:
    Description: |
      Summary of the endpoint policy applied.
      This policy allows all DynamoDB actions for all tables.
      Consider restricting in production environments.
    Value: "Allows all DynamoDB actions (*) for all tables in this account/region"

  UsageInstructions:
    Description: |
      Instructions for using this VPC endpoint.
    Value: |
      USAGE INSTRUCTIONS:

      1. VERIFY ENDPOINT: Check that routes appear in your route tables
         - Go to VPC Console → Route Tables
         - Look for routes with destination 'pl-xxxxxxxx' (DynamoDB prefix list)
         - Target should be your VPC endpoint ID

      2. TEST CONNECTIVITY: From an EC2 instance in associated subnets:
         - aws dynamodb list-tables --region ${AWS::Region}
         - Check VPC Flow Logs to confirm traffic uses endpoint

      3. MONITOR: Use CloudWatch and VPC Flow Logs
         - Look for traffic to DynamoDB IP ranges
         - Monitor endpoint usage metrics

      4. TROUBLESHOOTING:
         - Ensure EC2 instances have DynamoDB IAM permissions
         - Verify route table associations
         - Check endpoint policy restrictions
         - Confirm security groups allow outbound HTTPS (443)

# CONDITIONAL LOGIC FOR OUTPUTS
Conditions:
  HasMultipleRouteTables: !Not [!Equals [!Select [1, !Ref RouteTableIdList], ""]]

# ADDITIONAL LEARNING RESOURCES IN COMMENTS:
#
# RELATED AWS SERVICES:
# - VPC Flow Logs: Monitor traffic through the endpoint
# - CloudTrail: Log API calls made through the endpoint  
# - CloudWatch: Monitor endpoint metrics and performance
# - IAM: Control access to DynamoDB tables and actions
#
# SECURITY CONSIDERATIONS:
# 1. Endpoint Policy: Controls what can be done through the endpoint
# 2. IAM Policies: Control who can perform DynamoDB actions
# 3. DynamoDB Resource Policies: Control access to specific tables
# 4. Network ACLs: Additional network-level security (if configured)
#
# COST OPTIMIZATION:
# - Gateway Endpoints are free (no hourly charges)
# - Reduces NAT Gateway data processing charges
# - No cross-AZ data transfer charges for DynamoDB traffic
#
# LIMITATIONS:
# - Only works within the same VPC (no cross-VPC access)
# - Only supports DynamoDB and S3 services
# - Cannot be extended to on-premises networks
# - Route table limit: 255 route tables per endpoint
#
# MONITORING QUERIES (CloudWatch Logs Insights):
# - VPC Flow Log query to see endpoint traffic:
#   fields @timestamp, srcaddr, dstaddr, action
#   | filter dstaddr like /^dynamodb/
#   | stats count() by action