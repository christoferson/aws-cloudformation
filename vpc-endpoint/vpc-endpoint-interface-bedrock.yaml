AWSTemplateFormatVersion: "2010-09-09"
Description: |
  VPC Interface Endpoints for Amazon Bedrock Services - Educational Template

  This template creates VPC Interface Endpoints for Amazon Bedrock, enabling private
  connectivity to Bedrock's AI/ML services without routing traffic over the internet.

  WHAT IS AMAZON BEDROCK?
  Amazon Bedrock is a fully managed service that offers foundation models (FMs) from
  leading AI companies through a single API. It enables you to build and scale
  generative AI applications with high-performance foundation models.

  BEDROCK SERVICE COMPONENTS:

  1. üß† BEDROCK (Control Plane):
     - Model management and configuration
     - Fine-tuning operations
     - Model evaluation and testing
     - Foundation model discovery

  2. ‚ö° BEDROCK-RUNTIME (Data Plane):
     - Real-time model inference
     - Text generation, chat completions
     - Image generation and analysis
     - Embedding generation

  3. ü§ñ BEDROCK-AGENT (Agent Management):
     - Create and manage AI agents
     - Agent configuration and orchestration
     - Knowledge base integration
     - Action group management

  4. üöÄ BEDROCK-AGENT-RUNTIME (Agent Execution):
     - Execute agent workflows
     - Real-time agent interactions
     - Session management
     - Agent response processing

  WHY USE VPC INTERFACE ENDPOINTS FOR BEDROCK?

  üîí SECURITY BENEFITS:
  - Traffic never leaves AWS private network
  - No exposure to internet-based attacks
  - Enhanced compliance posture
  - Private IP addressing within your VPC

  üöÄ PERFORMANCE BENEFITS:
  - Lower latency (direct AWS backbone connectivity)
  - Higher throughput and reliability
  - Reduced network hops
  - Consistent performance characteristics

  üí∞ COST CONSIDERATIONS:
  - Interface endpoint charges: $0.01/hour per endpoint per AZ
  - Data processing charges: $0.01/GB processed
  - Eliminates NAT Gateway charges for Bedrock traffic
  - Cost-effective for high-volume AI workloads

  INTERFACE vs GATEWAY ENDPOINTS:

  Interface Endpoints (This Template):
  ‚úÖ Supports most AWS services (including Bedrock)
  ‚úÖ Works with on-premises via VPN/Direct Connect
  ‚úÖ DNS-based service discovery
  ‚úÖ Fine-grained security group control
  ‚ùå Hourly charges apply
  ‚ùå More complex networking setup

  Gateway Endpoints:
  ‚úÖ Free of charge
  ‚úÖ High performance
  ‚ùå Only supports S3 and DynamoDB
  ‚ùå VPC-only access

  ARCHITECTURE FLOW:
  [AI Application] ‚Üí [Security Group] ‚Üí [Interface Endpoint ENI] ‚Üí [Bedrock Service]
                                              ‚Üì
                                    [Private DNS Resolution]
                                    bedrock.region.amazonaws.com
                                              ‚Üì
                                    [10.0.x.x Private IP]

# Reference: https://docs.aws.amazon.com/bedrock/latest/userguide/usingVPC.html

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - VpcSubnetList
    ParameterLabels:
      Application:
        default: "Application Name"
      Environment:
        default: "Environment (dev/staging/prod)"
      VpcId:
        default: "Target VPC for Bedrock Endpoints"
      VpcSubnetList:
        default: "Private Subnets for Endpoint ENIs"

Parameters:
  Application:
    Type: String
    Default: lab
    Description: |
      Application name for resource identification and cost tracking.

      NAMING BEST PRACTICES:
      - Use descriptive names that indicate AI/ML usage
      - Examples: ai-chatbot, ml-pipeline, genai-app
      - Helps with cost allocation and resource management

      This will be used in resource names and tags for organization.
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: Must start with a letter and contain only alphanumeric characters and hyphens
    MinLength: 2
    MaxLength: 32

  Environment:
    Type: String
    Default: dev
    Description: |
      Environment designation for resource organization.

      ENVIRONMENT STRATEGY FOR AI/ML:
      - dev: Model experimentation and development
      - staging: Model validation and integration testing
      - prod: Production AI/ML workloads
      - test: Automated testing and benchmarking

      Different environments may need different Bedrock models and configurations.
    AllowedValues:
      - dev
      - staging
      - prod
      - test
    ConstraintDescription: Must be one of dev, staging, prod, or test

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: |
      The VPC where Bedrock Interface Endpoints will be created.

      VPC REQUIREMENTS FOR BEDROCK:
      - Must have DNS resolution enabled (enableDnsSupport: true)
      - Must have DNS hostnames enabled (enableDnsHostnames: true)
      - Should have private subnets for secure AI/ML workloads

      SELECTION CRITERIA:
      - Choose VPC where your AI/ML applications run
      - Ensure proper network connectivity to your compute resources
      - Consider data residency and compliance requirements

      MULTI-VPC CONSIDERATIONS:
      - Each VPC needs its own set of endpoints
      - Consider VPC peering or Transit Gateway for cross-VPC access
      - Plan for consistent DNS resolution across VPCs

  VpcSubnetList:
    Type: List<AWS::EC2::Subnet::Id>
    Description: |
      Private subnets where Interface Endpoint ENIs will be created.

      SUBNET SELECTION STRATEGY:

      ‚úÖ RECOMMENDED:
      - Private subnets (no direct internet access)
      - Subnets in multiple AZs for high availability
      - Subnets where your AI/ML workloads run
      - Subnets with adequate IP address space

      ‚ùå AVOID:
      - Public subnets (security risk)
      - Subnets in single AZ (availability risk)
      - Subnets with limited IP space

      HIGH AVAILABILITY DESIGN:
      - Select subnets in 2-3 Availability Zones
      - Each endpoint creates one ENI per subnet
      - Automatic failover between AZs

      IP ADDRESS PLANNING:
      - Each endpoint consumes one IP per subnet
      - 4 endpoints √ó 3 subnets = 12 IP addresses total
      - Ensure subnets have sufficient available IPs

      COST OPTIMIZATION:
      - More subnets = more ENIs = higher costs
      - Balance availability needs with cost considerations
      - Minimum 2 AZs recommended for production

Resources:
  #############################################################
  # SECURITY GROUP FOR BEDROCK ENDPOINTS
  #############################################################

  BedrockEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Application}-${Environment}-bedrock-endpoint-sg"
      GroupDescription: |
        Security group for Amazon Bedrock VPC Interface Endpoints.
        Allows HTTPS traffic from VPC CIDR to access Bedrock services privately.
      VpcId: !Ref VpcId

      # INBOUND RULES:
      # Interface endpoints require HTTPS (port 443) access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8
          Description: "HTTPS access to Bedrock endpoints from RFC1918 10.x.x.x"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 172.16.0.0/12
          Description: "HTTPS access to Bedrock endpoints from RFC1918 172.16-31.x.x"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 192.168.0.0/16
          Description: "HTTPS access to Bedrock endpoints from RFC1918 192.168.x.x"

      # OUTBOUND RULES:
      # Default allows all outbound traffic
      # Consider restricting for enhanced security
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: "Allow all outbound traffic"

      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-bedrock-endpoint-sg"
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Bedrock VPC Endpoint Security"

  #############################################################
  # BEDROCK CONTROL PLANE ENDPOINT
  #############################################################

  VpcEndpointBedrock:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      # ENDPOINT TYPE:
      # Interface endpoints create ENIs with private IPs in your subnets
      VpcEndpointType: Interface

      # BEDROCK CONTROL PLANE SERVICE:
      # Handles model management, fine-tuning, and configuration operations
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.bedrock"

      # Target VPC for the endpoint
      VpcId: !Ref VpcId

      # SUBNET PLACEMENT:
      # Creates one ENI per subnet for high availability
      SubnetIds: !Ref VpcSubnetList

      # PRIVATE DNS:
      # Enables private DNS resolution for bedrock.region.amazonaws.com
      # Your applications can use standard Bedrock endpoints
      PrivateDnsEnabled: true

      # SECURITY GROUPS:
      # Controls network access to the endpoint ENIs
      SecurityGroupIds:
        - !Ref BedrockEndpointSecurityGroup

      # ENDPOINT POLICY:
      # Controls what actions can be performed through this endpoint
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowBedrockControlPlaneAccess
            Effect: Allow
            Principal: "*"
            Action:
              # Model management operations
              - "bedrock:ListFoundationModels"
              - "bedrock:GetFoundationModel"
              - "bedrock:ListModelCustomizationJobs"
              - "bedrock:GetModelCustomizationJob"
              - "bedrock:CreateModelCustomizationJob"
              - "bedrock:StopModelCustomizationJob"
              # Model evaluation
              - "bedrock:CreateEvaluationJob"
              - "bedrock:GetEvaluationJob"
              - "bedrock:ListEvaluationJobs"
              # Provisioned throughput
              - "bedrock:CreateProvisionedModelThroughput"
              - "bedrock:GetProvisionedModelThroughput"
              - "bedrock:UpdateProvisionedModelThroughput"
              - "bedrock:DeleteProvisionedModelThroughput"
              - "bedrock:ListProvisionedModelThroughputs"
            Resource: "*"
            Condition:
              StringEquals:
                "aws:PrincipalAccount": !Ref "AWS::AccountId"

      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-bedrock-control-endpoint"
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: "Bedrock Control Plane"
        - Key: EndpointType
          Value: Interface

  #############################################################
  # BEDROCK RUNTIME ENDPOINT (INFERENCE)
  #############################################################

  VpcEndpointBedrockRuntime:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: Interface

      # BEDROCK RUNTIME SERVICE:
      # Handles real-time model inference and generation
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.bedrock-runtime"

      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcSubnetList
      PrivateDnsEnabled: true

      SecurityGroupIds:
        - !Ref BedrockEndpointSecurityGroup

      # RUNTIME ENDPOINT POLICY:
      # Focused on inference operations
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowBedrockRuntimeAccess
            Effect: Allow
            Principal: "*"
            Action:
              # Core inference operations
              - "bedrock:InvokeModel"
              - "bedrock:InvokeModelWithResponseStream"
            Resource: 
              # Allow access to all foundation models
              # Consider restricting to specific models in production
              - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/*"
              - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:custom-model/*"
              - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:provisioned-model/*"
            Condition:
              StringEquals:
                "aws:PrincipalAccount": !Ref "AWS::AccountId"

      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-bedrock-runtime-endpoint"
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: "Bedrock Runtime (Inference)"
        - Key: EndpointType
          Value: Interface

  #############################################################
  # BEDROCK AGENT MANAGEMENT ENDPOINT
  #############################################################

  VpcEndpointBedrockAgent:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: Interface

      # BEDROCK AGENT SERVICE:
      # Handles agent creation, configuration, and management
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.bedrock-agent"

      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcSubnetList
      PrivateDnsEnabled: true

      SecurityGroupIds:
        - !Ref BedrockEndpointSecurityGroup

      # AGENT MANAGEMENT POLICY:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowBedrockAgentManagement
            Effect: Allow
            Principal: "*"
            Action:
              # Agent lifecycle management
              - "bedrock:CreateAgent"
              - "bedrock:GetAgent"
              - "bedrock:UpdateAgent"
              - "bedrock:DeleteAgent"
              - "bedrock:ListAgents"
              # Agent version management
              - "bedrock:CreateAgentVersion"
              - "bedrock:GetAgentVersion"
              - "bedrock:ListAgentVersions"
              # Agent alias management
              - "bedrock:CreateAgentAlias"
              - "bedrock:GetAgentAlias"
              - "bedrock:UpdateAgentAlias"
              - "bedrock:DeleteAgentAlias"
              - "bedrock:ListAgentAliases"
              # Knowledge base operations
              - "bedrock:CreateKnowledgeBase"
              - "bedrock:GetKnowledgeBase"
              - "bedrock:UpdateKnowledgeBase"
              - "bedrock:DeleteKnowledgeBase"
              - "bedrock:ListKnowledgeBases"
              # Data source operations
              - "bedrock:CreateDataSource"
              - "bedrock:GetDataSource"
              - "bedrock:UpdateDataSource"
              - "bedrock:DeleteDataSource"
              - "bedrock:ListDataSources"
            Resource: "*"
            Condition:
              StringEquals:
                "aws:PrincipalAccount": !Ref "AWS::AccountId"

      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-bedrock-agent-endpoint"
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: "Bedrock Agent Management"
        - Key: EndpointType
          Value: Interface

  #############################################################
  # BEDROCK AGENT RUNTIME ENDPOINT
  #############################################################

  VpcEndpointBedrockAgentRuntime:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: Interface

      # BEDROCK AGENT RUNTIME SERVICE:
      # Handles agent execution and real-time interactions
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.bedrock-agent-runtime"

      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcSubnetList
      PrivateDnsEnabled: true

      SecurityGroupIds:
        - !Ref BedrockEndpointSecurityGroup

      # AGENT RUNTIME POLICY:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowBedrockAgentRuntime
            Effect: Allow
            Principal: "*"
            Action:
              # Agent invocation
              - "bedrock:InvokeAgent"
              # Knowledge base querying
              - "bedrock:Retrieve"
              - "bedrock:RetrieveAndGenerate"
            Resource: 
              # Allow access to agents and knowledge bases in this account
              - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
              - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*"
            Condition:
              StringEquals:
                "aws:PrincipalAccount": !Ref "AWS::AccountId"

      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-bedrock-agent-runtime-endpoint"
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: "Bedrock Agent Runtime"
        - Key: EndpointType
          Value: Interface

Outputs:
  #############################################################
  # COMPREHENSIVE OUTPUTS FOR INTEGRATION AND MONITORING
  #############################################################

  VpcEndpointBedrockID:
    Description: |
      VPC Endpoint ID for Bedrock Control Plane.

      USE CASES:
      - Model management and configuration
      - Fine-tuning job operations
      - Foundation model discovery
      - Provisioned throughput management

      ENDPOINT URL: bedrock.${AWS::Region}.amazonaws.com
    Value: !Ref VpcEndpointBedrock
    Export:
      Name: !Sub "${Application}-${Environment}-bedrock-control-endpoint-id"

  VpcEndpointBedrockRuntimeID:
    Description: |
      VPC Endpoint ID for Bedrock Runtime (Inference).

      USE CASES:
      - Real-time model inference
      - Text generation and completion
      - Image generation and analysis
      - Embedding generation

      ENDPOINT URL: bedrock-runtime.${AWS::Region}.amazonaws.com
    Value: !Ref VpcEndpointBedrockRuntime
    Export:
      Name: !Sub "${Application}-${Environment}-bedrock-runtime-endpoint-id"

  VpcEndpointBedrockAgentID:
    Description: |
      VPC Endpoint ID for Bedrock Agent Management.

      USE CASES:
      - Create and configure AI agents
      - Manage agent versions and aliases
      - Set up knowledge bases
      - Configure data sources

      ENDPOINT URL: bedrock-agent.${AWS::Region}.amazonaws.com
    Value: !Ref VpcEndpointBedrockAgent
    Export:
      Name: !Sub "${Application}-${Environment}-bedrock-agent-endpoint-id"

  VpcEndpointBedrockAgentRuntimeID:
    Description: |
      VPC Endpoint ID for Bedrock Agent Runtime.

      USE CASES:
      - Execute agent workflows
      - Real-time agent interactions
      - Knowledge base queries
      - Retrieval-augmented generation (RAG)

      ENDPOINT URL: bedrock-agent-runtime.${AWS::Region}.amazonaws.com
    Value: !Ref VpcEndpointBedrockAgentRuntime
    Export:
      Name: !Sub "${Application}-${Environment}-bedrock-agent-runtime-endpoint-id"

  SecurityGroupId:
    Description: |
      Security Group ID for Bedrock endpoints.

      CONFIGURATION:
      - Allows HTTPS (443) from RFC1918 private IP ranges
      - Apply to resources that need Bedrock access
      - Modify rules as needed for your security requirements
    Value: !Ref BedrockEndpointSecurityGroup
    Export:
      Name: !Sub "${Application}-${Environment}-bedrock-endpoint-sg-id"

  EndpointDnsNames:
    Description: |
      DNS names for all Bedrock endpoints.
      These resolve to private IPs within your VPC when PrivateDnsEnabled is true.
    Value: !Sub |
      Bedrock Control: bedrock.${AWS::Region}.amazonaws.com
      Bedrock Runtime: bedrock-runtime.${AWS::Region}.amazonaws.com
      Bedrock Agent: bedrock-agent.${AWS::Region}.amazonaws.com
      Bedrock Agent Runtime: bedrock-agent-runtime.${AWS::Region}.amazonaws.com

  UsageExamples:
    Description: |
      Code examples for using Bedrock through VPC endpoints.
    Value: !Sub |
      PYTHON BOTO3 EXAMPLES:

      # 1. List available foundation models (Control Plane)
      import boto3
      import json

      bedrock = boto3.client('bedrock', region_name='${AWS::Region}')
      models = bedrock.list_foundation_models()
      print(json.dumps(models, indent=2, default=str))

      # 2. Generate text with Claude (Runtime)
      bedrock_runtime = boto3.client('bedrock-runtime', region_name='${AWS::Region}')
      response = bedrock_runtime.invoke_model(
          modelId='anthropic.claude-3-sonnet-20240229-v1:0',
          body=json.dumps({
              "anthropic_version": "bedrock-2023-05-31",
              "max_tokens": 1000,
              "messages": [{"role": "user", "content": "Hello, world!"}]
          })
      )
      result = json.loads(response['body'].read())
      print(result['content'][0]['text'])

      # 3. Create an agent (Agent Management)
      bedrock_agent = boto3.client('bedrock-agent', region_name='${AWS::Region}')
      agent = bedrock_agent.create_agent(
          agentName='MyAgent',
          foundationModel='anthropic.claude-3-sonnet-20240229-v1:0',
          instruction='You are a helpful assistant.'
      )

      # 4. Invoke an agent (Agent Runtime)
      bedrock_agent_runtime = boto3.client('bedrock-agent-runtime', region_name='${AWS::Region}')
      response = bedrock_agent_runtime.invoke_agent(
          agentId='AGENT_ID',
          agentAliasId='ALIAS_ID',
          sessionId='session-123',
          inputText='What can you help me with?'
      )

      AWS CLI EXAMPLES:

      # List foundation models
      aws bedrock list-foundation-models --region ${AWS::Region}

      # Invoke model (requires JSON file with prompt)
      aws bedrock-runtime invoke-model \
          --model-id anthropic.claude-3-sonnet-20240229-v1:0 \
          --body file://prompt.json \
          --region ${AWS::Region} \
          output.json

  CostEstimation:
    Description: |
      Cost estimation for Bedrock VPC endpoints.
    Value: !Sub |
      INTERFACE ENDPOINT COSTS (per month):

      Base Charges (4 endpoints):
      - Endpoint hours: 4 √ó $0.01/hour √ó 24 √ó 30 = $28.80/month
      - Per AZ charges: Each subnet adds $0.01/hour per endpoint
      - Example with 3 AZs: 4 √ó 3 √ó $0.01 √ó 24 √ó 30 = $86.40/month

      Data Processing:
      - $0.01 per GB processed through endpoints
      - Typical AI workload examples:
        * Light usage (10GB/month): $0.10
        * Medium usage (100GB/month): $1.00
        * Heavy usage (1TB/month): $10.00

      ESTIMATED MONTHLY TOTALS:
      - Single AZ deployment: ~$30-40/month
      - Multi-AZ deployment (2 AZs): ~$60-70/month
      - Multi-AZ deployment (3 AZs): ~$90-100/month

      COST OPTIMIZATION TIPS:
      - Use minimum required number of AZs for your availability needs
      - Monitor data transfer through CloudWatch metrics
      - Consider endpoint policies to restrict unnecessary usage
      - Use provisioned throughput for predictable high-volume workloads
      - Implement request caching where appropriate

  SecurityBestPractices:
    Description: |
      Security best practices for Bedrock VPC endpoints.
    Value: |
      üîí NETWORK SECURITY:

      1. SECURITY GROUPS:
         ‚úÖ Current: Allows HTTPS (443) from RFC1918 private ranges
         üîß Production: Restrict to specific application subnet CIDRs
         üîß Advanced: Use security group references instead of CIDR blocks
         üîß Monitoring: Regular security group rule audits

      2. ENDPOINT POLICIES:
         ‚úÖ Current: Restricts to account-specific resources
         üîß Production: Limit to specific Bedrock actions needed
         üîß Advanced: Add IP address and time-based conditions
         üîß Compliance: Implement data classification restrictions

      3. NETWORK ISOLATION:
         ‚úÖ Current: Deployed in private subnets
         üîß Production: Implement NACLs for additional control
         üîß Monitoring: Enable VPC Flow Logs
         üîß Advanced: Consider dedicated VPC for AI workloads

      üîê ACCESS CONTROL:

      1. IAM POLICIES:
         - Grant minimum required Bedrock permissions
         - Use resource-specific ARNs when possible
         - Implement condition-based access controls
         - Regular access reviews and audits

      2. AUTHENTICATION:
         - Use IAM roles for EC2/Lambda instead of access keys
         - Implement MFA for human access
         - Consider AWS SSO for centralized access
         - Rotate credentials regularly

      üìä MONITORING & COMPLIANCE:

      1. LOGGING:
         - Enable CloudTrail for all Bedrock API calls
         - Monitor VPC Flow Logs for network traffic
         - Set up CloudWatch alarms for unusual patterns
         - Implement centralized log analysis

      2. DATA PROTECTION:
         - Encrypt data in transit (HTTPS enforced)
         - Implement data classification and handling procedures
         - Monitor for sensitive data in prompts/responses
         - Consider data loss prevention (DLP) tools

  TroubleshootingGuide:
    Description: |
      Comprehensive troubleshooting guide for Bedrock VPC endpoints.
    Value: !Sub |
      üîç COMMON ISSUES AND SOLUTIONS:

      CONNECTIVITY PROBLEMS:

      ‚ùå Issue: "Unable to connect to Bedrock"
      ‚úÖ Solutions:
      1. Verify VPC DNS settings:
         aws ec2 describe-vpcs --vpc-ids ${VpcId} --query 'Vpcs[0].[EnableDnsSupport,EnableDnsHostnames]'
      2. Check security group allows HTTPS (443) outbound from your resources
      3. Confirm endpoints are deployed in correct subnets
      4. Test DNS resolution: nslookup bedrock.${AWS::Region}.amazonaws.com

      ‚ùå Issue: "DNS resolution fails"
      ‚úÖ Solutions:
      1. Ensure PrivateDnsEnabled is true (current: enabled)
      2. Check VPC DHCP options configuration
      3. Verify Route 53 Resolver settings
      4. Test from resources in the same VPC

      AUTHENTICATION/AUTHORIZATION:

      ‚ùå Issue: "Access Denied" errors
      ‚úÖ Solutions:
      1. Check IAM permissions for Bedrock actions:
         aws sts get-caller-identity
         aws iam get-role-policy --role-name YourRole --policy-name YourPolicy
      2. Review endpoint policy restrictions
      3. Verify resource ARNs in policies match your region/account
      4. Check AWS account limits: aws service-quotas get-service-quota --service-code bedrock

      ‚ùå Issue: "Model not found" errors
      ‚úÖ Solutions:
      1. List available models: aws bedrock list-foundation-models --region ${AWS::Region}
      2. Check model access permissions in Bedrock console
      3. Verify correct model ID format
      4. Confirm model availability in your region

      PERFORMANCE ISSUES:

      ‚ùå Issue: "High latency or timeouts"
      ‚úÖ Solutions:
      1. Check endpoint placement (prefer same AZ as compute resources)
      2. Monitor CloudWatch metrics:
         aws cloudwatch get-metric-statistics --namespace AWS/VpcEndpoint --metric-name PacketsDropped
      3. Verify network path and routing tables
      4. Consider provisioned throughput for consistent performance

      üõ†Ô∏è DIAGNOSTIC COMMANDS:

      # Test endpoint connectivity and list models
      aws bedrock list-foundation-models --region ${AWS::Region} --debug

      # Check all endpoint statuses
      aws ec2 describe-vpc-endpoints --filters Name=vpc-id,Values=${VpcId}

      # Test DNS resolution (run from EC2 instance in VPC)
      nslookup bedrock.${AWS::Region}.amazonaws.com
      dig bedrock.${AWS::Region}.amazonaws.com

      # Check security group configuration
      aws ec2 describe-security-groups --group-ids ${BedrockEndpointSecurityGroup}

      # Monitor endpoint health metrics
      aws cloudwatch get-metric-statistics \
          --namespace AWS/VpcEndpoint \
          --metric-name PacketsDropped \
          --dimensions Name=VpcEndpointId,Value=${VpcEndpointBedrock} \
          --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S) \
          --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
          --period 300 \
          --statistics Sum

      # Test Bedrock model invocation
      aws bedrock-runtime invoke-model \
          --model-id amazon.titan-text-lite-v1 \
          --body '{"inputText":"Hello","textGenerationConfig":{"maxTokenCount":50}}' \
          --region ${AWS::Region} \
          /tmp/response.json && cat /tmp/response.json

      üìû SUPPORT RESOURCES:
      - AWS Bedrock Documentation: https://docs.aws.amazon.com/bedrock/
      - VPC Endpoint Troubleshooting: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html
      - AWS Support Center: https://console.aws.amazon.com/support/
      - AWS re:Post Community: https://repost.aws/
      - Bedrock Developer Guide: https://docs.aws.amazon.com/bedrock/latest/userguide/

  FoundationModelsGuide:
    Description: |
      Guide to available foundation models and their use cases.
    Value: !Sub |
      ü§ñ AVAILABLE FOUNDATION MODELS IN BEDROCK:

      TEXT GENERATION MODELS:

      1. üß† ANTHROPIC CLAUDE FAMILY:
         - claude-3-opus-20240229: Highest capability, complex reasoning
         - claude-3-sonnet-20240229: Balanced performance and speed
         - claude-3-haiku-20240307: Fastest, cost-effective
         - Use cases: Content creation, analysis, coding, research

      2. üöÄ AMAZON TITAN FAMILY:
         - amazon.titan-text-lite-v1: Lightweight text generation
         - amazon.titan-text-express-v1: Enhanced text generation
         - Use cases: Summarization, Q&A, content generation

      3. üî• META LLAMA FAMILY:
         - meta.llama2-13b-chat-v1: Conversational AI
         - meta.llama2-70b-chat-v1: Large-scale conversations
         - Use cases: Chatbots, dialogue systems

      4. ‚ö° COHERE COMMAND FAMILY:
         - cohere.command-text-v14: Business-focused text generation
         - cohere.command-light-text-v14: Lightweight alternative
         - Use cases: Business writing, customer service

      IMAGE GENERATION MODELS:

      1. üé® AMAZON TITAN IMAGE:
         - amazon.titan-image-generator-v1: High-quality image generation
         - Use cases: Marketing content, product visualization

      2. üñºÔ∏è STABILITY AI:
         - stability.stable-diffusion-xl-v1: Advanced image generation
         - Use cases: Creative content, artistic generation

      EMBEDDING MODELS:

      1. üìä AMAZON TITAN EMBEDDINGS:
         - amazon.titan-embed-text-v1: Text embeddings for search/RAG
         - Use cases: Semantic search, recommendation systems

      2. üîç COHERE EMBED:
         - cohere.embed-english-v3: English text embeddings
         - cohere.embed-multilingual-v3: Multilingual embeddings
         - Use cases: Document similarity, clustering

      MODEL SELECTION GUIDE:

      üí∞ COST OPTIMIZATION:
      - Development/Testing: Use lighter models (Haiku, Titan Lite)
      - Production: Balance cost vs performance needs
      - High-volume: Consider provisioned throughput

      üöÄ PERFORMANCE CONSIDERATIONS:
      - Latency-sensitive: Claude Haiku, Titan Express
      - Complex reasoning: Claude Opus, Llama 70B
      - Balanced workloads: Claude Sonnet

      üîí COMPLIANCE & SECURITY:
      - All models support VPC endpoints
      - Data encryption in transit and at rest
      - No model training on your data
      - Regional data residency compliance

      TESTING COMMANDS:

      # List all available models
      aws bedrock list-foundation-models --region ${AWS::Region} --output table

      # Test Claude Sonnet
      aws bedrock-runtime invoke-model \
          --model-id anthropic.claude-3-sonnet-20240229-v1:0 \
          --body '{"anthropic_version":"bedrock-2023-05-31","max_tokens":100,"messages":[{"role":"user","content":"Hello!"}]}' \
          --region ${AWS::Region} \
          claude-response.json

      # Test Titan Text
      aws bedrock-runtime invoke-model \
          --model-id amazon.titan-text-express-v1 \
          --body '{"inputText":"Explain AI","textGenerationConfig":{"maxTokenCount":100}}' \
          --region ${AWS::Region} \
          titan-response.json

# ADDITIONAL LEARNING RESOURCES:
#
# üìö BEDROCK DOCUMENTATION:
# - Getting Started: https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html
# - Model IDs: https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html
# - API Reference: https://docs.aws.amazon.com/bedrock/latest/APIReference/
#
# üîó INTEGRATION PATTERNS:
# - Lambda + Bedrock: Serverless AI applications
# - ECS/EKS + Bedrock: Containerized AI workloads
# - SageMaker + Bedrock: Hybrid ML pipelines
# - API Gateway + Bedrock: AI-powered APIs
#
# üìä MONITORING AND OBSERVABILITY:
# - CloudWatch Metrics: Track usage and performance
# - CloudTrail Logs: Audit API calls and access
# - VPC Flow Logs: Monitor network traffic
# - X-Ray Tracing: End-to-end request tracing
#
# üèóÔ∏è ARCHITECTURE PATTERNS:
#
# 1. RAG (Retrieval-Augmented Generation):
#    [Knowledge Base] ‚Üí [Vector Search] ‚Üí [Bedrock] ‚Üí [Enhanced Response]
#
# 2. Multi-Modal AI Pipeline:
#    [Text Input] ‚Üí [Bedrock Text Model] ‚Üí [Image Generation] ‚Üí [Bedrock Image Model]
#
# 3. Agent-Based Architecture:
#    [User Query] ‚Üí [Bedrock Agent] ‚Üí [Action Groups] ‚Üí [Knowledge Bases] ‚Üí [Response]
#
# üîê SECURITY FRAMEWORKS:
#
# 1. Zero Trust Architecture:
#    - VPC endpoints for network isolation
#    - IAM for identity-based access control
#    - Endpoint policies for resource-level permissions
#    - CloudTrail for comprehensive auditing
#
# 2. Data Protection:
#    - Encryption in transit (TLS 1.2+)
#    - No data retention by foundation models
#    - Regional data processing compliance
#    - Customer-managed encryption keys (future)
#
# 3. Compliance Considerations:
#    - SOC 2 Type II compliance
#    - ISO 27001 certification
#    - GDPR data processing agreements
#    - HIPAA eligible services (select models)