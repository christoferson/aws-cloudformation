AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC Interface Endpoints for AWS Services - Enables private connectivity to AWS services without internet gateway"

#==============================================================================
# STUDY GUIDE: VPC ENDPOINTS (INTERFACE ENDPOINTS)
#==============================================================================
#
# WHAT ARE VPC ENDPOINTS?
# VPC Endpoints allow you to privately connect your VPC to supported AWS services
# without requiring an internet gateway, NAT device, VPN connection, or AWS Direct Connect.
#
# TYPES OF VPC ENDPOINTS:
# 1. Interface Endpoints (VPC Endpoint) - Uses AWS PrivateLink (this template)
# 2. Gateway Endpoints - For S3 and DynamoDB only
#
# INTERFACE ENDPOINT KEY CONCEPTS:
# • Creates an Elastic Network Interface (ENI) in your subnet
# • Uses private IP addresses from your VPC
# • Powered by AWS PrivateLink technology
# • Traffic stays within AWS network backbone
# • Supports security groups for access control
# • Can enable private DNS for seamless service access
#
# BENEFITS:
# • Enhanced Security: Traffic doesn't traverse the internet
# • Improved Performance: Lower latency, higher bandwidth
# • Cost Optimization: Reduces NAT Gateway data processing charges
# • Compliance: Keeps traffic within AWS network for regulatory requirements
#
# PRICING CONSIDERATIONS:
# • Hourly charge per VPC endpoint per AZ
# • Data processing charges per GB
# • Consider cost vs NAT Gateway charges for your use case
#
# SERVICES INCLUDED IN THIS TEMPLATE:
# • CloudWatch Logs: For application and system logging
# • EventBridge: For event-driven architectures
# • Systems Manager (SSM): For instance management and parameter store
# • ECR (Docker & API): For container image registry access
# • KMS: For encryption key management
# • Secrets Manager: For secure credential storage
# • EC2: For instance metadata and EC2 API calls
#
# SECURITY BEST PRACTICES:
# • Use restrictive security groups (principle of least privilege)
# • Enable VPC Flow Logs to monitor endpoint traffic
# • Use resource-based policies when additional access control is needed
# • Regularly audit endpoint usage and costs
#
#==============================================================================

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - VpcSubnetList
          - VpcEndpointSecurityGroupIdList

Parameters:

  Application:
    Type: String
    Default: lab
    Description: "Application name used for resource tagging and identification"

  Environment:
    Type: String
    Default: dev
    Description: "Environment designation (dev, test, prod) for resource organization"

  VpcId:
    Description: "VPC ID where the interface endpoints will be created"
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: "Must be a valid VPC ID in the current region"

  VpcSubnetList:
    Description: "List of private subnet IDs where endpoint ENIs will be placed (recommend multi-AZ for HA)"
    Type: List<AWS::EC2::Subnet::Id>
    ConstraintDescription: "Must be valid subnet IDs within the specified VPC"

  VpcEndpointSecurityGroupIdList:
    Description: "Security group IDs to control access to VPC endpoints (must allow HTTPS/443 inbound)"
    Type: List<AWS::EC2::SecurityGroup::Id>
    ConstraintDescription: "Must be valid security group IDs within the specified VPC"

Resources:

  # CloudWatch Logs VPC Endpoint
  # Enables private access to CloudWatch Logs service for log streaming and management
  # Required for: Lambda functions, ECS tasks, EC2 instances sending logs privately
  VpcEndpointCloudwatchLogs:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface                                    # Interface endpoint uses ENI with private IP
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"        # CloudWatch Logs service endpoint
      VpcId: !Ref VpcId                                            # Target VPC for endpoint creation
      SubnetIds: !Ref VpcSubnetList                                # Subnets where ENIs will be created
      SecurityGroupIds: !Ref VpcEndpointSecurityGroupIdList       # Security groups for access control
      PrivateDnsEnabled: true                                      # Enables private DNS resolution for logs.region.amazonaws.com

  # EventBridge (CloudWatch Events) VPC Endpoint  
  # Enables private access to EventBridge for event-driven architectures
  # Required for: Lambda triggers, Step Functions, custom event processing
  VpcEndpointEventBridge:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.events"     # EventBridge service endpoint
      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcSubnetList
      SecurityGroupIds: !Ref VpcEndpointSecurityGroupIdList
      PrivateDnsEnabled: true                                      # Enables private DNS for events.region.amazonaws.com

  # Systems Manager VPC Endpoint
  # Enables private access to SSM for instance management and Parameter Store
  # Required for: SSM Agent communication, Parameter Store access, Session Manager
  VpcEndpointSSM:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"        # Systems Manager service endpoint
      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcSubnetList
      SecurityGroupIds: !Ref VpcEndpointSecurityGroupIdList
      PrivateDnsEnabled: true                                      # Enables private DNS for ssm.region.amazonaws.com

  # ECR Docker Registry VPC Endpoint
  # Enables private access to ECR for Docker image pulls/pushes
  # Required for: ECS tasks, EKS pods, Docker operations on EC2
  VpcEndpointEcr:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.dkr"    # ECR Docker registry endpoint
      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcSubnetList
      SecurityGroupIds: !Ref VpcEndpointSecurityGroupIdList
      PrivateDnsEnabled: true                                      # Enables private DNS for *.dkr.ecr.region.amazonaws.com

  # ECR API VPC Endpoint
  # Enables private access to ECR API for repository management operations
  # Required for: ECR API calls, image lifecycle management, repository operations
  VpcEndpointEcrApi:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.api"    # ECR API service endpoint
      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcSubnetList
      SecurityGroupIds: !Ref VpcEndpointSecurityGroupIdList
      PrivateDnsEnabled: true                                      # Enables private DNS for api.ecr.region.amazonaws.com

  # KMS VPC Endpoint
  # Enables private access to AWS Key Management Service
  # Required for: Encryption/decryption operations, key management, envelope encryption
  VpcEndpointKms:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.kms"        # KMS service endpoint
      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcSubnetList
      SecurityGroupIds: !Ref VpcEndpointSecurityGroupIdList
      PrivateDnsEnabled: true                                      # Enables private DNS for kms.region.amazonaws.com

  # Secrets Manager VPC Endpoint
  # Enables private access to AWS Secrets Manager for secure credential retrieval
  # Required for: Database credentials, API keys, application secrets management
  VpcEndpointSecretsManager:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"  # Secrets Manager service endpoint
      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcSubnetList
      SecurityGroupIds: !Ref VpcEndpointSecurityGroupIdList
      PrivateDnsEnabled: true                                      # Enables private DNS for secretsmanager.region.amazonaws.com

  # EC2 VPC Endpoint
  # Enables private access to EC2 service for instance metadata and API operations
  # Required for: Instance metadata access, EC2 API calls, Auto Scaling operations
  VpcEndpointEc2:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2"        # EC2 service endpoint
      VpcId: !Ref VpcId
      SubnetIds: !Ref VpcSubnetList
      SecurityGroupIds: !Ref VpcEndpointSecurityGroupIdList
      PrivateDnsEnabled: true                                      # Enables private DNS for ec2.region.amazonaws.com

Outputs:

  # CloudWatch Logs Endpoint Outputs
  VpcEndpointCloudwatchLogsId:
    Description: "VPC Endpoint ID for CloudWatch Logs service"
    Value: !Ref VpcEndpointCloudwatchLogs
    Export:
      Name: !Sub "${AWS::StackName}-CloudWatchLogs-EndpointId"

  # EventBridge Endpoint Outputs  
  VpcEndpointEventBridgeId:
    Description: "VPC Endpoint ID for EventBridge service"
    Value: !Ref VpcEndpointEventBridge
    Export:
      Name: !Sub "${AWS::StackName}-EventBridge-EndpointId"

  # Systems Manager Endpoint Outputs
  VpcEndpointSSMId:
    Description: "VPC Endpoint ID for Systems Manager service"
    Value: !Ref VpcEndpointSSM
    Export:
      Name: !Sub "${AWS::StackName}-SSM-EndpointId"

  # ECR Docker Endpoint Outputs
  VpcEndpointEcrId:
    Description: "VPC Endpoint ID for ECR Docker registry"
    Value: !Ref VpcEndpointEcr
    Export:
      Name: !Sub "${AWS::StackName}-ECR-Docker-EndpointId"

  # ECR API Endpoint Outputs
  VpcEndpointEcrApiId:
    Description: "VPC Endpoint ID for ECR API service"
    Value: !Ref VpcEndpointEcrApi
    Export:
      Name: !Sub "${AWS::StackName}-ECR-API-EndpointId"

  # KMS Endpoint Outputs
  VpcEndpointKmsId:
    Description: "VPC Endpoint ID for KMS service"
    Value: !Ref VpcEndpointKms
    Export:
      Name: !Sub "${AWS::StackName}-KMS-EndpointId"

  # Secrets Manager Endpoint Outputs
  VpcEndpointSecretsManagerId:
    Description: "VPC Endpoint ID for Secrets Manager service"
    Value: !Ref VpcEndpointSecretsManager
    Export:
      Name: !Sub "${AWS::StackName}-SecretsManager-EndpointId"

  # EC2 Endpoint Outputs
  VpcEndpointEc2Id:
    Description: "VPC Endpoint ID for EC2 service"
    Value: !Ref VpcEndpointEc2
    Export:
      Name: !Sub "${AWS::StackName}-EC2-EndpointId"

  # Additional useful outputs (uncommented examples)
  VpcEndpointCloudwatchLogsDnsEntries:
    Description: "DNS entries for CloudWatch Logs VPC endpoint"
    Value: !Join [",", !GetAtt VpcEndpointCloudwatchLogs.DnsEntries]

  VpcEndpointCloudwatchLogsNetworkInterfaceIds:
    Description: "Network Interface IDs created for CloudWatch Logs VPC endpoint"
    Value: !Join [",", !GetAtt VpcEndpointCloudwatchLogs.NetworkInterfaceIds]

#==============================================================================
# DEPLOYMENT NOTES:
#==============================================================================
# 1. Ensure security groups allow HTTPS (port 443) inbound from your resources
# 2. Consider deploying endpoints in multiple AZs for high availability
# 3. Monitor costs as endpoints incur hourly and data processing charges
# 4. Test connectivity after deployment using AWS CLI or SDK calls
# 5. Consider adding resource-based policies for additional access control
#==============================================================================