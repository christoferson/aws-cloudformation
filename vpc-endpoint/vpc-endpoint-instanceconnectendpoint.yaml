AWSTemplateFormatVersion: "2010-09-09"
Description: |
  EC2 Instance Connect Endpoint - Educational Template

  This template creates an EC2 Instance Connect Endpoint, enabling secure SSH and RDP
  connections to EC2 instances in private subnets without requiring a bastion host,
  VPN, or direct internet connectivity.

  WHAT IS EC2 INSTANCE CONNECT ENDPOINT?
  EC2 Instance Connect Endpoint is a fully managed service that provides secure
  connectivity to your EC2 instances using AWS native tools. It eliminates the
  need for traditional bastion hosts while maintaining security best practices.

  KEY BENEFITS:

  üîí ENHANCED SECURITY:
  - No need for bastion hosts or jump servers
  - No SSH keys stored on intermediate servers
  - Temporary credentials for each connection
  - Fine-grained IAM-based access control
  - Network-level isolation in private subnets

  üí∞ COST OPTIMIZATION:
  - No bastion host infrastructure costs
  - No NAT Gateway charges for SSH traffic
  - Pay-per-use pricing model
  - Reduced operational overhead

  üöÄ OPERATIONAL SIMPLICITY:
  - No bastion host maintenance
  - Automatic scaling and high availability
  - Integration with AWS Systems Manager
  - Browser-based and CLI access options

  ‚ö° PERFORMANCE:
  - Direct connection to target instances
  - Low latency within AWS network
  - No additional network hops
  - Optimized for AWS infrastructure

  HOW IT WORKS:

  Traditional Bastion Architecture:
  [User] ‚Üí [Internet] ‚Üí [Bastion Host] ‚Üí [Private Instance]

  Instance Connect Endpoint Architecture:
  [User] ‚Üí [AWS Console/CLI] ‚Üí [Instance Connect Endpoint] ‚Üí [Private Instance]
                                        ‚Üì
                              [Managed AWS Service]
                              [No Infrastructure to Maintain]

  SUPPORTED PROTOCOLS:
  - SSH (Linux instances) - Port 22
  - RDP (Windows instances) - Port 3389
  - Custom protocols via port forwarding

  ACCESS METHODS:
  1. AWS Management Console (browser-based)
  2. AWS CLI with instance-connect commands
  3. EC2 Instance Connect CLI
  4. AWS Systems Manager Session Manager integration

  SECURITY MODEL:
  - IAM policies control who can connect
  - Security groups control network access
  - Temporary SSH keys (60 seconds validity)
  - Connection logging and auditing
  - Source IP preservation for compliance

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - VpcPrivateSubnet
      -
        Label:
          default: "Security Configuration"
        Parameters:
          - CreateSecurityGroup
          - AllowedSourceCidrs
          - EnablePreserveClientIp
    ParameterLabels:
      Application:
        default: "Application Name"
      Environment:
        default: "Environment (dev/staging/prod)"
      VpcId:
        default: "Target VPC"
      VpcPrivateSubnet:
        default: "Private Subnet for Endpoint"
      CreateSecurityGroup:
        default: "Create Security Group"
      AllowedSourceCidrs:
        default: "Allowed Source CIDR Blocks"
      EnablePreserveClientIp:
        default: "Preserve Client IP Address"

Parameters:
  Application:
    Type: String
    Default: lab
    Description: |
      Application name for resource identification and cost tracking.

      NAMING BEST PRACTICES:
      - Use descriptive names that indicate the workload
      - Examples: web-app, database-cluster, analytics-platform
      - Helps with resource organization and cost allocation

      This will be used in resource names and tags for organization.
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: Must start with a letter and contain only alphanumeric characters and hyphens
    MinLength: 2
    MaxLength: 32

  Environment:
    Type: String
    Default: dev
    Description: |
      Environment designation for resource organization and access control.

      ENVIRONMENT STRATEGY:
      - dev: Development and testing environments
      - staging: Pre-production validation and integration testing
      - prod: Production workloads with strict access controls
      - test: Automated testing and CI/CD pipelines

      Different environments may have different security and access requirements.
    AllowedValues:
      - dev
      - staging
      - prod
      - test
    ConstraintDescription: Must be one of dev, staging, prod, or test

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: |
      The VPC where the Instance Connect Endpoint will be deployed.

      VPC REQUIREMENTS:
      - Must have DNS resolution enabled (enableDnsSupport: true)
      - Must have DNS hostnames enabled (enableDnsHostnames: true)
      - Should contain the EC2 instances you want to connect to

      SELECTION CRITERIA:
      - Choose the VPC containing your target EC2 instances
      - Ensure proper network connectivity and routing
      - Consider compliance and security requirements

      MULTI-VPC CONSIDERATIONS:
      - Each VPC requires its own Instance Connect Endpoint
      - Consider VPC peering or Transit Gateway for cross-VPC access
      - Plan for consistent access patterns across VPCs

  VpcPrivateSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: |
      Private subnet where the Instance Connect Endpoint will be deployed.

      SUBNET SELECTION STRATEGY:

      ‚úÖ RECOMMENDED:
      - Private subnet (no direct internet access)
      - Subnet with available IP addresses
      - Subnet in the same AZ as target instances (for optimal performance)
      - Subnet with proper routing to target instances

      ‚ùå AVOID:
      - Public subnets (security risk)
      - Subnets with limited IP address space
      - Subnets without connectivity to target instances

      NETWORK CONSIDERATIONS:
      - Endpoint consumes one IP address in the subnet
      - Must have network connectivity to target EC2 instances
      - Consider network ACLs and routing table configuration
      - Ensure security group rules allow required traffic

      HIGH AVAILABILITY:
      - Single endpoint per subnet (AWS managed HA within AZ)
      - Consider multiple endpoints in different AZs for redundancy
      - AWS handles endpoint availability and scaling

  CreateSecurityGroup:
    Type: String
    Default: "true"
    Description: |
      Whether to create a dedicated security group for the Instance Connect Endpoint.

      SECURITY GROUP STRATEGY:
      - true: Creates optimized security group with Instance Connect rules
      - false: You must specify an existing security group

      RECOMMENDED: true for simplified management and security best practices
    AllowedValues:
      - "true"
      - "false"

  AllowedSourceCidrs:
    Type: CommaDelimitedList
    Default: "10.0.0.0/16"
    Description: |
      CIDR blocks allowed to connect through the Instance Connect Endpoint.

      SECURITY CONSIDERATIONS:
      - Use most restrictive CIDR blocks possible
      - Consider management subnet ranges or VPN client ranges
      - Avoid 0.0.0.0/0 for production environments

      EXAMPLES:
      - VPC CIDR: 10.0.0.0/16
      - Management subnet: 10.0.100.0/24
      - Multiple ranges: 10.0.100.0/24,192.168.1.0/24
      - Corporate network: 172.16.0.0/12

  EnablePreserveClientIp:
    Type: String
    Default: "true"
    Description: |
      Whether to preserve the client's IP address in connection logs.

      PRESERVE CLIENT IP BENEFITS:
      - Enhanced security logging and auditing
      - Compliance with regulatory requirements
      - Better troubleshooting and forensics
      - Source IP-based access controls on target instances

      CONSIDERATIONS:
      - true: Client IP preserved (recommended for most use cases)
      - false: Endpoint IP shown in logs (may be required for some network configurations)
    AllowedValues:
      - "true"
      - "false"

Conditions:
  CreateSecurityGroupCondition: !Equals [!Ref CreateSecurityGroup, "true"]

Resources:
  #############################################################
  # SECURITY GROUP FOR INSTANCE CONNECT ENDPOINT
  #############################################################

  InstanceConnectEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroupCondition
    Properties:
      GroupName: !Sub "${Application}-${Environment}-instance-connect-endpoint-sg"
      GroupDescription: |
        Security group for EC2 Instance Connect Endpoint.
        Controls network access to the endpoint for SSH and RDP connections.
      VpcId: !Ref VpcId

      # INBOUND RULES:
      # Instance Connect Endpoint doesn't require inbound rules
      # Access is controlled through AWS APIs and IAM policies
      SecurityGroupIngress: []

      # OUTBOUND RULES:
      # Allow SSH and RDP to target instances
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Select [0, !Ref AllowedSourceCidrs]
          Description: "SSH access to Linux instances"
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Select [0, !Ref AllowedSourceCidrs]
          Description: "RDP access to Windows instances"
        # Allow HTTPS for AWS API communication
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "HTTPS for AWS API communication"

      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-instance-connect-endpoint-sg"
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Instance Connect Endpoint Security"

  # Additional security group rules for multiple CIDR blocks
  InstanceConnectSshRule2:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: CreateSecurityGroupCondition
    Properties:
      GroupId: !Ref InstanceConnectEndpointSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Select [1, !Split [",", !Join [",", !Ref AllowedSourceCidrs]]]
      Description: "SSH access to Linux instances (additional CIDR)"
    # Note: Add more rules as needed for additional CIDR blocks

  #############################################################
  # EC2 INSTANCE CONNECT ENDPOINT
  #############################################################

  EicEndpoint:
    Type: "AWS::EC2::InstanceConnectEndpoint"
    Properties:
      # CLIENT TOKEN:
      # Uncomment if you need idempotency control for the request
      # Useful for automation and preventing duplicate resources
      # ClientToken: !Sub "${Application}-${Environment}-${AWS::StackName}"

      # PRESERVE CLIENT IP:
      # Controls whether the original client IP is preserved in connection logs
      # Important for security auditing and compliance requirements
      PreserveClientIp: !Ref EnablePreserveClientIp

      # SECURITY GROUPS:
      # Controls network access from the endpoint to target instances
      SecurityGroupIds:
        - !If 
          - CreateSecurityGroupCondition
          - !Ref InstanceConnectEndpointSecurityGroup
          - !Ref "AWS::NoValue"

      # SUBNET PLACEMENT:
      # Determines the network location and availability zone of the endpoint
      SubnetId: !Ref VpcPrivateSubnet

      # RESOURCE TAGGING:
      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-instance-connect-endpoint"
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: "EC2 Instance Connect"
        - Key: Purpose
          Value: "Secure access to private EC2 instances"
        - Key: CostCenter
          Value: !Sub "${Application}-${Environment}"
        - Key: ManagedBy
          Value: CloudFormation

  #############################################################
  # IAM ROLE FOR INSTANCE CONNECT ACCESS (EXAMPLE)
  #############################################################

  InstanceConnectAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Application}-${Environment}-instance-connect-access-role"
      Description: |
        IAM role that grants permissions to use EC2 Instance Connect Endpoint
        for connecting to EC2 instances in private subnets.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole
            Condition:
              Bool:
                "aws:MultiFactorAuthPresent": "true"

      # INSTANCE CONNECT PERMISSIONS:
      Policies:
        - PolicyName: InstanceConnectAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow using Instance Connect Endpoint
              - Sid: AllowInstanceConnectEndpointUsage
                Effect: Allow
                Action:
                  - "ec2-instance-connect:SendSSHPublicKey"
                  - "ec2-instance-connect:SendSerialConsoleSSHPublicKey"
                Resource: 
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                Condition:
                  StringEquals:
                    "ec2:osuser": ["ec2-user", "ubuntu", "admin"]

              # Allow describing instances and endpoints
              - Sid: AllowEC2Describe
                Effect: Allow
                Action:
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeInstanceConnectEndpoints"
                  - "ec2:DescribeInstanceAttribute"
                Resource: "*"

              # Allow opening tunnel through endpoint
              - Sid: AllowInstanceConnectEndpointAccess
                Effect: Allow
                Action:
                  - "ec2-instance-connect:OpenTunnel"
                Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance-connect-endpoint/${EicEndpoint}"

      Tags:
        - Key: Name
          Value: !Sub "${Application}-${Environment}-instance-connect-access-role"
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Instance Connect Access Control"

Outputs:
  #############################################################
  # COMPREHENSIVE OUTPUTS FOR INTEGRATION AND USAGE
  #############################################################

  InstanceConnectEndpointId:
    Description: |
      The ID of the EC2 Instance Connect Endpoint.

      USE CASES:
      - Reference in AWS CLI commands for connections
      - Integration with automation scripts
      - Monitoring and logging configurations
      - Cross-stack references

      FORMAT: eice-xxxxxxxxxxxxxxxxx
    Value: !Ref EicEndpoint
    Export:
      Name: !Sub "${Application}-${Environment}-instance-connect-endpoint-id"

  InstanceConnectEndpointDnsName:
    Description: |
      The DNS name of the Instance Connect Endpoint.
      Used for programmatic access and API calls.
    Value: !GetAtt EicEndpoint.DnsName
    Export:
      Name: !Sub "${Application}-${Environment}-instance-connect-endpoint-dns"

  InstanceConnectEndpointNetworkInterfaceIds:
    Description: |
      The network interface IDs associated with the endpoint.
      Useful for monitoring network traffic and troubleshooting.
    Value: !Join [",", !GetAtt EicEndpoint.NetworkInterfaceIds]

  SecurityGroupId:
    Condition: CreateSecurityGroupCondition
    Description: |
      Security Group ID for the Instance Connect Endpoint.

      CONFIGURATION:
      - Allows SSH (22) and RDP (3389) to specified CIDR blocks
      - Allows HTTPS (443) for AWS API communication
      - Apply similar rules to target EC2 instance security groups
    Value: !Ref InstanceConnectEndpointSecurityGroup
    Export:
      Name: !Sub "${Application}-${Environment}-instance-connect-endpoint-sg-id"

  IAMRoleArn:
    Description: |
      ARN of the IAM role for Instance Connect access.

      USAGE:
      - Assign to users who need Instance Connect access
      - Reference in cross-account access scenarios
      - Use with AWS SSO or identity federation
    Value: !GetAtt InstanceConnectAccessRole.Arn
    Export:
      Name: !Sub "${Application}-${Environment}-instance-connect-access-role-arn"

  UsageInstructions:
    Description: |
      Step-by-step instructions for using the Instance Connect Endpoint.
    Value: !Sub |
      EC2 INSTANCE CONNECT ENDPOINT USAGE GUIDE:

      üìã PREREQUISITES:
      1. Ensure target EC2 instances have Instance Connect installed:
         - Amazon Linux 2/2023: Pre-installed
         - Ubuntu 16.04+: sudo apt-get install ec2-instance-connect
         - Other distributions: Manual installation required

      2. Configure target instance security groups:
         - Allow SSH (port 22) from endpoint security group
         - Allow RDP (port 3389) for Windows instances

      3. Ensure proper IAM permissions (use provided role or similar)

      üñ•Ô∏è CONNECTION METHODS:

      METHOD 1: AWS Management Console
      1. Navigate to EC2 Console ‚Üí Instances
      2. Select your target instance
      3. Click "Connect" ‚Üí "EC2 Instance Connect Endpoint"
      4. Select endpoint: ${EicEndpoint}
      5. Choose connection type (SSH/RDP)
      6. Click "Connect"

      METHOD 2: AWS CLI (Recommended for automation)

      # Connect via SSH to Linux instance
      aws ec2-instance-connect ssh \
          --instance-id i-1234567890abcdef0 \
          --connection-type eice \
          --instance-connect-endpoint-id ${EicEndpoint} \
          --private-key-file ~/.ssh/my-key.pem \
          --os-user ec2-user

      # Open tunnel for custom applications
      aws ec2-instance-connect open-tunnel \
          --instance-id i-1234567890abcdef0 \
          --instance-connect-endpoint-id ${EicEndpoint} \
          --local-port 8080 \
          --remote-port 80

      METHOD 3: EC2 Instance Connect CLI

      # Install the CLI
      pip install ec2-instance-connect-cli

      # Connect to instance
      mssh --instance-id i-1234567890abcdef0 \
           --instance-connect-endpoint-id ${EicEndpoint} \
           --profile your-aws-profile

      üîß TROUBLESHOOTING:

      Issue: "Connection timeout"
      - Check security group rules on target instance
      - Verify network connectivity between endpoint and instance
      - Ensure Instance Connect agent is running on target

      Issue: "Permission denied"
      - Verify IAM permissions for Instance Connect
      - Check OS user permissions on target instance
      - Ensure correct SSH key or authentication method

      Issue: "Endpoint not found"
      - Verify endpoint ID: ${EicEndpoint}
      - Check AWS region configuration
      - Ensure endpoint is in same VPC as target instance

  SecurityConfiguration:
    Description: |
      Security configuration and best practices for Instance Connect Endpoint.
    Value: !Sub |
      üîí SECURITY CONFIGURATION SUMMARY:

      CURRENT SETTINGS:
      - Endpoint ID: ${EicEndpoint}
      - Preserve Client IP: ${EnablePreserveClientIp}
      - Subnet: ${VpcPrivateSubnet} (Private)
      - Security Group: ${InstanceConnectEndpointSecurityGroup}

      üõ°Ô∏è SECURITY BEST PRACTICES:

      1. NETWORK SECURITY:
         ‚úÖ Deployed in private subnet
         ‚úÖ Security group restricts outbound access
         üîß Consider NACLs for additional network-level control
         üîß Monitor VPC Flow Logs for connection patterns

      2. ACCESS CONTROL:
         ‚úÖ IAM-based authentication and authorization
         ‚úÖ MFA requirement in provided IAM role
         üîß Implement least-privilege access policies
         üîß Regular access reviews and audits

      3. TARGET INSTANCE SECURITY:
         üîß Configure security groups to allow access only from endpoint
         üîß Implement host-based firewalls (iptables, Windows Firewall)
         üîß Regular security patching and updates
         üîß Monitor system logs for unauthorized access attempts

      4. MONITORING AND AUDITING:
         üîß Enable CloudTrail for Instance Connect API calls
         üîß Monitor CloudWatch metrics for connection patterns
         üîß Set up alerts for unusual access patterns
         üîß Regular security assessments and penetration testing

      üìä RECOMMENDED SECURITY GROUP RULES FOR TARGET INSTANCES:

      Inbound Rules:
      - SSH (22): Source = ${InstanceConnectEndpointSecurityGroup}
      - RDP (3389): Source = ${InstanceConnectEndpointSecurityGroup}

      Example AWS CLI command:
      aws ec2 authorize-security-group-ingress \
          --group-id sg-target-instance \
          --protocol tcp \
          --port 22 \
          --source-group ${InstanceConnectEndpointSecurityGroup}

  CostOptimization:
    Description: |
      Cost analysis and optimization recommendations for Instance Connect Endpoint.
    Value: |
      üí∞ COST ANALYSIS:

      INSTANCE CONNECT ENDPOINT PRICING:
      - Endpoint Hours: $0.10 per hour per endpoint
      - Data Transfer: Standard AWS data transfer rates apply
      - No additional charges for connections or sessions

      MONTHLY COST ESTIMATION:
      - Single endpoint: $0.10 √ó 24 √ó 30 = $72/month
      - Multi-AZ (2 endpoints): $144/month
      - Multi-AZ (3 endpoints): $216/month

      üí° COST COMPARISON WITH ALTERNATIVES:

      BASTION HOST APPROACH:
      - t3.micro (24/7): ~$8.50/month
      - t3.small (24/7): ~$17/month
      - Plus: EBS storage, data transfer, operational overhead
      - Operational costs: Patching, monitoring, scaling

      VPN SOLUTION:
      - AWS Client VPN: $0.10/hour + $0.05 per connection hour
      - Site-to-Site VPN: $0.05/hour per connection
      - Plus: Bandwidth charges and setup complexity

      COST OPTIMIZATION STRATEGIES:

      1. RIGHT-SIZING:
         - Use single endpoint for development environments
         - Multi-AZ only for production critical workloads
         - Consider regional consolidation where possible

      2. USAGE OPTIMIZATION:
         - Implement connection time limits
         - Use automation to reduce manual connections
         - Consider scheduled access for batch operations

      3. MONITORING:
         - Track usage patterns with CloudWatch
         - Identify unused or underutilized endpoints
         - Regular cost reviews and optimization

      4. ALTERNATIVE APPROACHES:
         - AWS Systems Manager Session Manager (free)
         - AWS CloudShell for temporary access needs
         - Container-based workloads with ECS Exec

  ComplianceAndGovernance:
    Description: |
      Compliance and governance considerations for Instance Connect Endpoint.
    Value: !Sub |
      üìã COMPLIANCE AND GOVERNANCE:

      üîç AUDIT AND LOGGING:

      CLOUDTRAIL EVENTS TO MONITOR:
      - ec2-instance-connect:SendSSHPublicKey
      - ec2-instance-connect:OpenTunnel  
      - ec2:CreateInstanceConnectEndpoint
      - ec2:DeleteInstanceConnectEndpoint

      CLOUDWATCH METRICS:
      - Connection attempts and success rates
      - Data transfer volumes
      - Endpoint availability and health

      VPC FLOW LOGS:
      - Network traffic patterns
      - Source and destination analysis
      - Security incident investigation

      üìä COMPLIANCE FRAMEWORKS:

      SOC 2 TYPE II:
      ‚úÖ Logical access controls (IAM)
      ‚úÖ Network security controls (Security Groups)
      ‚úÖ Monitoring and logging (CloudTrail)
      ‚úÖ Change management (CloudFormation)

      PCI DSS:
      ‚úÖ Network segmentation (VPC, Security Groups)
      ‚úÖ Access control (IAM, MFA)
      ‚úÖ Monitoring (CloudWatch, CloudTrail)
      üîß Additional controls may be required for cardholder data

      HIPAA:
      ‚úÖ Access controls and authentication
      ‚úÖ Audit logging and monitoring
      ‚úÖ Network security and encryption
      üîß Business Associate Agreement required

      üèõÔ∏è GOVERNANCE BEST PRACTICES:

      1. ACCESS GOVERNANCE:
         - Regular access reviews (quarterly recommended)
         - Principle of least privilege enforcement
         - Automated access provisioning/deprovisioning
         - Emergency access procedures

      2. CHANGE MANAGEMENT:
         - Infrastructure as Code (this CloudFormation template)
         - Version control for all changes
         - Approval workflows for production changes
         - Rollback procedures and testing

      3. INCIDENT RESPONSE:
         - Automated alerting for security events
         - Incident response playbooks
         - Forensic data collection procedures
         - Communication and escalation plans

      4. DOCUMENTATION:
         - Network diagrams and data flows
         - Security control documentation
         - Standard operating procedures
         - Training and awareness materials

      üìû COMPLIANCE RESOURCES:
      - AWS Compliance Center: https://aws.amazon.com/compliance/
      - AWS Security Best Practices: https://aws.amazon.com/security/
      - AWS Well-Architected Framework: https://aws.amazon.com/well-architected/

# ADDITIONAL LEARNING RESOURCES:
#
# üìö EC2 INSTANCE CONNECT DOCUMENTATION:
# - User Guide: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect.html
# - API Reference: https://docs.aws.amazon.com/ec2-instance-connect/latest/APIReference/
# - CLI Reference: https://docs.aws.amazon.com/cli/latest/reference/ec2-instance-connect/
#
# üîó INTEGRATION PATTERNS:
# - Systems Manager Session Manager integration
# - AWS SSO and identity federation
# - CI/CD pipeline integration for deployments
# - Monitoring and alerting with CloudWatch
#
# üèóÔ∏è ARCHITECTURE PATTERNS:
#
# 1. Hub and Spoke Model:
#    [Central Management VPC] ‚Üí [Instance Connect Endpoint] ‚Üí [Workload VPCs]
#
# 2. Environment Isolation:
#    [Dev Endpoint] ‚Üí [Dev Instances]
#    [Prod Endpoint] ‚Üí [Prod Instances]
#
# 3. Multi-Region Setup:
#    [Primary Region Endpoint] ‚Üí [Primary Workloads]
#    [DR Region Endpoint] ‚Üí [DR Workloads]
#
# üîê SECURITY CONSIDERATIONS:
#
# 1. Defense in Depth:
#    - Network-level controls (Security Groups, NACLs)
#    - Identity-level controls (IAM, MFA)
#    - Host-level controls (OS hardening, monitoring)
#    - Application-level controls (logging, access controls)
#
# 2. Zero Trust Principles:
#    - Verify every connection attempt
#    - Least-privilege access enforcement
#    - Continuous monitoring and validation
#    - Assume breach mentality
#
# 3. Incident Response:
#    - Automated threat detection
#    - Rapid containment procedures
#    - Forensic data preservation
#    - Lessons learned integration