AWSTemplateFormatVersion: "2010-09-09"
Description: |
  EventBridge Rules for CodeCommit Events - Tutorial Template

  This template demonstrates how to capture and process CodeCommit events using EventBridge.
  It creates EventBridge rules that listen for various CodeCommit activities and forwards
  them to a Lambda function for processing.

  Events Captured:
  - Repository state changes (push, branch/tag creation/deletion)
  - Pull request lifecycle events (create, update, merge, close)
  - Comment events on pull requests and commits

  The Lambda function serves as a simple event processor that logs all received events
  for learning and debugging purposes.

Metadata:
  StackVersion: 2
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Repository Configuration"
        Parameters:
          - RepositoryNames
          - MonitoredBranches
      - Label:
          default: "Event Monitoring Configuration"
        Parameters:
          - EnablePushEvents
          - EnablePullRequestEvents
          - EnableCommentEvents
          - EnableBranchTagEvents
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - LambdaRuntime
    ParameterLabels:
      RepositoryNames:
        default: "CodeCommit Repository Names to Monitor"
      MonitoredBranches:
        default: "Git Branches to Monitor for Changes"
      EnablePushEvents:
        default: "Monitor Push Events (commits to branches)"
      EnablePullRequestEvents:
        default: "Monitor Pull Request Lifecycle Events"
      EnableCommentEvents:
        default: "Monitor Comment Events on PRs and Commits"
      EnableBranchTagEvents:
        default: "Monitor Branch and Tag Creation/Deletion"
      LambdaRuntime:
        default: "Lambda Function Runtime Version"

Parameters:
  # Repository Configuration Parameters
  RepositoryNames:
    Type: CommaDelimitedList
    Default: "demo-code-repository,demo-server-blank"
    Description: |
      Comma-separated list of CodeCommit repository names to monitor.
      Events from these repositories will trigger the EventBridge rules.
      Example: "repo1,repo2,repo3"

  MonitoredBranches:
    Type: CommaDelimitedList
    Default: "main,staging,develop"
    Description: |
      Comma-separated list of branch names to monitor for push events.
      Only changes to these branches will trigger repository state change events.
      Common branches: main, master, develop, staging, production

  # Event Monitoring Toggle Parameters
  EnablePushEvents:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: |
      Enable monitoring of push events (referenceCreated, referenceUpdated).
      These events fire when commits are pushed to monitored branches.

  EnablePullRequestEvents:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: |
      Enable monitoring of pull request lifecycle events.
      Includes: creation, updates, status changes, merge events.

  EnableCommentEvents:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: |
      Enable monitoring of comment events on pull requests and commits.
      Captures when users add comments during code review process.

  EnableBranchTagEvents:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: |
      Enable monitoring of branch and tag creation/deletion events.
      Useful for tracking repository structure changes.

  # Lambda Configuration Parameters
  LambdaRuntime:
    Type: String
    Default: "nodejs18.x"
    AllowedValues: ["nodejs18.x", "nodejs16.x", "python3.9", "python3.10", "python3.11"]
    Description: |
      Runtime environment for the Lambda function.
      The function code is provided inline and works with both Node.js and Python runtimes.

# Conditions determine which resources to create based on parameter values
Conditions:
  CreatePushRule: !Equals [!Ref EnablePushEvents, "true"]
  CreatePullRequestRule: !Equals [!Ref EnablePullRequestEvents, "true"]
  CreateCommentRule: !Equals [!Ref EnableCommentEvents, "true"]
  CreateBranchTagRule: !Equals [!Ref EnableBranchTagEvents, "true"]

Resources:
  # ============================================================================
  # IAM ROLE - Lambda Execution Role
  # ============================================================================
  # This role allows the Lambda function to execute and access AWS services
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-codecommit-eventbridge-lambda-role"
      Description: |
        IAM role that grants the Lambda function permission to:
        - Write logs to CloudWatch Logs
        - Read CodeCommit repository information (for enhanced event processing)
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com  # Only Lambda service can assume this role
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        # AWS managed policy that provides basic Lambda execution permissions
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        # Custom policy for CodeCommit read access (optional - for enhanced event processing)
        - PolicyName: CodeCommitReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:GetRepository      # Get repository metadata
                  - codecommit:GetBranch         # Get branch information
                  - codecommit:GetCommit         # Get commit details
                  - codecommit:GetPullRequest    # Get pull request details
                  - codecommit:ListRepositories  # List available repositories
                Resource: 
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Purpose
          Value: EventBridge-CodeCommit-Tutorial
        - Key: Component
          Value: Lambda-Execution-Role

  # ============================================================================
  # LAMBDA FUNCTION - Event Processor
  # ============================================================================
  # This Lambda function receives and processes CodeCommit events from EventBridge
  # It serves as a skeleton/template for building actual event processing logic
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-codecommit-event-processor"
      Description: |
        Tutorial Lambda function that processes CodeCommit events from EventBridge.
        This function demonstrates how to receive and parse different types of 
        CodeCommit events with input transformation applied.
      Runtime: !Ref LambdaRuntime
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Timeout: 30                    # Maximum execution time in seconds
      ReservedConcurrencyLimit: 10   # Limit concurrent executions
      Environment:
        Variables:
          # These environment variables are available to the Lambda function
          STACK_NAME: !Ref AWS::StackName
          AWS_REGION: !Ref AWS::Region
          LOG_LEVEL: "INFO"
      Code:
        # Inline code for tutorial purposes - in production, use deployment packages
        ZipFile: |
          // CodeCommit Event Processor - Tutorial Function
          // This function demonstrates how to process different types of CodeCommit events

          exports.handler = async (event) => {
              console.log('='.repeat(80));
              console.log('CODECOMMIT EVENT RECEIVED');
              console.log('='.repeat(80));

              // Log the complete event for learning purposes
              console.log('Complete Event Object:');
              console.log(JSON.stringify(event, null, 2));

              try {
                  // Determine event type and process accordingly
                  const eventType = event.EventType || 'Unknown';
                  console.log(`\nEvent Type: ${eventType}`);

                  // Process Repository State Change Events (Push, Branch/Tag operations)
                  if (eventType === 'RepositoryStateChange') {
                      console.log('\n--- REPOSITORY STATE CHANGE EVENT ---');
                      console.log(`Repository: ${event.RepositoryName}`);
                      console.log(`Reference: ${event.ReferenceName} (${event.ReferenceType})`);
                      console.log(`Event: ${event.EventName}`);
                      console.log(`User: ${event.CallerUserArn}`);
                      console.log(`Commit ID: ${event.CommitId || 'N/A'}`);
                      console.log(`Timestamp: ${event.Timestamp}`);

                      // Example: Handle different repository events
                      switch(event.EventName) {
                          case 'referenceCreated':
                              console.log(`‚úÖ New ${event.ReferenceType} created: ${event.ReferenceName}`);
                              break;
                          case 'referenceUpdated':
                              console.log(`üîÑ ${event.ReferenceType} updated: ${event.ReferenceName}`);
                              break;
                          case 'referenceDeleted':
                              console.log(`‚ùå ${event.ReferenceType} deleted: ${event.ReferenceName}`);
                              break;
                      }
                  }

                  // Process Pull Request Events
                  else if (eventType === 'PullRequestStateChange') {
                      console.log('\n--- PULL REQUEST EVENT ---');
                      console.log(`Repository: ${event.RepositoryName}`);
                      console.log(`Pull Request ID: ${event.PullRequestId}`);
                      console.log(`Title: ${event.Title}`);
                      console.log(`Author: ${event.Author}`);
                      console.log(`Event: ${event.EventName}`);
                      console.log(`Status: ${event.PullRequestStatus}`);
                      console.log(`Source: ${event.SourceReference}`);
                      console.log(`Target: ${event.DestinationReference}`);
                      console.log(`Is Merged: ${event.IsMerged}`);
                      console.log(`User: ${event.CallerUserArn}`);
                      console.log(`Timestamp: ${event.Timestamp}`);

                      // Example: Handle different pull request events
                      switch(event.EventName) {
                          case 'pullRequestCreated':
                              console.log('üÜï New pull request created');
                              break;
                          case 'pullRequestSourceBranchUpdated':
                              console.log('üîÑ Pull request source branch updated');
                              break;
                          case 'pullRequestStatusChanged':
                              console.log(`üìã Pull request status changed to: ${event.PullRequestStatus}`);
                              break;
                          case 'pullRequestMergeStatusUpdated':
                              console.log(`üîÄ Pull request merge status updated. Merged: ${event.IsMerged}`);
                              break;
                      }
                  }

                  // Process Comment Events
                  else if (eventType === 'CommentEvent') {
                      console.log('\n--- COMMENT EVENT ---');
                      console.log(`Repository: ${event.RepositoryName}`);
                      console.log(`Event: ${event.EventName}`);
                      console.log(`Comment ID: ${event.CommentId}`);
                      console.log(`Author: ${event.Author}`);
                      console.log(`User: ${event.CallerUserArn}`);
                      console.log(`Timestamp: ${event.Timestamp}`);

                      if (event.PullRequestId) {
                          console.log(`Pull Request ID: ${event.PullRequestId}`);
                      }
                      if (event.CommitId) {
                          console.log(`Commit ID: ${event.CommitId}`);
                      }
                  }

                  console.log('\n' + '='.repeat(80));
                  console.log('EVENT PROCESSING COMPLETED SUCCESSFULLY');
                  console.log('='.repeat(80));

                  // Return success response
                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          message: 'CodeCommit event processed successfully',
                          eventType: eventType,
                          repository: event.RepositoryName,
                          timestamp: new Date().toISOString()
                      })
                  };

              } catch (error) {
                  console.error('‚ùå Error processing CodeCommit event:', error);
                  console.error('Error details:', error.stack);

                  // Re-throw error to trigger Lambda failure (useful for debugging)
                  throw error;
              }
          };
      Tags:
        - Key: Purpose
          Value: EventBridge-CodeCommit-Tutorial
        - Key: Component
          Value: Event-Processor-Function

  # ============================================================================
  # EVENTBRIDGE RULE 1 - Repository State Changes (Push Events)
  # ============================================================================
  # This rule captures push events, branch creation/updates, and tag operations
  EventBridgeRuleRepositoryStateChange: 
    Type: AWS::Events::Rule
    Condition: CreatePushRule
    Properties: 
      Name: !Sub "${AWS::StackName}-repository-state-changes"
      Description: |
        Captures CodeCommit repository state change events including:
        - Push events (referenceUpdated) when commits are pushed to branches
        - Branch creation (referenceCreated) when new branches are created
        - Tag creation (referenceCreated) when new tags are created
        - Branch/tag deletion (referenceDeleted) when branches or tags are removed
      EventPattern:
        source:
          - aws.codecommit                    # Only events from CodeCommit service
        detail-type:
          - "CodeCommit Repository State Change"  # Specific event type for repository changes
        detail:
          event:
            - referenceCreated               # New branch or tag created
            - referenceUpdated               # Existing branch updated (push)
            - referenceDeleted               # Branch or tag deleted
          referenceType:
            - branch                         # Only branch events
            - tag                           # Only tag events
          referenceName: !Ref MonitoredBranches  # Only specified branches
        resources: !Split                     # Convert comma-delimited list to array
          - ","
          - !Sub 
            - "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${inner}"
            - inner: !Join
              - !Sub ",arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:"
              - !Ref RepositoryNames
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "RepositoryStateChangeTarget"
          # Input Transformer restructures the event data before sending to Lambda
          InputTransformer: 
            InputPathsMap:
              # Extract specific fields from the original event
              CallerUserArn: "$.detail.callerUserArn"        # Who made the change
              ReferenceName: "$.detail.referenceName"        # Branch/tag name
              RepositoryName: "$.detail.repositoryName"      # Repository name
              CommitId: "$.detail.commitId"                  # Commit SHA (for pushes)
              EventName: "$.detail.event"                    # Type of change
              ReferenceType: "$.detail.referenceType"        # branch or tag
              OldCommitId: "$.detail.oldCommitId"            # Previous commit SHA
            InputTemplate: |
              {
                "EventType": "RepositoryStateChange",
                "CallerUserArn": "<CallerUserArn>",
                "ReferenceName": "<ReferenceName>",
                "RepositoryName": "<RepositoryName>",
                "CommitId": "<CommitId>",
                "OldCommitId": "<OldCommitId>",
                "EventName": "<EventName>",
                "ReferenceType": "<ReferenceType>",
                "Timestamp": "<aws.events.event.ingestion-time>"
              }

  # ============================================================================
  # EVENTBRIDGE RULE 2 - Pull Request Events
  # ============================================================================
  # This rule captures all pull request lifecycle events
  EventBridgeRulePullRequestEvents: 
    Type: AWS::Events::Rule
    Condition: CreatePullRequestRule
    Properties: 
      Name: !Sub "${AWS::StackName}-pull-request-events"
      Description: |
        Captures CodeCommit pull request lifecycle events including:
        - Pull request creation (pullRequestCreated)
        - Source branch updates (pullRequestSourceBranchUpdated)
        - Status changes (pullRequestStatusChanged) - Open/Closed
        - Merge status updates (pullRequestMergeStatusUpdated)
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - "CodeCommit Pull Request State Change"    # Pull request specific events
        detail:
          event:
            - pullRequestCreated                      # New PR created
            - pullRequestSourceBranchUpdated          # Source branch updated
            - pullRequestStatusChanged                # PR opened/closed
            - pullRequestMergeStatusUpdated           # PR merged/unmerged
        resources: !Split
          - ","
          - !Sub 
            - "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${inner}"
            - inner: !Join
              - !Sub ",arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:"
              - !Ref RepositoryNames
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "PullRequestEventsTarget"
          InputTransformer:
            InputPathsMap:
              # Extract pull request specific fields
              Author: "$.detail.author"                       # PR author
              CallerUserArn: "$.detail.callerUserArn"        # User who triggered event
              Title: "$.detail.title"                         # PR title
              Description: "$.detail.description"             # PR description
              RepositoryName: "$.detail.repositoryNames[0]"   # Repository name
              DestinationReference: "$.detail.destinationReference"  # Target branch
              SourceReference: "$.detail.sourceReference"     # Source branch
              PullRequestId: "$.detail.pullRequestId"         # Unique PR ID
              PullRequestStatus: "$.detail.pullRequestStatus" # Open/Closed
              EventName: "$.detail.event"                     # Specific event type
              IsMerged: "$.detail.isMerged"                   # Merge status
              CreationDate: "$.detail.creationDate"           # When PR was created
              LastModifiedDate: "$.detail.lastModifiedDate"   # Last update time
            InputTemplate: |
              {
                "EventType": "PullRequestStateChange",
                "Author": "<Author>",
                "CallerUserArn": "<CallerUserArn>",
                "Title": "<Title>",
                "Description": "<Description>",
                "DestinationReference": "<DestinationReference>",
                "SourceReference": "<SourceReference>",
                "PullRequestId": "<PullRequestId>",
                "PullRequestStatus": "<PullRequestStatus>",
                "EventName": "<EventName>",
                "IsMerged": "<IsMerged>",
                "CreationDate": "<CreationDate>",
                "LastModifiedDate": "<LastModifiedDate>",
                "RepositoryName": "<RepositoryName>",
                "Timestamp": "<aws.events.event.ingestion-time>"
              }

  # ============================================================================
  # EVENTBRIDGE RULE 3 - Comment Events
  # ============================================================================
  # This rule captures comment events on pull requests and commits
  EventBridgeRuleCommentEvents:
    Type: AWS::Events::Rule
    Condition: CreateCommentRule
    Properties:
      Name: !Sub "${AWS::StackName}-comment-events"
      Description: |
        Captures CodeCommit comment events including:
        - Comments on pull requests (pullRequestCommentEvent)
        - Comments on commits (commentOnCommitEvent)
        - Replies to comments (replyToCommentEvent)
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - "CodeCommit Comment on Pull Request"     # Comments on PRs
          - "CodeCommit Comment on Commit"           # Comments on commits
        detail:
          event:
            - commentOnPullRequestCreated            # New comment on PR
            - commentOnCommitCreated                 # New comment on commit
            - replyToCommentCreated                  # Reply to existing comment
        resources: !Split
          - ","
          - !Sub 
            - "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${inner}"
            - inner: !Join
              - !Sub ",arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:"
              - !Ref RepositoryNames
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "CommentEventsTarget"
          InputTransformer:
            InputPathsMap:
              # Extract comment specific fields
              Author: "$.detail.author"                       # Comment author
              CallerUserArn: "$.detail.callerUserArn"        # User who made comment
              CommentId: "$.detail.commentId"                 # Unique comment ID
              Content: "$.detail.content"                     # Comment text
              RepositoryName: "$.detail.repositoryName"       # Repository name
              EventName: "$.detail.event"                     # Specific event type
              PullRequestId: "$.detail.pullRequestId"         # PR ID (if comment on PR)
              CommitId: "$.detail.commitId"                   # Commit ID (if comment on commit)
              InReplyTo: "$.detail.inReplyTo"                 # Parent comment ID (if reply)
              CreationDate: "$.detail.creationDate"           # When comment was created
            InputTemplate: |
              {
                "EventType": "CommentEvent",
                "Author": "<Author>",
                "CallerUserArn": "<CallerUserArn>",
                "CommentId": "<CommentId>",
                "Content": "<Content>",
                "RepositoryName": "<RepositoryName>",
                "EventName": "<EventName>",
                "PullRequestId": "<PullRequestId>",
                "CommitId": "<CommitId>",
                "InReplyTo": "<InReplyTo>",
                "CreationDate": "<CreationDate>",
                "Timestamp": "<aws.events.event.ingestion-time>"
              }

  # ============================================================================
  # LAMBDA PERMISSIONS - Allow EventBridge to Invoke Lambda
  # ============================================================================
  # These permissions allow EventBridge rules to invoke the Lambda function

  # Permission for Repository State Change events
  InvokeLambdaPermissionRepositoryStateChange:
    Type: AWS::Lambda::Permission
    Condition: CreatePushRule
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"              # Allow function invocation
      Principal: "events.amazonaws.com"            # EventBridge service principal
      SourceArn: !GetAtt EventBridgeRuleRepositoryStateChange.Arn  # Specific rule ARN

  # Permission for Pull Request events
  InvokeLambdaPermissionPullRequestEvents:
    Type: AWS::Lambda::Permission
    Condition: CreatePullRequestRule
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeRulePullRequestEvents.Arn

  # Permission for Comment events
  InvokeLambdaPermissionCommentEvents:
    Type: AWS::Lambda::Permission
    Condition: CreateCommentRule
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeRuleCommentEvents.Arn

  # ============================================================================
  # CLOUDWATCH LOG GROUP - Lambda Function Logs
  # ============================================================================
  # Explicit log group creation for better control over retention and permissions
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 14                          # Keep logs for 2 weeks
      Tags:
        - Key: Purpose
          Value: EventBridge-CodeCommit-Tutorial
        - Key: Component
          Value: Lambda-Logs

# ============================================================================
# OUTPUTS - Information about created resources
# ============================================================================
Outputs:
  # Lambda Function Information
  LambdaFunctionArn:
    Description: "ARN of the Lambda function that processes CodeCommit events"
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"

  LambdaFunctionName:
    Description: "Name of the Lambda function for CloudWatch monitoring"
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionName"

  # IAM Role Information
  FunctionExecutionRoleArn:
    Description: "ARN of the IAM role used by the Lambda function"
    Value: !GetAtt FunctionExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ExecutionRoleArn"

  # EventBridge Rules Information
  RepositoryStateChangeRuleArn:
    Condition: CreatePushRule
    Description: "ARN of EventBridge rule for repository state changes (push, branch/tag events)"
    Value: !GetAtt EventBridgeRuleRepositoryStateChange.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RepositoryStateChangeRuleArn"

  PullRequestEventsRuleArn:
    Condition: CreatePullRequestRule
    Description: "ARN of EventBridge rule for pull request lifecycle events"
    Value: !GetAtt EventBridgeRulePullRequestEvents.Arn
    Export:
      Name: !Sub "${AWS::StackName}-PullRequestEventsRuleArn"

  CommentEventsRuleArn:
    Condition: CreateCommentRule
    Description: "ARN of EventBridge rule for comment events on PRs and commits"
    Value: !GetAtt EventBridgeRuleCommentEvents.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CommentEventsRuleArn"

  # Configuration Summary
  MonitoredRepositories:
    Description: "List of CodeCommit repositories being monitored for events"
    Value: !Join [", ", !Ref RepositoryNames]

  MonitoredBranches:
    Description: "List of branches being monitored for push events"
    Value: !Join [", ", !Ref MonitoredBranches]

  EnabledEventTypes:
    Description: "Summary of enabled event monitoring types"
    Value: !Sub |
      Push Events: ${EnablePushEvents}
      Pull Request Events: ${EnablePullRequestEvents}
      Comment Events: ${EnableCommentEvents}
      Branch/Tag Events: ${EnableBranchTagEvents}

  # CloudWatch Logs Information
  CloudWatchLogGroup:
    Description: "CloudWatch Log Group where Lambda function logs are stored"
    Value: !Ref LambdaLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-LogGroup"

  # Tutorial Information
  TutorialNotes:
    Description: "Instructions for using this tutorial template"
    Value: |
      1. Deploy this stack to create EventBridge rules for CodeCommit events
      2. Make changes to your CodeCommit repositories (push, create PRs, add comments)
      3. Check CloudWatch Logs for the Lambda function to see captured events
      4. Modify the Lambda function code to add your custom event processing logic
      5. Use the Input Transformer examples to understand event data structure