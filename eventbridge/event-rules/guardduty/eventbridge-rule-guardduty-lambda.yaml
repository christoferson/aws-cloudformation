AWSTemplateFormatVersion: "2010-09-09"
Description: |
  EventBridge Rules for GuardDuty Events

  INSTRUCTIONS:
  1. Deploy this stack to create EventBridge rules for GuardDuty events
  2. Enable GuardDuty in your AWS account if not already enabled
  3. Wait for GuardDuty to generate findings (or create sample findings for testing)
  4. Check CloudWatch Logs for the Lambda function to see captured events
  5. Modify the Lambda function code to add your custom event processing logic
  6. Use the Input Transformer examples to understand event data structure

  GUARDDUTY EVENTS CAPTURED BY THIS TEMPLATE:

  Finding Events:
  - Finding: New security finding detected by GuardDuty
  - Finding Updated: Existing finding has been updated with new information
  - Finding Archived: Finding has been archived/suppressed

  The Lambda function serves as a skeleton event processor that logs all received events
  for learning and debugging purposes. EventBridge rules use Input Transformers to
  restructure event data before sending to Lambda.

Metadata:
  StackVersion: 2
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
      - Label:
          default: "GuardDuty Configuration"
        Parameters:
          - SeverityLevels
          - FindingTypes
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - LambdaRuntime
    ParameterLabels:
      Application:
        default: "Application Name"
      Environment:
        default: "Environment Name"
      SeverityLevels:
        default: "GuardDuty Severity Levels to Monitor"
      FindingTypes:
        default: "GuardDuty Finding Types to Monitor"
      LambdaRuntime:
        default: "Lambda Function Runtime Version"

Parameters:
  # Application Configuration Parameters
  Application:
    Type: String
    Default: "demo"
    Description: |
      Application name used for resource naming and tagging.
      This will be used as a prefix for all resource names.

  Environment:
    Type: String
    Default: "dev"
    AllowedValues: ["dev", "staging", "prod"]
    Description: |
      Environment name used for resource naming and tagging.
      This will be combined with the application name for resource identification.

  # GuardDuty Configuration Parameters
  SeverityLevels:
    Type: CommaDelimitedList
    Default: "HIGH,MEDIUM,LOW"
    Description: |
      Comma-separated list of GuardDuty severity levels to monitor.
      Events with these severity levels will trigger the EventBridge rules.
      Available levels: HIGH, MEDIUM, LOW

  FindingTypes:
    Type: CommaDelimitedList
    Default: "Backdoor,CryptoCurrency,Malware,Reconnaissance,Stealth,Trojan,UnauthorizedAccess"
    Description: |
      Comma-separated list of GuardDuty finding types to monitor.
      Only findings of these types will trigger events.
      Common types: Backdoor, CryptoCurrency, Malware, Reconnaissance, Stealth, Trojan, UnauthorizedAccess

  # Lambda Configuration Parameters
  LambdaRuntime:
    Type: String
    Default: "nodejs18.x"
    AllowedValues: ["nodejs18.x", "nodejs16.x", "python3.9", "python3.10", "python3.11"]
    Description: |
      Runtime environment for the Lambda function.
      The function code is provided inline and works with both Node.js and Python runtimes.

Resources:
  # ============================================================================
  # IAM ROLE - Lambda Execution Role
  # ============================================================================
  # This role allows the Lambda function to execute and access AWS services
  # Required permissions: CloudWatch Logs write access and GuardDuty read access
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Application}-${Environment}-guardduty-eventbridge-lambda-role"
      Description: |
        IAM role that grants the Lambda function permission to:
        - Write logs to CloudWatch Logs (via AWSLambdaBasicExecutionRole)
        - Read GuardDuty finding information for enhanced event processing
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com  # Only Lambda service can assume this role
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        # AWS managed policy that provides basic Lambda execution permissions
        # Includes: logs:CreateLogGroup, logs:CreateLogStream, logs:PutLogEvents
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        # Custom policy for GuardDuty read access (optional - for enhanced event processing)
        - PolicyName: GuardDutyReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - guardduty:GetFindings        # Get finding details
                  - guardduty:GetDetector        # Get detector information
                  - guardduty:ListFindings       # List available findings
                  - guardduty:ListDetectors      # List available detectors
                  - guardduty:GetFindingsStatistics  # Get finding statistics
                Resource: 
                  - !Sub "arn:aws:guardduty:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: Lambda-Execution-Role

  # ============================================================================
  # LAMBDA FUNCTION - Event Processor
  # ============================================================================
  # This Lambda function receives and processes GuardDuty events from EventBridge
  # It serves as a skeleton/template for building actual event processing logic
  # The function demonstrates how to parse different event types with input transformation
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Application}-${Environment}-guardduty-event-processor"
      Description: |
        Lambda function that processes GuardDuty events from EventBridge.
        This function demonstrates how to receive and parse different types of 
        GuardDuty events with input transformation applied.
      Runtime: !Ref LambdaRuntime
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Timeout: 30                    # Maximum execution time in seconds
      ReservedConcurrencyLimit: 10   # Limit concurrent executions to prevent overwhelming
      Environment:
        Variables:
          # These environment variables are available to the Lambda function
          APPLICATION: !Ref Application
          ENVIRONMENT: !Ref Environment
          AWS_REGION: !Ref AWS::Region
          LOG_LEVEL: "INFO"
      Code:
        # Inline code for production use - demonstrates event processing patterns
        ZipFile: |
          // GuardDuty Event Processor - Production Function
          // This function demonstrates how to process different types of GuardDuty events

          exports.handler = async (event) => {
              console.log('='.repeat(80));
              console.log('GUARDDUTY EVENT RECEIVED');
              console.log('='.repeat(80));

              // Log the complete event for learning purposes
              console.log('Complete Event Object:');
              console.log(JSON.stringify(event, null, 2));

              try {
                  // Determine event type and process accordingly
                  const eventType = event.EventType || 'Unknown';
                  console.log(`\nEvent Type: ${eventType}`);

                  // Process GuardDuty Finding Events
                  if (eventType === 'GuardDutyFinding') {
                      console.log('\n--- GUARDDUTY FINDING EVENT ---');
                      console.log(`Finding ID: ${event.FindingId}`);
                      console.log(`Finding Type: ${event.FindingType}`);
                      console.log(`Severity: ${event.Severity}`);
                      console.log(`Title: ${event.Title}`);
                      console.log(`Description: ${event.Description}`);
                      console.log(`Account ID: ${event.AccountId}`);
                      console.log(`Region: ${event.Region}`);
                      console.log(`Confidence: ${event.Confidence}`);
                      console.log(`Created At: ${event.CreatedAt}`);
                      console.log(`Updated At: ${event.UpdatedAt}`);
                      console.log(`Service: ${event.Service}`);
                      console.log(`Resource Type: ${event.ResourceType}`);
                      console.log(`Resource ID: ${event.ResourceId}`);
                      console.log(`Timestamp: ${event.Timestamp}`);

                      // Example: Handle different severity levels
                      switch(event.Severity) {
                          case 'HIGH':
                              console.log('üö® HIGH SEVERITY FINDING - Immediate attention required!');
                              // Add high priority alerting logic here
                              break;
                          case 'MEDIUM':
                              console.log('‚ö†Ô∏è MEDIUM SEVERITY FINDING - Investigation recommended');
                              // Add medium priority handling logic here
                              break;
                          case 'LOW':
                              console.log('‚ÑπÔ∏è LOW SEVERITY FINDING - Monitor for patterns');
                              // Add low priority logging logic here
                              break;
                      }

                      // Example: Handle different finding types
                      if (event.FindingType.includes('Malware')) {
                          console.log('ü¶† MALWARE DETECTED - Quarantine recommended');
                      } else if (event.FindingType.includes('CryptoCurrency')) {
                          console.log('‚Çø CRYPTOCURRENCY MINING DETECTED');
                      } else if (event.FindingType.includes('Reconnaissance')) {
                          console.log('üîç RECONNAISSANCE ACTIVITY DETECTED');
                      } else if (event.FindingType.includes('UnauthorizedAccess')) {
                          console.log('üö´ UNAUTHORIZED ACCESS ATTEMPT');
                      }
                  }

                  console.log('\n' + '='.repeat(80));
                  console.log('EVENT PROCESSING COMPLETED SUCCESSFULLY');
                  console.log('='.repeat(80));

                  // Return success response
                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          message: 'GuardDuty event processed successfully',
                          eventType: eventType,
                          findingId: event.FindingId,
                          severity: event.Severity,
                          timestamp: new Date().toISOString()
                      })
                  };

              } catch (error) {
                  console.error('‚ùå Error processing GuardDuty event:', error);
                  console.error('Error details:', error.stack);

                  // Re-throw error to trigger Lambda failure (useful for debugging)
                  throw error;
              }
          };
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: Event-Processor-Function

  # ============================================================================
  # EVENTBRIDGE RULE 1 - GuardDuty Findings
  # ============================================================================
  # This rule captures GuardDuty finding events including new findings,
  # updated findings, and archived findings
  # Event Pattern: Matches GuardDuty Finding events for specific
  # severity levels and finding types
  EventBridgeRuleGuardDutyFindings: 
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub "${Application}-${Environment}-guardduty-findings"
      Description: |
        Captures GuardDuty finding events including:
        - New findings detected by GuardDuty
        - Updated findings with new information
        - Archived findings that have been suppressed
      EventPattern:
        source:
          - aws.guardduty                     # Only events from GuardDuty service
        detail-type:
          - "GuardDuty Finding"               # Specific event type for GuardDuty findings
        detail:
          severity: !Ref SeverityLevels       # Only specified severity levels
          type: !Ref FindingTypes             # Only specified finding types
      State: "ENABLED"                       # Rule is active and will trigger events
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "GuardDutyFindingsTarget"
          # Input Transformer restructures the event data before sending to Lambda
          # This extracts specific fields and creates a clean, structured payload
          InputTransformer: 
            InputPathsMap:
              # Extract specific fields from the original GuardDuty event
              FindingId: "$.detail.id"                        # Unique finding identifier
              FindingType: "$.detail.type"                    # Type of finding (e.g., Malware:EC2/...)
              Severity: "$.detail.severity"                   # HIGH, MEDIUM, LOW
              Title: "$.detail.title"                         # Human-readable title
              Description: "$.detail.description"             # Detailed description
              AccountId: "$.detail.accountId"                 # AWS Account ID
              Region: "$.detail.region"                       # AWS Region
              Confidence: "$.detail.confidence"               # Confidence level (0-10)
              CreatedAt: "$.detail.createdAt"                 # When finding was first created
              UpdatedAt: "$.detail.updatedAt"                 # When finding was last updated
              Service: "$.detail.service.serviceName"         # Service that detected the finding
              ResourceType: "$.detail.resource.resourceType"  # Type of affected resource
              ResourceId: "$.detail.resource.instanceDetails.instanceId"  # Resource identifier
            InputTemplate: |
              {
                "EventType": "GuardDutyFinding",
                "FindingId": "<FindingId>",
                "FindingType": "<FindingType>",
                "Severity": "<Severity>",
                "Title": "<Title>",
                "Description": "<Description>",
                "AccountId": "<AccountId>",
                "Region": "<Region>",
                "Confidence": "<Confidence>",
                "CreatedAt": "<CreatedAt>",
                "UpdatedAt": "<UpdatedAt>",
                "Service": "<Service>",
                "ResourceType": "<ResourceType>",
                "ResourceId": "<ResourceId>",
                "Timestamp": "<aws.events.event.ingestion-time>"
              }

  # ============================================================================
  # LAMBDA PERMISSIONS - Allow EventBridge to Invoke Lambda
  # ============================================================================
  # These permissions are required for EventBridge rules to successfully invoke
  # the Lambda function. Each rule needs its own permission resource.

  # Permission for GuardDuty Finding events to invoke Lambda
  # This allows the EventBridge rule to call the Lambda function when GuardDuty events occur
  InvokeLambdaPermissionGuardDutyFindings:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn    # Target Lambda function
      Action: "lambda:InvokeFunction"              # Permission to invoke the function
      Principal: "events.amazonaws.com"            # EventBridge service principal
      SourceArn: !GetAtt EventBridgeRuleGuardDutyFindings.Arn  # Specific rule that can invoke

  # ============================================================================
  # CLOUDWATCH LOG GROUP - Lambda Function Logs
  # ============================================================================
  # Explicit log group creation provides better control over log retention and permissions
  # Without this, Lambda creates the log group automatically with default settings
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"  # Standard Lambda log group naming
      RetentionInDays: 14                                 # Keep logs for 2 weeks (cost optimization)
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: Lambda-Logs

# ============================================================================
# OUTPUTS - Information about created resources
# ============================================================================
Outputs:
  # Lambda Function Information
  LambdaFunctionArn:
    Description: "ARN of the Lambda function that processes GuardDuty events"
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${Application}-${Environment}-LambdaFunctionArn"

  LambdaFunctionName:
    Description: "Name of the Lambda function for CloudWatch monitoring"
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub "${Application}-${Environment}-LambdaFunctionName"

  # IAM Role Information
  FunctionExecutionRoleArn:
    Description: "ARN of the IAM role used by the Lambda function"
    Value: !GetAtt FunctionExecutionRole.Arn
    Export:
      Name: !Sub "${Application}-${Environment}-ExecutionRoleArn"

  # EventBridge Rules Information
  GuardDutyFindingsRuleArn:
    Description: "ARN of EventBridge rule for GuardDuty findings"
    Value: !GetAtt EventBridgeRuleGuardDutyFindings.Arn
    Export:
      Name: !Sub "${Application}-${Environment}-GuardDutyFindingsRuleArn"

  # Configuration Summary
  MonitoredSeverityLevels:
    Description: "List of GuardDuty severity levels being monitored for events"
    Value: !Join [", ", !Ref SeverityLevels]

  MonitoredFindingTypes:
    Description: "List of GuardDuty finding types being monitored"
    Value: !Join [", ", !Ref FindingTypes]

  # CloudWatch Logs Information
  CloudWatchLogGroup:
    Description: "CloudWatch Log Group where Lambda function logs are stored"
    Value: !Ref LambdaLogGroup
    Export:
      Name: !Sub "${Application}-${Environment}-LogGroup"