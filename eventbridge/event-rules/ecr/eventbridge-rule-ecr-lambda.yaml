AWSTemplateFormatVersion: "2010-09-09"
Description: |
  EventBridge Rules for ECR Events

  INSTRUCTIONS:
  1. Deploy this stack to create EventBridge rules for ECR events
  2. Push images to your ECR repositories, scan images, or perform lifecycle actions
  3. Check CloudWatch Logs for the Lambda function to see captured events
  4. Modify the Lambda function code to add your custom event processing logic
  5. Use the Input Transformer examples to understand event data structure

  ECR EVENTS CAPTURED BY THIS TEMPLATE:

  Image Actions:
  - PUSH: New image pushed to repository
  - DELETE: Image deleted from repository

  Image Scan Events:
  - SCAN_ON_PUSH: Image scan completed after push
  - BASIC_SCAN_COMPLETE: Basic vulnerability scan completed
  - ENHANCED_SCAN_COMPLETE: Enhanced vulnerability scan completed

  The Lambda function serves as a skeleton event processor that logs all received events
  for learning and debugging purposes. EventBridge rules use Input Transformers to
  restructure event data before sending to Lambda.

Metadata:
  StackVersion: 2
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Application Configuration"
        Parameters:
          - Application
          - Environment
      - Label:
          default: "Repository Configuration"
        Parameters:
          - RepositoryNameList
          - ImageTagList
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - LambdaRuntime
    ParameterLabels:
      Application:
        default: "Application Name"
      Environment:
        default: "Environment Name"
      RepositoryNameList:
        default: "ECR Repository Names to Monitor"
      ImageTagList:
        default: "Image Tags to Monitor for Changes"
      LambdaRuntime:
        default: "Lambda Function Runtime Version"

Parameters:
  # Application Configuration Parameters
  Application:
    Type: String
    Default: "demo"
    Description: |
      Application name used for resource naming and tagging.
      This will be used as a prefix for all resource names.

  Environment:
    Type: String
    Default: "dev"
    AllowedValues: ["dev", "staging", "prod"]
    Description: |
      Environment name used for resource naming and tagging.
      This will be combined with the application name for resource identification.

  # Repository Configuration Parameters
  RepositoryNameList:
    Type: CommaDelimitedList
    Default: "demo-app-repository,demo-server-blank"
    Description: |
      Comma-separated list of ECR repository names to monitor.
      Events from these repositories will trigger the EventBridge rules.
      Example: "repo1,repo2,repo3"

  ImageTagList:
    Type: CommaDelimitedList
    Default: "latest,main,staging,develop"
    Description: |
      Comma-separated list of image tags to monitor for push events.
      Only changes to images with these tags will trigger repository events.
      Common tags: latest, main, develop, staging, production

  # Lambda Configuration Parameters
  LambdaRuntime:
    Type: String
    Default: "nodejs18.x"
    AllowedValues: ["nodejs18.x", "nodejs16.x", "python3.9", "python3.10", "python3.11"]
    Description: |
      Runtime environment for the Lambda function.
      The function code is provided inline and works with both Node.js and Python runtimes.

Resources:
  # ============================================================================
  # IAM ROLE - Lambda Execution Role
  # ============================================================================
  # This role allows the Lambda function to execute and access AWS services
  # Required permissions: CloudWatch Logs write access and ECR read access
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Application}-${Environment}-ecr-eventbridge-lambda-role"
      Description: |
        IAM role that grants the Lambda function permission to:
        - Write logs to CloudWatch Logs (via AWSLambdaBasicExecutionRole)
        - Read ECR repository information for enhanced event processing
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com  # Only Lambda service can assume this role
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        # AWS managed policy that provides basic Lambda execution permissions
        # Includes: logs:CreateLogGroup, logs:CreateLogStream, logs:PutLogEvents
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        # Custom policy for ECR read access (optional - for enhanced event processing)
        - PolicyName: EcrReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetRepository              # Get repository metadata
                  - ecr:DescribeRepositories       # Describe repository details
                  - ecr:DescribeImages             # Get image details
                  - ecr:GetRepositoryPolicy        # Get repository policies
                  - ecr:DescribeImageScanFindings  # Get scan results
                  - ecr:ListImages                 # List repository images
                Resource: 
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: Lambda-Execution-Role

  # ============================================================================
  # LAMBDA FUNCTION - Event Processor
  # ============================================================================
  # This Lambda function receives and processes ECR events from EventBridge
  # It serves as a skeleton/template for building actual event processing logic
  # The function demonstrates how to parse different event types with input transformation
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Application}-${Environment}-ecr-event-processor"
      Description: |
        Lambda function that processes ECR events from EventBridge.
        This function demonstrates how to receive and parse different types of 
        ECR events with input transformation applied.
      Runtime: !Ref LambdaRuntime
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Timeout: 30                    # Maximum execution time in seconds
      ReservedConcurrencyLimit: 10   # Limit concurrent executions to prevent overwhelming
      Environment:
        Variables:
          # These environment variables are available to the Lambda function
          APPLICATION: !Ref Application
          ENVIRONMENT: !Ref Environment
          AWS_REGION: !Ref AWS::Region
          LOG_LEVEL: "INFO"
      Code:
        # Inline code for production use - demonstrates event processing patterns
        ZipFile: |
          // ECR Event Processor - Production Function
          // This function demonstrates how to process different types of ECR events

          exports.handler = async (event) => {
              console.log('='.repeat(80));
              console.log('ECR EVENT RECEIVED');
              console.log('='.repeat(80));

              // Log the complete event for learning purposes
              console.log('Complete Event Object:');
              console.log(JSON.stringify(event, null, 2));

              try {
                  // Determine event type and process accordingly
                  const eventType = event.EventType || 'Unknown';
                  console.log(`\nEvent Type: ${eventType}`);

                  // Process Image Action Events (Push, Delete operations)
                  if (eventType === 'ImageAction') {
                      console.log('\n--- IMAGE ACTION EVENT ---');
                      console.log(`Repository: ${event.RepositoryName}`);
                      console.log(`Image URI: ${event.ImageUri}`);
                      console.log(`Image Tag: ${event.ImageTag}`);
                      console.log(`Image Digest: ${event.ImageDigest}`);
                      console.log(`Action: ${event.ActionType}`);
                      console.log(`Result: ${event.Result}`);
                      console.log(`Registry ID: ${event.RegistryId}`);
                      console.log(`Timestamp: ${event.Timestamp}`);

                      // Example: Handle different image actions
                      switch(event.ActionType) {
                          case 'PUSH':
                              console.log(`✅ Image pushed: ${event.ImageTag}`);
                              break;
                          case 'DELETE':
                              console.log(`❌ Image deleted: ${event.ImageTag}`);
                              break;
                      }
                  }

                  // Process Image Scan Events
                  else if (eventType === 'ImageScanComplete') {
                      console.log('\n--- IMAGE SCAN EVENT ---');
                      console.log(`Repository: ${event.RepositoryName}`);
                      console.log(`Image URI: ${event.ImageUri}`);
                      console.log(`Image Tag: ${event.ImageTag}`);
                      console.log(`Image Digest: ${event.ImageDigest}`);
                      console.log(`Scan Status: ${event.ScanStatus}`);
                      console.log(`Scan Type: ${event.ScanType}`);
                      console.log(`Registry ID: ${event.RegistryId}`);
                      console.log(`Findings Count: ${event.FindingCounts || 'N/A'}`);
                      console.log(`Timestamp: ${event.Timestamp}`);

                      // Example: Handle different scan results
                      switch(event.ScanStatus) {
                          case 'COMPLETE':
                              console.log('✅ Image scan completed successfully');
                              break;
                          case 'FAILED':
                              console.log('❌ Image scan failed');
                              break;
                          case 'IN_PROGRESS':
                              console.log('🔄 Image scan in progress');
                              break;
                      }
                  }

                  console.log('\n' + '='.repeat(80));
                  console.log('EVENT PROCESSING COMPLETED SUCCESSFULLY');
                  console.log('='.repeat(80));

                  // Return success response
                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          message: 'ECR event processed successfully',
                          eventType: eventType,
                          repository: event.RepositoryName,
                          timestamp: new Date().toISOString()
                      })
                  };

              } catch (error) {
                  console.error('❌ Error processing ECR event:', error);
                  console.error('Error details:', error.stack);

                  // Re-throw error to trigger Lambda failure (useful for debugging)
                  throw error;
              }
          };
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: Event-Processor-Function

  # ============================================================================
  # EVENTBRIDGE RULE 1 - Image Actions (Push/Delete)
  # ============================================================================
  # This rule captures ECR image action events including push and delete operations
  # Event Pattern: Matches ECR Image Action events for specific repositories and tags
  EventBridgeRuleEcrImageActions: 
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub "${Application}-${Environment}-image-actions"
      Description: |
        Captures ECR image action events including:
        - Push events (PUSH) when images are pushed to repositories
        - Delete events (DELETE) when images are deleted from repositories
      EventPattern:
        source:
          - aws.ecr                           # Only events from ECR service
        detail-type:
          - "ECR Image Action"                # Specific event type for image actions
        detail:
          action-type:
            - PUSH                            # Image push events
            - DELETE                          # Image delete events
          result:
            - SUCCESS                         # Only successful operations
          repository-name: !Ref RepositoryNameList  # Only specified repositories
          image-tag: !Ref ImageTagList        # Only specified tags
      State: "ENABLED"                       # Rule is active and will trigger events
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "ImageActionsTarget"
          # Input Transformer restructures the event data before sending to Lambda
          # This extracts specific fields and creates a clean, structured payload
          InputTransformer: 
            InputPathsMap:
              # Extract specific fields from the original ECR event
              RepositoryName: "$.detail.repository-name"      # Repository name
              ImageUri: "$.detail.image-uri"                  # Full image URI
              ImageTag: "$.detail.image-tag"                  # Image tag
              ImageDigest: "$.detail.image-digest"            # Image SHA digest
              ActionType: "$.detail.action-type"              # PUSH or DELETE
              Result: "$.detail.result"                       # SUCCESS or FAILURE
              RegistryId: "$.detail.registry-id"              # AWS account ID
            InputTemplate: |
              {
                "EventType": "ImageAction",
                "RepositoryName": "<RepositoryName>",
                "ImageUri": "<ImageUri>",
                "ImageTag": "<ImageTag>",
                "ImageDigest": "<ImageDigest>",
                "ActionType": "<ActionType>",
                "Result": "<Result>",
                "RegistryId": "<RegistryId>",
                "Timestamp": "<aws.events.event.ingestion-time>"
              }

  # ============================================================================
  # EVENTBRIDGE RULE 2 - Image Scan Events
  # ============================================================================
  # This rule captures ECR image scan completion events including vulnerability scans
  # Event Pattern: Matches ECR Image Scan events for security scanning results
  EventBridgeRuleEcrImageScans: 
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub "${Application}-${Environment}-image-scans"
      Description: |
        Captures ECR image scan events including:
        - Basic vulnerability scan completion
        - Enhanced vulnerability scan completion
        - Scan on push completion
      EventPattern:
        source:
          - aws.ecr                           # Only ECR service events
        detail-type:
          - "ECR Image Scan"                  # Image scan specific events
        detail:
          scan-status:
            - COMPLETE                        # Only completed scans
            - FAILED                          # Include failed scans for monitoring
          repository-name: !Ref RepositoryNameList  # Target specific repositories
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "ImageScansTarget"
          # Input Transformer extracts scan-specific information
          # and creates a structured payload with scan results
          InputTransformer:
            InputPathsMap:
              # Extract scan specific fields from the event
              RepositoryName: "$.detail.repository-name"      # Repository name
              ImageUri: "$.detail.image-uri"                  # Full image URI
              ImageTag: "$.detail.image-tags[0]"              # First image tag
              ImageDigest: "$.detail.image-digest"            # Image SHA digest
              ScanStatus: "$.detail.scan-status"              # COMPLETE, FAILED, etc.
              ScanType: "$.detail.scan-type"                  # BASIC, ENHANCED
              RegistryId: "$.detail.registry-id"              # AWS account ID
              FindingCounts: "$.detail.finding-counts"        # Vulnerability counts
            InputTemplate: |
              {
                "EventType": "ImageScanComplete",
                "RepositoryName": "<RepositoryName>",
                "ImageUri": "<ImageUri>",
                "ImageTag": "<ImageTag>",
                "ImageDigest": "<ImageDigest>",
                "ScanStatus": "<ScanStatus>",
                "ScanType": "<ScanType>",
                "RegistryId": "<RegistryId>",
                "FindingCounts": "<FindingCounts>",
                "Timestamp": "<aws.events.event.ingestion-time>"
              }

  # ============================================================================
  # LAMBDA PERMISSIONS - Allow EventBridge to Invoke Lambda
  # ============================================================================
  # These permissions are required for EventBridge rules to successfully invoke
  # the Lambda function. Each rule needs its own permission resource.

  # Permission for Image Action events to invoke Lambda
  # This allows the EventBridge rule to call the Lambda function when image events occur
  InvokeLambdaPermissionEcrImageActions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn    # Target Lambda function
      Action: "lambda:InvokeFunction"              # Permission to invoke the function
      Principal: "events.amazonaws.com"            # EventBridge service principal
      SourceArn: !GetAtt EventBridgeRuleEcrImageActions.Arn  # Specific rule that can invoke

  # Permission for Image Scan events to invoke Lambda
  # This allows the image scan EventBridge rule to call the Lambda function
  InvokeLambdaPermissionEcrImageScans:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeRuleEcrImageScans.Arn

  # ============================================================================
  # CLOUDWATCH LOG GROUP - Lambda Function Logs
  # ============================================================================
  # Explicit log group creation provides better control over log retention and permissions
  # Without this, Lambda creates the log group automatically with default settings
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"  # Standard Lambda log group naming
      RetentionInDays: 14                                 # Keep logs for 2 weeks (cost optimization)
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: Lambda-Logs

# ============================================================================
# OUTPUTS - Information about created resources
# ============================================================================
Outputs:
  # Lambda Function Information
  LambdaFunctionArn:
    Description: "ARN of the Lambda function that processes ECR events"
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${Application}-${Environment}-LambdaFunctionArn"

  LambdaFunctionName:
    Description: "Name of the Lambda function for CloudWatch monitoring"
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub "${Application}-${Environment}-LambdaFunctionName"

  # IAM Role Information
  FunctionExecutionRoleArn:
    Description: "ARN of the IAM role used by the Lambda function"
    Value: !GetAtt FunctionExecutionRole.Arn
    Export:
      Name: !Sub "${Application}-${Environment}-ExecutionRoleArn"

  # EventBridge Rules Information
  ImageActionsRuleArn:
    Description: "ARN of EventBridge rule for ECR image actions (push/delete events)"
    Value: !GetAtt EventBridgeRuleEcrImageActions.Arn
    Export:
      Name: !Sub "${Application}-${Environment}-ImageActionsRuleArn"

  ImageScansRuleArn:
    Description: "ARN of EventBridge rule for ECR image scan events"
    Value: !GetAtt EventBridgeRuleEcrImageScans.Arn
    Export:
      Name: !Sub "${Application}-${Environment}-ImageScansRuleArn"

  # Configuration Summary
  MonitoredRepositoryList:
    Description: "List of ECR repositories being monitored for events"
    Value: !Join [", ", !Ref RepositoryNameList]

  MonitoredImageTagList:
    Description: "List of image tags being monitored for push events"
    Value: !Join [", ", !Ref ImageTagList]

  # CloudWatch Logs Information
  CloudWatchLogGroup:
    Description: "CloudWatch Log Group where Lambda function logs are stored"
    Value: !Ref LambdaLogGroup
    Export:
      Name: !Sub "${Application}-${Environment}-LogGroup"