AWSTemplateFormatVersion: "2010-09-09"
Description: EventBridge Notification (Periodic) - Trigger Lambda

Resources:

  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: "eventbridge-handler-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName : "eventbridge-handler-lambda-function"
      Description: "EventBridge Lambda Notification Handler"
      Runtime: nodejs16.x
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log(event);
              if (event.type == 'error') { throw new Error('Authentication Failed'); }
              console.log('Type: ' + event['detail-type']);
              console.log('Time: ' + event.time);
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hi from the ' + event.routeKey + ' route!'),
              };
              return response;
          };
      TracingConfig:
        Mode: "Active"
      Tags:
        - Key: "name"
          Value: "eventbridge-call-lambda-schedule"

  EventBridgeScheduledRule: 
    Type: AWS::Events::Rule
    Properties:
      #Name: xx
      Description: "ScheduledRule to Trigger Lambda"
      #EventBusName: default
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets: #up to five (5) targets
        - 
          Arn: !GetAtt LambdaFunction.Arn
          Id: "TargetFunctionV1"

  InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeScheduledRule.Arn

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 1

Outputs:

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn

  FunctionExecutionRoleArn:
    Value: !GetAtt FunctionExecutionRole.Arn

  EventBridgeScheduledRuleArn:
    Value: !GetAtt EventBridgeScheduledRule.Arn
